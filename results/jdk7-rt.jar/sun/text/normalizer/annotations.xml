<root>
  <item name="sun.text.normalizer.CharTrie CharTrie(int, int, sun.text.normalizer.Trie.DataManipulate) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.CharTrie CharTrie(java.io.InputStream, sun.text.normalizer.Trie.DataManipulate) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.CharTrie char access$100(sun.text.normalizer.CharTrie) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharTrie char access$100(sun.text.normalizer.CharTrie)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie char[] access$000(sun.text.normalizer.CharTrie) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharTrie char[] access$000(sun.text.normalizer.CharTrie)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie int getInitialValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie int getValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie void putIndexData(sun.text.normalizer.UCharacterProperty) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharTrie.FriendAgent char[] getPrivateData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie.FriendAgent char[] getPrivateIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie.FriendAgent int getPrivateInitialValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharacterIteratorWrapper CharacterIteratorWrapper(java.text.CharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharacterIteratorWrapper int getText(char[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharacterIteratorWrapper java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.ICUBinary ICUBinary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ICUBinary byte[] readHeader(java.io.InputStream, byte[], sun.text.normalizer.ICUBinary.Authenticate) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.ICUBinary byte[] readHeader(java.io.InputStream, byte[], sun.text.normalizer.ICUBinary.Authenticate) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.ICUBinary byte[] readHeader(java.io.InputStream, byte[], sun.text.normalizer.ICUBinary.Authenticate)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ICUData ICUData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ICUData.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.IntTrie IntTrie(char[], int[], int, int, sun.text.normalizer.Trie.DataManipulate) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.IntTrie IntTrie(java.io.InputStream, sun.text.normalizer.Trie.DataManipulate) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.IntTrie int getInitialValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.IntTrie int getValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.lang.String, sun.text.normalizer.NormalizerBase.Mode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.lang.String, sun.text.normalizer.NormalizerBase.Mode, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.text.CharacterIterator, sun.text.normalizer.NormalizerBase.Mode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.text.CharacterIterator, sun.text.normalizer.NormalizerBase.Mode, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNFSkippable(int, sun.text.normalizer.NormalizerBase.Mode) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNormalized(java.lang.String, java.text.Normalizer.Form) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNormalized(java.lang.String, java.text.Normalizer.Form) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNormalized(java.lang.String, java.text.Normalizer.Form, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNormalized(java.lang.String, java.text.Normalizer.Form, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int findNextIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase.IsNextBoundary, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int findPreviousIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase.IsPrevBoundary, int, int, char[], int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int findPreviousIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase.IsPrevBoundary, int, int, char[], int[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int findPreviousIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase.IsPrevBoundary, int, int, char[], int[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int getBeginIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int getCodePointAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int next(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int next(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int next(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int normalize(char[], int, int, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, int) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int previous(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int previous(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int previous(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String compose(java.lang.String, boolean, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String decompose(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String decompose(java.lang.String, boolean, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String normalize(java.lang.String, java.text.Normalizer.Form) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String normalize(java.lang.String, java.text.Normalizer.Form) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String normalize(java.lang.String, java.text.Normalizer.Form, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String normalize(java.lang.String, java.text.Normalizer.Form, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long access$1000(sun.text.normalizer.UCharacterIterator, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long access$1100(sun.text.normalizer.UCharacterIterator, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long access$1100(sun.text.normalizer.UCharacterIterator, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long getNextNorm32(sun.text.normalizer.UCharacterIterator, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long getNextNorm32(sun.text.normalizer.UCharacterIterator, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long getPrevNorm32(sun.text.normalizer.UCharacterIterator, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase sun.text.normalizer.NormalizerBase.Mode getMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase void setText(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase void setText(java.text.CharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextNFDSafe IsNextNFDSafe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextNFDSafe IsNextNFDSafe(sun.text.normalizer.NormalizerBase.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextNFDSafe IsNextNFDSafe(sun.text.normalizer.NormalizerBase.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextNFDSafe boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextNFDSafe boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextTrueStarter IsNextTrueStarter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextTrueStarter IsNextTrueStarter(sun.text.normalizer.NormalizerBase.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextTrueStarter IsNextTrueStarter(sun.text.normalizer.NormalizerBase.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextTrueStarter boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextTrueStarter boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevNFDSafe IsPrevNFDSafe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevNFDSafe IsPrevNFDSafe(sun.text.normalizer.NormalizerBase.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevNFDSafe IsPrevNFDSafe(sun.text.normalizer.NormalizerBase.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevNFDSafe boolean isPrevBoundary(sun.text.normalizer.UCharacterIterator, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevTrueStarter IsPrevTrueStarter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevTrueStarter IsPrevTrueStarter(sun.text.normalizer.NormalizerBase.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevTrueStarter IsPrevTrueStarter(sun.text.normalizer.NormalizerBase.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevTrueStarter boolean isPrevBoundary(sun.text.normalizer.UCharacterIterator, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode Mode(int, sun.text.normalizer.NormalizerBase.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode boolean isNFSkippable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode int normalize(char[], int, int, char[], int, int, sun.text.normalizer.UnicodeSet) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode java.lang.String normalize(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_-&gt;!null;null,_-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode NFCMode(int, sun.text.normalizer.NormalizerBase.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode int normalize(char[], int, int, char[], int, int, sun.text.normalizer.UnicodeSet) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode java.lang.String normalize(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode NFDMode(int, sun.text.normalizer.NormalizerBase.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode int normalize(char[], int, int, char[], int, int, sun.text.normalizer.UnicodeSet) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode java.lang.String normalize(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode NFKCMode(int, sun.text.normalizer.NormalizerBase.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode int normalize(char[], int, int, char[], int, int, sun.text.normalizer.UnicodeSet) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode java.lang.String normalize(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode NFKDMode(int, sun.text.normalizer.NormalizerBase.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode int normalize(char[], int, int, char[], int, int, sun.text.normalizer.UnicodeSet) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode java.lang.String normalize(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.QuickCheckResult QuickCheckResult(int, sun.text.normalizer.NormalizerBase.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader boolean isDataVersionAcceptable(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader boolean isDataVersionAcceptable(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader byte[] getDataFormatVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader byte[] getUnicodeVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader int[] readIndexes(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean composeHangul(char, char, long, char[], int[], int, boolean, char[], int, sun.text.normalizer.UnicodeSet) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean composeHangul(char, char, long, char[], int[], int, boolean, char[], int, sun.text.normalizer.UnicodeSet) 9">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isHangulWithoutJamoT(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isJamoVTNorm32JamoV(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isNFSkippable(int, sun.text.normalizer.NormalizerBase.Mode, long) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isNorm32HangulOrJamo(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isNorm32LeadSurrogate(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isNorm32Regular(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean needSingleQuotation(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean nx_contains(sun.text.normalizer.UnicodeSet, char, char) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean nx_contains(sun.text.normalizer.UnicodeSet, char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean nx_contains(sun.text.normalizer.UnicodeSet, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean nx_contains(sun.text.normalizer.UnicodeSet, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl char recompose(sun.text.normalizer.NormalizerImpl.RecomposeArgs, int, sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl char recompose(sun.text.normalizer.NormalizerImpl.RecomposeArgs, int, sun.text.normalizer.UnicodeSet) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl char[] composePart(sun.text.normalizer.NormalizerImpl.ComposePartArgs, int, char[], int, int, int, sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl char[] composePart(sun.text.normalizer.NormalizerImpl.ComposePartArgs, int, char[], int, int, int, sun.text.normalizer.UnicodeSet) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl char[] composePart(sun.text.normalizer.NormalizerImpl.ComposePartArgs, int, char[], int, int, int, sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int combine(char[], int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int combine(char[], int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int compose(char[], int, int, char[], int, int, int, sun.text.normalizer.UnicodeSet) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(char[], int, int, char[], int, int, boolean, int[], sun.text.normalizer.UnicodeSet) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(char[], int, int, char[], int, int, boolean, int[], sun.text.normalizer.UnicodeSet) 8">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(long, int, sun.text.normalizer.NormalizerImpl.DecomposeArgs) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(long, sun.text.normalizer.NormalizerImpl.DecomposeArgs) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getExtraDataIndex(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getFromIndexesArr(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getNextCC(sun.text.normalizer.NormalizerImpl.NextCCArgs) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getNextCombining(sun.text.normalizer.NormalizerImpl.NextCombiningArgs, int, sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getNextCombining(sun.text.normalizer.NormalizerImpl.NextCombiningArgs, int, sun.text.normalizer.UnicodeSet) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getPrevCC(sun.text.normalizer.NormalizerImpl.PrevArgs) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int insertOrdered(char[], int, int, int, char, char, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int strCompare(char[], int, int, char[], int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl java.lang.String canonicalDecomposeWithSingleQuotation(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl java.lang.String canonicalDecomposeWithSingleQuotation(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl java.lang.String convert(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl java.lang.String convert(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl long getNorm32(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl long getPrevNorm32(sun.text.normalizer.NormalizerImpl.PrevArgs, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, int, int, int, boolean, sun.text.normalizer.UnicodeSet) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl sun.text.normalizer.UnicodeSet addPropertyStarts(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl sun.text.normalizer.UnicodeSet addPropertyStarts(sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl sun.text.normalizer.UnicodeSet getNX(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl sun.text.normalizer.UnicodeSet internalGetNX(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl sun.text.normalizer.UnicodeSet internalGetNXUnicode(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.AuxTrieImpl AuxTrieImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.AuxTrieImpl int getFoldingOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.ComposePartArgs ComposePartArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.ComposePartArgs ComposePartArgs(sun.text.normalizer.NormalizerImpl.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.ComposePartArgs ComposePartArgs(sun.text.normalizer.NormalizerImpl.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.DecomposeArgs DecomposeArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.DecomposeArgs DecomposeArgs(sun.text.normalizer.NormalizerImpl.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.DecomposeArgs DecomposeArgs(sun.text.normalizer.NormalizerImpl.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.FCDTrieImpl FCDTrieImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.FCDTrieImpl int getFoldingOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NextCCArgs NextCCArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NextCCArgs NextCCArgs(sun.text.normalizer.NormalizerImpl.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NextCCArgs NextCCArgs(sun.text.normalizer.NormalizerImpl.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NextCombiningArgs NextCombiningArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NextCombiningArgs NextCombiningArgs(sun.text.normalizer.NormalizerImpl.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NextCombiningArgs NextCombiningArgs(sun.text.normalizer.NormalizerImpl.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NormTrieImpl NormTrieImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NormTrieImpl int getFoldingOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.PrevArgs PrevArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.PrevArgs PrevArgs(sun.text.normalizer.NormalizerImpl.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.PrevArgs PrevArgs(sun.text.normalizer.NormalizerImpl.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.RecomposeArgs RecomposeArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.RecomposeArgs RecomposeArgs(sun.text.normalizer.NormalizerImpl.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.RecomposeArgs RecomposeArgs(sun.text.normalizer.NormalizerImpl.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.RangeValueIterator.Element Element()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ReplaceableString ReplaceableString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableString int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator ReplaceableUCharacterIterator(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator ReplaceableUCharacterIterator(java.lang.StringBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator int getText(char[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator RuleCharacterIterator(java.lang.String, sun.text.normalizer.SymbolTable, java.text.ParsePosition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator RuleCharacterIterator(java.lang.String, sun.text.normalizer.SymbolTable, java.text.ParsePosition) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator boolean inVariable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator boolean isEscaped()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator java.lang.Object getPos(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator java.lang.Object getPos(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator java.lang.String lookahead()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator void setPos(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Trie Trie(char[], int, sun.text.normalizer.Trie.DataManipulate) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.Trie Trie(java.io.InputStream, sun.text.normalizer.Trie.DataManipulate) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.Trie boolean checkHeader(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie boolean isCharTrie()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie boolean isIntTrie()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie int getBMPOffset(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie int getLeadOffset(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie int getRawOffset(int, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie.DefaultGetFoldingOffset DefaultGetFoldingOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie.DefaultGetFoldingOffset DefaultGetFoldingOffset(sun.text.normalizer.Trie.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.Trie.DefaultGetFoldingOffset DefaultGetFoldingOffset(sun.text.normalizer.Trie.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie.DefaultGetFoldingOffset int getFoldingOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.TrieIterator TrieIterator(sun.text.normalizer.Trie) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.TrieIterator int extract(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.TrieIterator void calculateNextSupplementaryElement(sun.text.normalizer.RangeValueIterator.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.TrieIterator void setResult(sun.text.normalizer.RangeValueIterator.Element, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UBiDiProps int getClassFromProps(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UBiDiProps.IsAcceptable IsAcceptable(sun.text.normalizer.UBiDiProps, sun.text.normalizer.UBiDiProps.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.UBiDiProps.IsAcceptable boolean isDataVersionAcceptable(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UBiDiProps.IsAcceptable boolean isDataVersionAcceptable(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacter UCharacter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacter int getEuropeanDigit(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacter int getNumericType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator UCharacterIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator java.lang.String getText()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.lang.StringBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.lang.StringBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.text.CharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.text.CharacterIterator)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterProperty boolean isRuleWhiteSpace(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterProperty int getRawSupplementary(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterProperty int getUnsignedValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterProperty void setIndexData(sun.text.normalizer.CharTrie.FriendAgent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterPropertyReader boolean isDataVersionAcceptable(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterPropertyReader boolean isDataVersionAcceptable(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterPropertyReader void read(sun.text.normalizer.UCharacterProperty) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 UTF16()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 boolean isLeadSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 boolean isSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 boolean isTrailSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 char getLeadSurrogate(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 char getTrailSurrogate(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 int charAt(char[], int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 int charAt(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 int getCharCount(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 int moveCodePointOffset(char[], int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 java.lang.String toString(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 java.lang.String valueOf(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 java.lang.StringBuffer append(java.lang.StringBuffer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 java.lang.StringBuffer append(java.lang.StringBuffer, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet boolean resemblesPropertyPattern(sun.text.normalizer.RuleCharacterIterator, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int findCodePoint(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getRangeCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getRangeEnd(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getRangeStart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getSingleCP(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int max(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet java.lang.String mungeCharName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet java.lang.String mungeCharName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet java.lang.StringBuffer _generatePattern(java.lang.StringBuffer, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet java.lang.StringBuffer _generatePattern(java.lang.StringBuffer, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add(int[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet addAll(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet addAll(sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add_unchecked(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add_unchecked(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyFilter(sun.text.normalizer.UnicodeSet.Filter, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String, sun.text.normalizer.SymbolTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String, sun.text.normalizer.SymbolTable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String, sun.text.normalizer.SymbolTable) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String, sun.text.normalizer.SymbolTable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet clear()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet complement()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet complement(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet removeAll(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet removeAll(sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet retain(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet retain(int[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet retainAll(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet retainAll(sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet set(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet set(sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet xor(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet xor(int[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void _appendToPat(java.lang.StringBuffer, java.lang.String, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void applyPattern(sun.text.normalizer.RuleCharacterIterator, sun.text.normalizer.SymbolTable, java.lang.StringBuffer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator, java.lang.StringBuffer, sun.text.normalizer.SymbolTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator, java.lang.StringBuffer, sun.text.normalizer.SymbolTable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void syntaxError(sun.text.normalizer.RuleCharacterIterator, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void syntaxError(sun.text.normalizer.RuleCharacterIterator, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.text.normalizer.Utility Utility()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility boolean arrayRegionMatches(char[], int, char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility boolean isUnprintable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility int skipWhitespace(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility int unescapeAt(java.lang.String, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility int unescapeAt(java.lang.String, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.String escape(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.String escape(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.String hex(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.StringBuffer appendNumber(java.lang.StringBuffer, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.StringBuffer appendNumber(java.lang.StringBuffer, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;null,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.StringBuffer hex(int, int, java.lang.StringBuffer) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.StringBuffer hex(int, int, java.lang.StringBuffer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null;_,_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility void recursiveAppendNumber(java.lang.StringBuffer, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.VersionInfo int compareTo(sun.text.normalizer.VersionInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.VersionInfo int compareTo(sun.text.normalizer.VersionInfo)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.VersionInfo int getInt(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.VersionInfo sun.text.normalizer.VersionInfo getInstance(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
