<root>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.Class&lt;?&gt; parseSig(java.lang.String, int[], int, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.Class&lt;?&gt; parseSig(java.lang.String, int[], int, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.String unparse(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.String unparse(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.String unparse(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.String unparse(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.String unparse(java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.String unparseMethod(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.String unparseMethod(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.lang.String unparseMethod(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.util.List&lt;java.lang.Class&lt;?&gt;&gt; parseMethod(java.lang.String, int, int, java.lang.ClassLoader) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.util.List&lt;java.lang.Class&lt;?&gt;&gt; parseMethod(java.lang.String, int, int, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.util.List&lt;java.lang.Class&lt;?&gt;&gt; parseMethod(java.lang.String, java.lang.ClassLoader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor java.util.List&lt;java.lang.Class&lt;?&gt;&gt; parseMethod(java.lang.String, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor void parseError(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor void parseError(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor void unparseSig(java.lang.Class&lt;?&gt;, java.lang.StringBuilder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeDescriptor void unparseSig(java.lang.Class&lt;?&gt;, java.lang.StringBuilder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName boolean isJavaIdent(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName boolean isSafeBytecodeName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName boolean looksMangled(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName int indexOfDangerousChar(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName int lastIndexOfDangerousChar(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.Object[] parseBytecodeName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String appendAll(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String demangle(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String demangle(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String mangle(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String quoteDisplay(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String quoteDisplay(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String toBytecodeName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String toDisplayName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String toSourceName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String toSourceName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.BytecodeName java.lang.String unparseBytecodeName(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.BytecodeName void checkSafeBytecodeName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions T castReference(java.lang.Class&lt;? extends T&gt;, U)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions T identity(T)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions T[] identity(T[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions boolean assertCorrectArity(java.lang.invoke.MethodHandle, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions boolean identity(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions boolean unboxBoolean(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions byte unboxByte(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions char unboxCharacter(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions double unboxDouble(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions float unboxFloat(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions int unboxInteger(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions int widenSubword(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.ClassCastException newClassCastException(java.lang.Class&lt;?&gt;, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.ClassCastException newClassCastException(java.lang.Class&lt;?&gt;, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.ClassCastException newClassCastException(java.lang.Class&lt;?&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Double boxDouble(double)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Float boxFloat(float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.InternalError access$200(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.InternalError newInternalError(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.InternalError newInternalError(java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Number primitiveConversion(sun.invoke.util.Wrapper, java.lang.Object, boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object convertArrayElements(java.lang.Class&lt;?&gt;, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object convertArrayElements(java.lang.Class&lt;?&gt;, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object copyAsPrimitiveArray(sun.invoke.util.Wrapper, java.lang.Object...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object copyAsPrimitiveArray(sun.invoke.util.Wrapper, java.lang.Object...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] copyAsReferenceArray(java.lang.Class&lt;? extends java.lang.Object[]&gt;, java.lang.Object...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_-&gt;!null;_,null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_-&gt;!null;_,null,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_-&gt;!null;_,null,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_,_-&gt;!null;_,null,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_,_,_-&gt;!null;_,null,_,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_,_,_,_-&gt;!null;_,null,_,_,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_,_,_,_,_-&gt;!null;_,null,_,_,_,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_,_,_,_,_,_-&gt;!null;_,null,_,_,_,_,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_,_,_,_,_,_,_-&gt;!null;_,null,_,_,_,_,_,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillArray(java.lang.Integer, java.lang.Object[], java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_,_,_,_,_,_,_,_-&gt;!null;_,null,_,_,_,_,_,_,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillNewArray(java.lang.Integer, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillNewArray(java.lang.Integer, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillNewArray(java.lang.Integer, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillNewTypedArray(java.lang.Object[], java.lang.Integer, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillNewTypedArray(java.lang.Object[], java.lang.Integer, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] fillNewTypedArray(java.lang.Object[], java.lang.Integer, java.lang.Object[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.Object[] makeArray(java.lang.Object...)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.String capitalize(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.String capitalize(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle box(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle box(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle box(sun.invoke.util.Wrapper)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle box(sun.invoke.util.Wrapper, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle buildArrayProducer(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle buildVarargsArray(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle buildVarargsList(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle cast(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle convertPrimitive(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle convertPrimitive(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle convertPrimitive(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle convertPrimitive(sun.invoke.util.Wrapper, sun.invoke.util.Wrapper) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle convertPrimitive(sun.invoke.util.Wrapper, sun.invoke.util.Wrapper)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle findCollector(java.lang.String, int, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle identity(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle identity(sun.invoke.util.Wrapper)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle unbox(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle unbox(sun.invoke.util.Wrapper, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle unboxCast(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle unboxCast(sun.invoke.util.Wrapper)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle varargsArray(java.lang.Class&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle varargsList(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodHandle zeroConstantFunction(sun.invoke.util.Wrapper)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodType boxType(sun.invoke.util.Wrapper) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.lang.invoke.MethodType unboxType(sun.invoke.util.Wrapper) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; list(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; makeList(java.lang.Object...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions java.util.List&lt;java.lang.Object&gt; makeList(java.lang.Object...)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions long unboxLong(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions short unboxShort(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions void fillWithArguments(java.lang.Object[], int, java.lang.Object...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions void ignore(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions.3 java.lang.Object computeValue(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions.3 java.lang.Object computeValue(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.ValueConversions.3 java.lang.invoke.MethodHandle[] computeValue(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.ValueConversions.3 java.lang.invoke.MethodHandle[] computeValue(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean classLoaderIsAncestor(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean classLoaderIsAncestor(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean isClassAccessible(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean isPublicSuperClass(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean isRelatedClass(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean isSamePackage(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean isTypeVisible(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean isTypeVisible(java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean loadersAreRelated(java.lang.ClassLoader, java.lang.ClassLoader, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean loadersAreRelated(java.lang.ClassLoader, java.lang.ClassLoader, boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess boolean loadersAreRelated(java.lang.ClassLoader, java.lang.ClassLoader, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.VerifyAccess java.lang.Class&lt;?&gt; getOutermostEnclosingClass(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess java.lang.String getPackageName(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyAccess java.lang.String getPackageName(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyType boolean isNullConversion(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.VerifyType boolean isNullConversion(java.lang.invoke.MethodType, java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.VerifyType boolean isNullReferenceConversion(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyType boolean isNullType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.VerifyType boolean isNullType(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.VerifyType boolean isSpreadArgType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.VerifyType java.lang.Class&lt;?&gt; spreadArgElementType(java.lang.Class&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper Wrapper(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, char, java.lang.Object, java.lang.Object, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper Wrapper(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, char, java.lang.Object, java.lang.Object, int) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper boolean isPrimitiveType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper boolean isWrapperType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper char basicTypeChar(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper int hashPrim(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper int hashWrap(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.Class&lt;T&gt; asPrimitiveType(java.lang.Class&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.Class&lt;T&gt; asWrapperType(java.lang.Class&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.Class&lt;T&gt; forceType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.ClassCastException newClassCastException(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.ClassCastException newClassCastException(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.ClassCastException newClassCastException(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.Number numberValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.RuntimeException newIllegalArgumentException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper java.lang.String detailString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper sun.invoke.util.Wrapper findPrimitiveType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper sun.invoke.util.Wrapper findWrapperType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper sun.invoke.util.Wrapper forBasicType(char)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper sun.invoke.util.Wrapper forBasicType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper sun.invoke.util.Wrapper forPrimitiveType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper sun.invoke.util.Wrapper forPrimitiveType(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper sun.invoke.util.Wrapper forWrapperType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper sun.invoke.util.Wrapper forWrapperType(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper void copyArrayBoxing(java.lang.Object, int, java.lang.Object[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.invoke.util.Wrapper void copyArrayUnboxing(java.lang.Object[], int, java.lang.Object, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
