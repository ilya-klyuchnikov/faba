<root>
  <item name="sun.font.AttributeMap java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeMap sun.font.AttributeValues getValues()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean allDefined(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean anyDefined(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean anyNonDefault(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean equals(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues boolean equals(sun.font.AttributeValues) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues boolean equals(sun.font.AttributeValues)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean getStrikethrough()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean getSwapColors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean i_equals(sun.font.EAttribute, sun.font.AttributeValues) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues boolean i_equals(sun.font.EAttribute, sun.font.AttributeValues) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues boolean i_validate(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues boolean is16Hashtable(java.util.Hashtable&lt;java.lang.Object,java.lang.Object&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues boolean isDefined(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues boolean isDefined(sun.font.EAttribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean isNonDefault(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues boolean isNonDefault(sun.font.EAttribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getJustification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getJustification(java.util.Map&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues float getPosture()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getTracking()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getWeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getBidiEmbedding()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getInputMethodUnderline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getKerning()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getLigatures()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getMask(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues int getMask(sun.font.EAttribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getMask(sun.font.EAttribute...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues int getMask(sun.font.EAttribute...)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getRunDirection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getSuperscript()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getUnderline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.Paint getBackground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.Paint getForeground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.font.GraphicAttribute getCharReplacement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.font.NumericShaper getNumericShaping()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.font.NumericShaper getNumericShaping(java.util.Map&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform extractRotation(java.awt.geom.Point2D.Double, java.awt.geom.AffineTransform, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform extractRotation(java.awt.geom.Point2D.Double, java.awt.geom.AffineTransform, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform extractRotation(java.awt.geom.Point2D.Double, java.awt.geom.AffineTransform, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform extractXRotation(java.awt.geom.AffineTransform, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform extractXRotation(java.awt.geom.AffineTransform, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform extractYRotation(java.awt.geom.AffineTransform, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform extractYRotation(java.awt.geom.AffineTransform, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getBaselineTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getBaselineTransform(java.util.Map&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getBaselineTransform(java.util.Map&lt;?,?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getCharTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getCharTransform(java.util.Map&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getCharTransform(java.util.Map&lt;?,?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.lang.Object get(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues java.lang.Object get(sun.font.EAttribute)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.lang.Object getInputMethodHighlight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.lang.Object i_get(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues java.lang.Object i_get(sun.font.EAttribute)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.lang.String getFamily()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues java.util.Hashtable&lt;java.lang.Object,java.lang.Object&gt; toSerializableHashtable()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues java.util.Map&lt;java.awt.font.TextAttribute,java.lang.Object&gt; toMap(java.util.Map&lt;java.awt.font.TextAttribute,java.lang.Object&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues java.util.Map&lt;java.awt.font.TextAttribute,java.lang.Object&gt; toMap(java.util.Map&lt;java.awt.font.TextAttribute,java.lang.Object&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues applyIMHighlight()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues clone()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues fromMap(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues fromMap(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues fromMap(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues fromMap(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues fromSerializableHashtable(java.util.Hashtable&lt;java.lang.Object,java.lang.Object&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues fromSerializableHashtable(java.util.Hashtable&lt;java.lang.Object,java.lang.Object&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues merge(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues merge(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues merge(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues merge(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues merge(sun.font.AttributeValues) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues merge(sun.font.AttributeValues)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues merge(sun.font.AttributeValues, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues sun.font.AttributeValues merge(sun.font.AttributeValues, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues void i_set(sun.font.EAttribute, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues void i_set(sun.font.EAttribute, sun.font.AttributeValues) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues void i_set(sun.font.EAttribute, sun.font.AttributeValues) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues void set(sun.font.EAttribute, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues void set(sun.font.EAttribute, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues void set(sun.font.EAttribute, sun.font.AttributeValues) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues void set(sun.font.EAttribute, sun.font.AttributeValues) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues void setDefault(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues void setTransform(java.awt.font.TransformAttribute) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues void setTransform(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.AttributeValues void unset(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.AttributeValues void update(sun.font.EAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.BidiUtils BidiUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.BidiUtils byte[] getLevels(java.text.Bidi) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.BidiUtils byte[] getLevels(java.text.Bidi)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.BidiUtils int[] computeContiguousOrder(int[], int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.BidiUtils int[] createContiguousOrder(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.BidiUtils int[] createContiguousOrder(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.BidiUtils int[] createInverseMap(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.BidiUtils int[] createInverseMap(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.BidiUtils int[] createNormalizedMap(int[], byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.BidiUtils int[] createNormalizedMap(int[], byte[], int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.BidiUtils int[] createNormalizedMap(int[], byte[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.BidiUtils int[] createVisualToLogicalMap(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.BidiUtils int[] createVisualToLogicalMap(byte[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.BidiUtils void getLevels(java.text.Bidi, byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.BidiUtils void getLevels(java.text.Bidi, byte[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.BidiUtils void reorderVisually(byte[], java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CCharToGlyphMapper.Cache.SparseBitShiftingTwoLayerArray int get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CFont CFont(sun.font.CFont, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFont java.awt.geom.GeneralPath getGlyphVectorOutline(long, int[], int, float, float) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFont java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFont sun.font.CFont createItalicVariant()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFont void getGlyphMetrics(long, int, java.awt.geom.Point2D.Float) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontConfiguration int getNumberCoreFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getEncoding(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getEncoding(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getEncoding(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getFaceNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getFallbackFamilyName(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getFallbackFamilyName(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,!null-&gt;!null;_,null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getFileNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String mapFileName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String mapFileName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String[] getPlatformFontNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.nio.charset.Charset getDefaultFontCharset(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontConfiguration java.nio.charset.Charset getDefaultFontCharset(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontConfiguration sun.font.CompositeFontDescriptor[] get2DCompositeFontInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontManager boolean cloneStyledFont(sun.font.FontFamily, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager boolean cloneStyledFont(sun.font.FontFamily, java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.CFontManager java.lang.String getFontPath(boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager javax.swing.plaf.FontUIResource getFontConfigFUIR(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager sun.awt.FontConfiguration createFontConfiguration()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager sun.awt.FontConfiguration createFontConfiguration(boolean, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager sun.font.Font2D createFont2D(java.io.File, int, boolean, sun.font.CreatedFontTracker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager sun.font.Font2D createFont2D(java.io.File, int, boolean, sun.font.CreatedFontTracker)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager sun.font.Font2D registerGenericFont(sun.font.Font2D)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager sun.font.Font2D registerGenericFont(sun.font.Font2D, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager sun.font.Font2D registerGenericFont(sun.font.Font2D, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager sun.font.Font2D[] getRegisteredFonts()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager sun.font.FontFamily getFontFamily(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager sun.font.FontFamily getFontFamily(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager sun.font.FontFamily getFontFamilyWithExtraTry(java.lang.String, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager sun.font.FontFamily getFontFamilyWithExtraTry(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager void access$000(sun.font.CFontManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontManager void registerFontsInDir(java.lang.String, boolean, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CFontManager.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager.2.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager.3 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CFontManager.4 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CMap CMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap char[] getConverter(short)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CMap int getControlCodeGlyph(int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap sun.font.CMap createCMap(java.nio.ByteBuffer, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap sun.font.CMap createCMap(java.nio.ByteBuffer, int, char[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap sun.font.CMap initialize(sun.font.TrueTypeFont) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap sun.font.CMap initialize(sun.font.TrueTypeFont)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CMap.CMapFormat0 CMapFormat0(java.nio.ByteBuffer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap.CMapFormat0 char getGlyph(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap.CMapFormat10 CMapFormat10(java.nio.ByteBuffer, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap.CMapFormat10 CMapFormat10(java.nio.ByteBuffer, int, char[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CMap.CMapFormat12 CMapFormat12(java.nio.ByteBuffer, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap.CMapFormat12 CMapFormat12(java.nio.ByteBuffer, int, char[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CMap.CMapFormat2 CMapFormat2(java.nio.ByteBuffer, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap.CMapFormat4 CMapFormat4(java.nio.ByteBuffer, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap.CMapFormat6 CMapFormat6(java.nio.ByteBuffer, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap.CMapFormat6 CMapFormat6(java.nio.ByteBuffer, int, char[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CMap.CMapFormat8 CMapFormat8(java.nio.ByteBuffer, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CMap.CMapFormat8 CMapFormat8(java.nio.ByteBuffer, int, char[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CMap.NullCMapClass NullCMapClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap.NullCMapClass char getGlyph(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CStrike CStrike(sun.font.CFont, sun.font.FontStrikeDesc) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike boolean useFractionalMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CStrike java.awt.geom.GeneralPath getGlyphVectorOutline(int[], float, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CStrike java.awt.geom.Point2D.Float getCharMetrics(char)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike java.awt.geom.Point2D.Float getGlyphMetrics(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike java.awt.geom.Point2D.Float getScaledPointForAdvance(float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike java.awt.geom.Point2D.Float scalePoint(java.awt.geom.Point2D.Float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike java.awt.geom.Point2D.Float scalePoint(java.awt.geom.Point2D.Float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike void getGlyphImageBounds(int, java.awt.geom.Point2D.Float, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike void getGlyphImageBounds(int, java.awt.geom.Point2D.Float, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike.GlyphAdvanceCache GlyphAdvanceCache(sun.font.CStrike.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CStrike.GlyphAdvanceCache.SparseBitShiftingTwoLayerArray float get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CStrike.GlyphInfoCache void disposeLongArray(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CStrike.GlyphInfoCache.SparseBitShiftingTwoLayerArray long get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CharToGlyphMapper int getMissingGlyphCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFont CompositeFont(java.lang.String, java.lang.String[], java.lang.String[], int, int[], int[], boolean, sun.font.SunFontManager) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeFont CompositeFont(sun.font.PhysicalFont, sun.font.CompositeFont) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeFont CompositeFont(sun.font.PhysicalFont, sun.font.CompositeFont) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeFont boolean isExcludedChar(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFont boolean isStdComposite()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFont int getNumSlots()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFont java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeFont void replaceComponentFont(sun.font.PhysicalFont, sun.font.PhysicalFont) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CompositeFontDescriptor int getCoreComponentCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor int[] getExclusionRangeLimits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor int[] getExclusionRanges()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor java.lang.String getFaceName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor java.lang.String[] getComponentFaceNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor java.lang.String[] getComponentFileNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeGlyphMapper CompositeGlyphMapper(sun.font.CompositeFont) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeGlyphMapper int compositeGlyphCode(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeGlyphMapper int getCachedGlyphCode(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeStrike CompositeStrike(sun.font.CompositeFont, sun.font.FontStrikeDesc) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeStrike java.awt.geom.GeneralPath getGlyphOutline(int, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeStrike java.awt.geom.GeneralPath getGlyphVectorOutline(int[], float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CompositeStrike java.awt.geom.GeneralPath getGlyphVectorOutline(int[], float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CoreMetrics boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CoreMetrics boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CoreMetrics boolean equals(sun.font.CoreMetrics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.CoreMetrics boolean equals(sun.font.CoreMetrics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CoreMetrics float effectiveBaselineOffset(float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CoreMetrics float effectiveBaselineOffset(float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CoreMetrics sun.font.CoreMetrics get(java.awt.font.LineMetrics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CoreMetrics sun.font.CoreMetrics get(java.awt.font.LineMetrics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CreatedFontTracker int getNumBytes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CreatedFontTracker java.util.concurrent.Semaphore getCS()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.CreatedFontTracker.TempFileDeletionHook TempFileDeletionHook()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CreatedFontTracker.TempFileDeletionHook java.lang.Thread access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CreatedFontTracker.TempFileDeletionHook java.lang.Thread access$002(java.lang.Thread)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.CreatedFontTracker.TempFileDeletionHook.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.CreatedFontTracker.TempFileDeletionHook.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Decoration Decoration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Decoration Decoration(sun.font.Decoration.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Decoration Decoration(sun.font.Decoration.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Decoration java.awt.Shape getOutline(sun.font.Decoration.Label, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Decoration java.awt.geom.Rectangle2D getCharVisualBounds(sun.font.Decoration.Label, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Decoration java.awt.geom.Rectangle2D getVisualBounds(sun.font.Decoration.Label) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Decoration sun.font.Decoration getDecoration(java.util.Map) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Decoration sun.font.Decoration getDecoration(sun.font.AttributeValues) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Decoration sun.font.Decoration getPlainDecoration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Decoration void drawTextAndDecorations(sun.font.Decoration.Label, java.awt.Graphics2D, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Decoration.DecorationImpl boolean areEqual(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Decoration.DecorationImpl boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Decoration.DecorationImpl java.awt.Shape getOutline(sun.font.Decoration.Label, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Decoration.DecorationImpl java.awt.geom.Rectangle2D getVisualBounds(sun.font.Decoration.Label) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Decoration.DecorationImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Decoration.DecorationImpl void drawTextAndDecorations(sun.font.Decoration.Label, java.awt.Graphics2D, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Decoration.DecorationImpl void drawTextAndEmbellishments(sun.font.Decoration.Label, java.awt.Graphics2D, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.DelegateStrike DelegateStrike(sun.font.NativeFont, sun.font.FontStrikeDesc, sun.font.FontStrike) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.DelegateStrike DelegateStrike(sun.font.NativeFont, sun.font.FontStrikeDesc, sun.font.FontStrike) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.EAttribute java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.EAttribute sun.font.EAttribute forAttribute(java.text.AttributedCharacterIterator.Attribute) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.EAttribute sun.font.EAttribute forAttribute(java.text.AttributedCharacterIterator.Attribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.ExtendedTextLabel ExtendedTextLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel ExtendedTextSourceLabel(sun.font.TextSource, sun.font.ExtendedTextSourceLabel, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel boolean isSimple()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel float[] createCharinfo()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.AffineTransform getBaselineTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.Rectangle2D createAlignBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.Rectangle2D createItalicBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.Rectangle2D getAlignBounds(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.Rectangle2D getItalicBounds(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.Rectangle2D getLogicalBounds(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.Rectangle2D getVisualBounds(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.Rectangle2D handleGetCharVisualBounds(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel sun.font.CoreMetrics getCoreMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel sun.font.TextLineComponent applyJustificationDeltas(float[], int, boolean[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel sun.font.TextLineComponent applyJustificationDeltas(float[], int, boolean[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel sun.font.TextLineComponent getSubset(int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel void handleDraw(java.awt.Graphics2D, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FcFontConfiguration boolean needToSearchForFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration boolean needToSearchForFile(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration int getNumberCoreFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration java.io.File getFcInfoFile()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getEncoding(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getEncoding(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getEncoding(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getExtraFontPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFaceNameFromComponentFontName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFaceNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFallbackFamilyName(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFileNameFromComponentFontName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFileNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFileNameFromPlatformName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFileNameFromPlatformName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getVersionString(java.io.File)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.nio.charset.Charset getDefaultFontCharset(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration java.nio.charset.Charset getDefaultFontCharset(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FcFontConfiguration sun.awt.FontDescriptor[] getFontDescriptors(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FcFontConfiguration sun.awt.FontDescriptor[] getFontDescriptors(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FcFontConfiguration sun.font.CompositeFontDescriptor[] get2DCompositeFontInfo()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FcFontConfiguration sun.font.FontConfigManager.FontConfigFont[] getFcFontList(sun.font.FontConfigManager.FcCompFont[], java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FcFontConfiguration sun.font.FontConfigManager.FontConfigFont[] getFcFontList(sun.font.FontConfigManager.FcCompFont[], java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FcFontConfiguration sun.font.FontConfigManager.FontConfigFont[] getFcFontList(sun.font.FontConfigManager.FcCompFont[], java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FileFont boolean canDoStyle(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FileFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FileFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FileFont.CreatedFontFileDisposerRecord CreatedFontFileDisposerRecord(java.io.File, sun.font.CreatedFontTracker, sun.font.FileFont.1) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FileFont.CreatedFontFileDisposerRecord.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FileFontStrike FileFontStrike(sun.font.FileFont, sun.font.FontStrikeDesc) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FileFontStrike FileFontStrike(sun.font.FileFont, sun.font.FontStrikeDesc) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FileFontStrike java.awt.geom.GeneralPath getGlyphVectorOutline(int[], float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FileFontStrike java.awt.geom.Point2D.Float getGlyphMetrics(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FileFontStrike java.awt.geom.Point2D.Float getGlyphMetrics(int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FileFontStrike long getCachedGlyphPtr(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FileFontStrike void getGlyphImageBounds(int, java.awt.geom.Point2D.Float, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FileFontStrike void getGlyphImageBounds(int, java.awt.geom.Point2D.Float, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D boolean canDoStyle(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D boolean hasSupplementaryChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D boolean supportsEncoding(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Font2D boolean supportsEncoding(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D boolean useAAForPtSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D byte getBaselineFor(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D byte[] getTableBytes(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Font2D float getItalicAngle(java.awt.Font, java.awt.geom.AffineTransform, java.lang.Object, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Font2D float getItalicAngle(java.awt.Font, java.awt.geom.AffineTransform, java.lang.Object, java.lang.Object) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Font2D int getRank()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D int getStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D java.lang.String getFamilyName(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Font2D java.lang.String getFamilyName(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D java.lang.String getFontName(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Font2D java.lang.String getFontName(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D java.lang.String getPostscriptName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D long getUnitsPerEm()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D sun.font.FontStrike getStrike(java.awt.Font, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D sun.font.FontStrike getStrike(java.awt.Font, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D sun.font.FontStrike getStrike(java.awt.Font, java.awt.geom.AffineTransform, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D sun.font.FontStrike getStrike(java.awt.Font, java.awt.geom.AffineTransform, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D sun.font.FontStrike getStrike(java.awt.Font, java.awt.geom.AffineTransform, java.awt.geom.AffineTransform, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D void getFontMetrics(java.awt.Font, java.awt.font.FontRenderContext, float[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D void getFontMetrics(java.awt.Font, java.awt.geom.AffineTransform, java.lang.Object, java.lang.Object, float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D void getFontMetrics(java.awt.Font, java.awt.geom.AffineTransform, java.lang.Object, java.lang.Object, float[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Font2D void getFontMetrics(java.awt.Font, java.awt.geom.AffineTransform, java.lang.Object, java.lang.Object, float[]) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Font2D void getFontMetrics(java.awt.Font, java.awt.geom.AffineTransform, java.lang.Object, java.lang.Object, float[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Font2D void getStyleMetrics(float, float[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontAccess FontAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontAccess sun.font.FontAccess getFontAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontAccess void setFontAccess(sun.font.FontAccess) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontConfigManager FontConfigManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager java.lang.Object getFontConfigAAHint()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontConfigManager java.lang.Object getFontConfigAAHint(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontConfigManager java.lang.String[] getFontConfigNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager sun.font.CompositeFont getFontConfigFont(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontConfigManager sun.font.CompositeFont getFontConfigFont(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontConfigManager sun.font.FontConfigManager.FcCompFont[] getFontConfigFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager sun.font.PhysicalFont registerFromFcInfo(sun.font.FontConfigManager.FcCompFont) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontConfigManager sun.font.PhysicalFont registerFromFcInfo(sun.font.FontConfigManager.FcCompFont)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontConfigManager.FcCompFont FcCompFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager.FontConfigFont FontConfigFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics FontDesignMetrics(java.awt.Font, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics int getAscent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics int getDescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics int getLeading()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics int getMaxAdvance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics int stringWidth(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics int[] getWidths()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics java.awt.font.FontRenderContext getFontRenderContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics java.util.concurrent.ConcurrentHashMap access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics sun.font.FontDesignMetrics getMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics sun.font.FontDesignMetrics getMetrics(java.awt.Font, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics sun.font.FontDesignMetrics getMetrics(java.awt.Font, java.awt.font.FontRenderContext)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics.MetricsKey MetricsKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics.MetricsKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontDesignMetrics.MetricsKey boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics.MetricsKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics.MetricsKey void init(java.awt.Font, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontDesignMetrics.MetricsKey void init(java.awt.Font, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontFamily FontFamily(java.lang.String, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontFamily int getRank()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontFamily java.lang.String getFamilyName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontFamily java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontFamily java.lang.String[] getAllFamilyNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontFamily sun.font.Font2D getClosestStyle(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontFamily sun.font.Font2D getFont(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontFamily sun.font.Font2D getFontWithExactStyleMatch(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontFamily sun.font.FontFamily getFamily(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontFamily sun.font.FontFamily getLocaleFamily(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontFamily void addLocaleNames(sun.font.FontFamily, java.lang.String[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontFamily void remove(sun.font.Font2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontFamily void setFont(sun.font.Font2D, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontLineMetrics boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getAscent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getDescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getLeading()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getStrikethroughOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getStrikethroughThickness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getUnderlineOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getUnderlineThickness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics int getBaselineIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics int getNumChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerFactory FontManagerFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerFactory java.lang.String access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerFactory sun.font.FontManager access$102(sun.font.FontManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerFactory.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerFactory.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontManagerNativeLibrary FontManagerNativeLibrary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerNativeLibrary void load()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerNativeLibrary.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerNativeLibrary.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontResolver int nextFontRunIndex(sun.text.CodePointIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontRunIterator int getGlyphMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontRunIterator int getPos()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontRunIterator sun.font.PhysicalFont getFont()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontRunIterator void init(sun.font.CompositeFont, char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontRunIterator void init(sun.font.CompositeFont, char[], int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontScaler void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontStrikeDesc FontStrikeDesc()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontStrikeDesc FontStrikeDesc(sun.font.FontStrikeDesc) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontStrikeDesc int getAAHintIntVal(java.lang.Object, sun.font.Font2D, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontStrikeDesc int getAAHintIntVal(sun.font.Font2D, java.awt.Font, java.awt.font.FontRenderContext) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontStrikeDesc int getFMHintIntVal(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontStrikeDesc int getFMHintIntVal(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontStrikeDesc java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontUtilities FontUtilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean debugFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean isComplexCharCode(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean isComplexText(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean isLogging()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean isNonSimpleChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities java.lang.String mapFcName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FontUtilities javax.swing.plaf.FontUIResource getCompositeFontUIResource(java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontUtilities javax.swing.plaf.FontUIResource getCompositeFontUIResource(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.FontUtilities sun.util.logging.PlatformLogger access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities sun.util.logging.PlatformLogger access$102(sun.util.logging.PlatformLogger)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities sun.util.logging.PlatformLogger getLogger()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.FreetypeFontScaler void invalidateScalerContext(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout float[] access$300(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout float[] access$300(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout int access$400(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout int access$400(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout int access$500(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout int access$500(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout java.awt.geom.Point2D.Float access$600(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout java.awt.geom.Point2D.Float access$600(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout sun.font.FontStrikeDesc access$200(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.FontStrikeDesc access$200(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout sun.font.GlyphLayout get(sun.font.GlyphLayout.LayoutEngineFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.GlyphLayout.GVData access$700(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.GlyphLayout.GVData access$700(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout sun.font.GlyphLayout.LayoutEngineFactory access$100(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.GlyphLayout.LayoutEngineFactory access$100(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout sun.font.StandardGlyphVector layout(java.awt.Font, java.awt.font.FontRenderContext, char[], int, int, int, sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.StandardGlyphVector layout(java.awt.Font, java.awt.font.FontRenderContext, char[], int, int, int, sun.font.StandardGlyphVector) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.StandardGlyphVector layout(java.awt.Font, java.awt.font.FontRenderContext, char[], int, int, int, sun.font.StandardGlyphVector) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.StandardGlyphVector layout(java.awt.Font, java.awt.font.FontRenderContext, char[], int, int, int, sun.font.StandardGlyphVector) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.StandardGlyphVector layout(java.awt.Font, java.awt.font.FontRenderContext, char[], int, int, int, sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.TextRecord access$000(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout sun.font.TextRecord access$000(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout void done(sun.font.GlyphLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.GVData GVData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.GVData sun.font.StandardGlyphVector createGlyphVector(java.awt.Font, java.awt.font.FontRenderContext, sun.font.StandardGlyphVector) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.GlyphLayout.GVData sun.font.StandardGlyphVector createGlyphVector(java.awt.Font, java.awt.font.FontRenderContext, sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.GVData void adjustPositions(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey LayoutEngineKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey int lang()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey int script()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey sun.font.Font2D font()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey sun.font.GlyphLayout.LayoutEngineKey copy()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache SDCache(java.awt.Font, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache SDCache(java.awt.Font, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache sun.font.GlyphLayout.SDCache get(java.awt.Font, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache sun.font.GlyphLayout.SDCache get(java.awt.Font, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache sun.font.GlyphLayout.SDCache get(java.awt.Font, java.awt.font.FontRenderContext)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache.SDKey SDKey(java.awt.Font, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache.SDKey SDKey(java.awt.Font, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache.SDKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList boolean isRGBOrder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList boolean isSubPixPos()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList boolean mapChars(sun.java2d.loops.FontInfo, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphList boolean setFromChars(sun.java2d.loops.FontInfo, char[], int, int, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphList boolean setFromString(sun.java2d.loops.FontInfo, java.lang.String, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphList boolean setFromString(sun.java2d.loops.FontInfo, java.lang.String, float, float) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphList boolean usePositions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList float getX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList float getY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList float[] getPositions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList int[] getMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList java.lang.Object getStrike()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList long[] getImages()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList void fillBounds(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphList void setFromGlyphVector(sun.java2d.loops.FontInfo, java.awt.font.GlyphVector, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GlyphList void setFromGlyphVector(sun.java2d.loops.FontInfo, java.awt.font.GlyphVector, float, float) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent GraphicComponent(java.awt.font.GraphicAttribute, sun.font.Decoration, int[], byte[], int, int, java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent GraphicComponent(sun.font.GraphicComponent, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent boolean caretAtOffsetIsValid(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent boolean isSimple()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getAdvance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getAdvanceBetween(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getCharAdvance(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getCharX(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getCharY(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getItalicAngle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent int getLineBreakIndex(int, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent int getNumCharacters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent int getNumJustificationInfos()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext, float, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.GraphicComponent java.awt.geom.AffineTransform getBaselineTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent java.awt.geom.Rectangle2D getItalicBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent java.awt.geom.Rectangle2D getLogicalBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent java.awt.geom.Rectangle2D getVisualBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent java.awt.geom.Rectangle2D handleGetCharVisualBounds(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent java.awt.geom.Rectangle2D handleGetVisualBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent sun.font.CoreMetrics createCoreMetrics(java.awt.font.GraphicAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent sun.font.CoreMetrics createCoreMetrics(java.awt.font.GraphicAttribute)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent sun.font.CoreMetrics getCoreMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent sun.font.TextLineComponent applyJustificationDeltas(float[], int, boolean[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.GraphicComponent sun.font.TextLineComponent applyJustificationDeltas(float[], int, boolean[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.GraphicComponent sun.font.TextLineComponent applyJustificationDeltas(float[], int, boolean[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent sun.font.TextLineComponent getSubset(int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.GraphicComponent void getJustificationInfos(java.awt.font.GlyphJustificationInfo[], int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.GraphicComponent void getJustificationInfos(java.awt.font.GlyphJustificationInfo[], int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl LayoutPathImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl java.awt.geom.Point2D pathToPoint(double, double, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl java.awt.geom.Point2D pointToPath(double, double)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl sun.font.LayoutPathImpl getPath(sun.font.LayoutPathImpl.EndType, double...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl sun.font.LayoutPathImpl getPath(sun.font.LayoutPathImpl.EndType, double...)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.LayoutPathImpl void pathToPoint(double, double, boolean, java.awt.geom.Point2D) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl void pointToPath(double, double, java.awt.geom.Point2D) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.EmptyPath boolean pointToPath(java.awt.geom.Point2D, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.EmptyPath double end()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EmptyPath double length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EmptyPath double start()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EndType boolean isClosed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EndType boolean isExtended()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EndType boolean isPinned()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath boolean pointToPath(java.awt.geom.Point2D, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath boolean pointToPath(java.awt.geom.Point2D, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double end()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double getClosedAdvance(double, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double start()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double[] access$000(sun.font.LayoutPathImpl.SegmentPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double[] access$000(sun.font.LayoutPathImpl.SegmentPath)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath int getSegmentIndexForAdvance(double, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath int locateAndGetIndex(java.awt.geom.Point2D, boolean, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath int locateAndGetIndex(java.awt.geom.Point2D, boolean, java.awt.geom.Point2D) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath sun.font.LayoutPathImpl.SegmentPath get(sun.font.LayoutPathImpl.EndType, double...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath sun.font.LayoutPathImpl.SegmentPath get(sun.font.LayoutPathImpl.EndType, double...)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath void calcoffset(int, boolean, java.awt.geom.Point2D) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath void map(int, double, double, java.awt.geom.Point2D) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath void pathToPoint(java.awt.geom.Point2D, boolean, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath void pathToPoint(java.awt.geom.Point2D, boolean, java.awt.geom.Point2D) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.LineInfo boolean pin(double, double, sun.font.LayoutPathImpl.SegmentPath.LineInfo) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.LineInfo void set(sun.font.LayoutPathImpl.SegmentPath.LineInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.Mapper Mapper(sun.font.LayoutPathImpl.SegmentPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.Mapper java.awt.Shape mapShape(java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.Mapper java.awt.Shape mapShape(java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.Segment Segment(sun.font.LayoutPathImpl.SegmentPath, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.Segment void line(sun.font.LayoutPathImpl.SegmentPath.LineInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder SegmentPathBuilder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder sun.font.LayoutPathImpl.SegmentPath build(sun.font.LayoutPathImpl.EndType, double...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder sun.font.LayoutPathImpl.SegmentPath build(sun.font.LayoutPathImpl.EndType, double...)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder sun.font.LayoutPathImpl.SegmentPath complete()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder sun.font.LayoutPathImpl.SegmentPath complete(sun.font.LayoutPathImpl.EndType)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeFont boolean fontExists(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeFont boolean hasExternalBitmaps(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeFont byte[] getPlatformNameBytes(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.GeneralPath getGlyphOutline(long, int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.GeneralPath getGlyphVectorOutline(long, int[], int, float, float) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.GeneralPath getGlyphVectorOutline(long, int[], int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,!null,_,_,_-&gt;null;_,null,_,_,_-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.Rectangle2D.Float getGlyphOutlineBounds(long, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeFont java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeFont void getGlyphMetrics(long, int, java.awt.geom.Point2D.Float) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeGlyphMapper NativeGlyphMapper(sun.font.NativeFont) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeGlyphMapper boolean charsToGlyphsNS(int, char[], int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_-&gt;false;_,_,!null-&gt;false;_,_,null-&gt;false;_,null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.NativeGlyphMapper int charToGlyph(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeGlyphMapper int charToGlyph(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeGlyphMapper int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeStrike NativeStrike(sun.font.NativeFont, sun.font.FontStrikeDesc) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeStrike NativeStrike(sun.font.NativeFont, sun.font.FontStrikeDesc) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeStrike NativeStrike(sun.font.NativeFont, sun.font.FontStrikeDesc, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeStrike NativeStrike(sun.font.NativeFont, sun.font.FontStrikeDesc, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeStrike java.awt.geom.GeneralPath getGlyphOutline(int, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeStrike java.awt.geom.GeneralPath getGlyphVectorOutline(int[], float, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeStrike java.awt.geom.GeneralPath getGlyphVectorOutline(int[], float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeStrike java.awt.geom.Point2D.Float getGlyphMetrics(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NativeStrike void getGlyphImageBounds(int, java.awt.geom.Point2D.Float, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeStrike void getGlyphImageBounds(int, java.awt.geom.Point2D.Float, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NativeStrike void getGlyphImageBounds(int, java.awt.geom.Point2D.Float, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler NullFontScaler(sun.font.Font2D, int, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NullFontScaler float getGlyphAdvance(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler int getGlyphCode(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler int getMissingGlyphCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler java.awt.geom.GeneralPath getGlyphOutline(long, int, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NullFontScaler java.awt.geom.GeneralPath getGlyphVectorOutline(long, int[], int, float, float) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NullFontScaler java.awt.geom.GeneralPath getGlyphVectorOutline(long, int[], int, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NullFontScaler java.awt.geom.Point2D.Float getGlyphPoint(long, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NullFontScaler java.awt.geom.Rectangle2D.Float getGlyphOutlineBounds(long, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NullFontScaler long createScalerContext(double[], int, int, float, float, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.NullFontScaler long getLayoutTableCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler long getUnitsPerEm()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler sun.font.StrikeMetrics getFontMetrics(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NullFontScaler void getGlyphMetrics(long, int, java.awt.geom.Point2D.Float) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.NullFontScaler void invalidateScalerContext(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.PhysicalFont boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.PhysicalFont boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.PhysicalFont java.awt.geom.Point2D.Float getGlyphPoint(long, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.PhysicalStrike int getSlot0GlyphImagePtrs(int[], long[], int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.PhysicalStrike int getSlot0GlyphImagePtrs(int[], long[], int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.PhysicalStrike int getSlot0GlyphImagePtrs(int[], long[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.PhysicalStrike void adjustPoint(java.awt.geom.Point2D.Float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.PhysicalStrike void adjustPoint(java.awt.geom.Point2D.Float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Script Script()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun ScriptRun()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun ScriptRun(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ScriptRun boolean sameScript(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun byte highBit(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int getPairIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int getScriptCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int getScriptLimit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int getScriptStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun void init(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.ScriptRunData ScriptRunData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, char[], int, int, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, char[], int, int, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, char[], java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, char[], java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, java.awt.font.FontRenderContext, int[], float[], int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, java.lang.String, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, java.lang.String, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, java.text.CharacterIterator, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.Font, java.text.CharacterIterator, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector StandardGlyphVector(java.awt.font.GlyphVector, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector boolean equalNonTranslateTX(java.awt.geom.AffineTransform, java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector boolean equalNonTranslateTX(java.awt.geom.AffineTransform, java.awt.geom.AffineTransform) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector boolean equals(java.awt.font.GlyphVector) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector boolean matchTX(double[], java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector boolean matchTX(double[], java.awt.geom.AffineTransform) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector float getTracking(java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector float[] access$400(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector float[] access$400(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector float[] getGlyphInfo()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector float[] getGlyphPositions(float[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector float[] getGlyphPositions(float[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector float[] getGlyphPositions(int, int, float[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector float[] getGlyphPositions(int, int, float[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector float[] internalGetGlyphPositions(int, int, int, float[]) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector float[] internalGetGlyphPositions(int, int, int, float[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector int getGlyphCode(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector int[] access$000(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector int[] access$000(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector int[] getGlyphCharIndices(int, int, int[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector int[] getGlyphCharIndices(int, int, int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector int[] getGlyphCodes(int, int, int[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector int[] getGlyphCodes(int, int, int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector int[] getValidatedGlyphs(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector int[] getValidatedGlyphs(int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Font access$1000(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Font access$1000(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Rectangle getGlyphPixelBounds(int, java.awt.font.FontRenderContext, float, float) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Rectangle getGlyphPixelBounds(int, java.awt.font.FontRenderContext, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Rectangle getGlyphsPixelBounds(java.awt.font.FontRenderContext, float, float, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Rectangle getGlyphsPixelBounds(java.awt.font.FontRenderContext, float, float, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext, float, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Shape getGlyphOutline(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Shape getGlyphOutline(int, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Shape getGlyphsOutline(int, int, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Shape getOutline()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Shape getOutline(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.font.FontRenderContext access$800(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.font.FontRenderContext access$800(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.font.FontRenderContext getFontRenderContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.font.GlyphJustificationInfo getGlyphJustificationInfo(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.font.GlyphMetrics getGlyphMetrics(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform access$1100(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform access$1100(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform access$600(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform access$600(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform access$700(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform access$700(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform getGlyphTransform(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform getNonTranslateTX(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform getNonTranslateTX(java.awt.geom.AffineTransform)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform[] getGlyphTransforms()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform[] getGlyphTransforms(int, int, java.awt.geom.AffineTransform[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.AffineTransform[] getGlyphTransforms(int, int, java.awt.geom.AffineTransform[])">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.Point2D getGlyphPosition(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.Rectangle2D getGlyphOutlineBounds(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.Rectangle2D getLogicalBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.geom.Rectangle2D getVisualBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.lang.Object setupGlyphImages(long[], float[], double[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.lang.Object setupGlyphImages(long[], float[], double[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_-&gt;!null;null,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.lang.StringBuffer appendString(java.lang.StringBuffer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector java.lang.StringBuffer appendString(java.lang.StringBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector sun.font.Font2D access$900(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector sun.font.Font2D access$900(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector sun.font.StandardGlyphVector getStandardGV(java.awt.font.GlyphVector, sun.java2d.loops.FontInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector sun.font.StandardGlyphVector getStandardGV(java.awt.font.GlyphVector, sun.java2d.loops.FontInfo) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector sun.font.StandardGlyphVector getStandardGV(java.awt.font.GlyphVector, sun.java2d.loops.FontInfo)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector sun.font.StandardGlyphVector.GlyphStrike access$500(sun.font.StandardGlyphVector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector sun.font.StandardGlyphVector.GlyphStrike access$500(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector sun.font.StandardGlyphVector.GlyphStrike getDefaultStrike()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void access$100(sun.font.StandardGlyphVector, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void access$200(sun.font.StandardGlyphVector, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void access$300(sun.font.StandardGlyphVector, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void init(java.awt.Font, char[], int, int, java.awt.font.FontRenderContext, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void init(java.awt.Font, char[], int, int, java.awt.font.FontRenderContext, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void pixellate(java.awt.font.FontRenderContext, java.awt.geom.Point2D, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void pixellate(java.awt.font.FontRenderContext, java.awt.geom.Point2D, java.awt.Point) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void setDTX(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void setGlyphPosition(int, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void setGlyphPositions(float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector void setGlyphTransform(int, java.awt.geom.AffineTransform) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector void setRenderTransform(double[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.ADL ADL()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector.ADL java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.ADL java.lang.StringBuffer toStringBuffer(java.lang.StringBuffer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector.ADL java.lang.StringBuffer toStringBuffer(java.lang.StringBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike java.awt.geom.Rectangle2D getGlyphOutlineBounds(int, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike sun.font.StandardGlyphVector.GlyphStrike create(sun.font.StandardGlyphVector, java.awt.geom.AffineTransform, java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike sun.font.StandardGlyphVector.GlyphStrike create(sun.font.StandardGlyphVector, java.awt.geom.AffineTransform, java.awt.geom.AffineTransform) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike sun.font.StandardGlyphVector.GlyphStrike create(sun.font.StandardGlyphVector, java.awt.geom.AffineTransform, java.awt.geom.AffineTransform) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike sun.font.StandardGlyphVector.GlyphStrike create(sun.font.StandardGlyphVector, java.awt.geom.AffineTransform, java.awt.geom.AffineTransform)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike void addDefaultGlyphAdvance(int, java.awt.geom.Point2D.Float) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike void appendGlyphOutline(int, java.awt.geom.GeneralPath, float, float) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike void getADL(sun.font.StandardGlyphVector.ADL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike void getGlyphPosition(int, int, float[], float[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike void getGlyphPosition(int, int, float[], float[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo GlyphTransformInfo(sun.font.StandardGlyphVector, sun.font.StandardGlyphVector.GlyphTransformInfo) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo boolean equals(sun.font.StandardGlyphVector.GlyphTransformInfo) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo boolean equals(sun.font.StandardGlyphVector.GlyphTransformInfo)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo int transformCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo java.awt.Rectangle getGlyphsPixelBounds(java.awt.geom.AffineTransform, float, float, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo java.awt.geom.AffineTransform getGlyphTransform(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo java.lang.Object setupGlyphImages(long[], float[], java.awt.geom.AffineTransform) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo sun.font.StandardGlyphVector.GlyphStrike getStrikeAtIndex(sun.font.StandardGlyphVector.GlyphStrike[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo sun.font.StandardGlyphVector.GlyphStrike[] getAllStrikes()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo sun.font.StandardGlyphVector.GlyphStrike[] getStrikeArray()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo void setGlyphTransform(int, java.awt.geom.AffineTransform) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, int, int, int, int, java.awt.Font, java.awt.font.FontRenderContext, sun.font.CoreMetrics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, int, int, int, int, java.awt.Font, java.awt.font.FontRenderContext, sun.font.CoreMetrics) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, int, int, int, int, java.awt.Font, java.awt.font.FontRenderContext, sun.font.CoreMetrics) 8">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, int, int, int, int, java.awt.Font, java.awt.font.FontRenderContext, sun.font.CoreMetrics) 9">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, int, int, java.awt.Font, java.awt.font.FontRenderContext, sun.font.CoreMetrics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, int, int, java.awt.Font, java.awt.font.FontRenderContext, sun.font.CoreMetrics) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, int, int, java.awt.Font, java.awt.font.FontRenderContext, sun.font.CoreMetrics) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, int, int, java.awt.Font, java.awt.font.FontRenderContext, sun.font.CoreMetrics) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, java.awt.Font, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, java.awt.Font, java.awt.font.FontRenderContext) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(char[], int, int, java.awt.Font, java.awt.font.FontRenderContext) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(java.lang.String, int, int, java.awt.Font, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(java.lang.String, int, int, java.awt.Font, java.awt.font.FontRenderContext) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource StandardTextSource(java.lang.String, int, int, java.awt.Font, java.awt.font.FontRenderContext) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource char[] getChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getBidiLevel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getContextLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getContextStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getLayoutFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource java.awt.font.FontRenderContext getFRC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource java.lang.String toString(boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StandardTextSource sun.font.CoreMetrics getCoreMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource sun.font.TextSource getSubSource(int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache StrikeCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeCache boolean longAddresses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeCache java.lang.ref.Reference getStrikeRef(sun.font.FontStrike) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache java.lang.ref.Reference getStrikeRef(sun.font.FontStrike)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache java.lang.ref.Reference getStrikeRef(sun.font.FontStrike, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache java.lang.ref.Reference getStrikeRef(sun.font.FontStrike, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache void access$000(sun.font.FontStrikeDisposer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache void doDispose(sun.font.FontStrikeDisposer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeCache.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.StrikeCache.SoftDisposerRef SoftDisposerRef(sun.font.FontStrike) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache.SoftDisposerRef sun.font.FontStrikeDisposer getDisposer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeCache.WeakDisposerRef WeakDisposerRef(sun.font.FontStrike) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeCache.WeakDisposerRef sun.font.FontStrikeDisposer getDisposer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics float getAscent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics float getDescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics float getLeading()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics float getMaxAdvance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeMetrics void convertToUserSpace(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.StrikeMetrics void merge(sun.font.StrikeMetrics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager boolean access$1202(sun.font.SunFontManager, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager boolean isOpenJDK()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean maybeUsingAlternateCompositeFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean registerFont(java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager boolean registerFont(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean useAbsoluteFontFileNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean usePlatformFontMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean usingPerAppContextComposites()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.awt.Font[] getAllInstalledFonts()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.awt.Font[] getCreatedFonts()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager java.io.FilenameFilter getTrueTypeFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.io.FilenameFilter getType1Filter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.lang.String access$502(sun.font.SunFontManager, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String access$502(sun.font.SunFontManager, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.lang.String access$602(sun.font.SunFontManager, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String access$602(sun.font.SunFontManager, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.lang.String dotStyleStr(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String getFileNameForFontName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String getFullNameByFileName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String getFullNameByFileName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String getPathName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String getPathName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] access$1000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] access$900(sun.font.SunFontManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] access$900(sun.font.SunFontManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] getFontNamesFromPlatform()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] getInstalledFontFamilyNames(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] getInstalledFontFamilyNames(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] getNativeNames(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] getNativeNames(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] getNativeNames(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_-&gt;null;_,!null-&gt;null;_,null-&gt;null;null,_-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager java.util.ArrayList access$300(sun.font.SunFontManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.util.ArrayList access$300(sun.font.SunFontManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.util.ArrayList access$302(sun.font.SunFontManager, java.util.ArrayList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.util.ArrayList access$302(sun.font.SunFontManager, java.util.ArrayList)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.util.HashMap&lt;java.lang.String,sun.font.SunFontManager.FamilyDescription&gt; populateHardcodedFileNameMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager java.util.TreeMap&lt;java.lang.String,java.lang.String&gt; getCreatedFontFamilyNames()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager javax.swing.plaf.FontUIResource getFontConfigFUIR(java.lang.String, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager javax.swing.plaf.FontUIResource getFontConfigFUIR(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.awt.FontConfiguration access$400(sun.font.SunFontManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.awt.FontConfiguration access$400(sun.font.SunFontManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager sun.awt.FontConfiguration access$402(sun.font.SunFontManager, sun.awt.FontConfiguration) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.awt.FontConfiguration access$402(sun.font.SunFontManager, sun.awt.FontConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager sun.awt.FontConfiguration getFontConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D createFont2D(java.io.File, int, boolean, sun.font.CreatedFontTracker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D createFont2D(java.io.File, int, boolean, sun.font.CreatedFontTracker)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D findFont2D(java.lang.String, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D findFont2D(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D findFont2DAllLocales(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D findFont2DAllLocales(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D findFontFromPlatform(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D findFontFromPlatformMap(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D getDefaultLogicalFont(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2DHandle getNewComposite(java.lang.String, int, sun.font.Font2DHandle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2DHandle getNewComposite(java.lang.String, int, sun.font.Font2DHandle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2DHandle getNewComposite(java.lang.String, int, sun.font.Font2DHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.Font2D[] getRegisteredFonts()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont addToFontList(sun.font.PhysicalFont, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont addToFontList(sun.font.PhysicalFont, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont findDeferredFont(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont findJREDeferredFont(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont findJREDeferredFont(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont findOtherDeferredFont(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont findOtherDeferredFont(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont initialiseDeferredFont(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont initialiseDeferredFont(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont registerFontFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.PhysicalFont registerFontFile(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager sun.font.TrueTypeFont getEUDCFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void access$1100(sun.font.SunFontManager, java.lang.String, boolean, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void access$1100(sun.font.SunFontManager, java.lang.String, boolean, int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void access$700(sun.font.SunFontManager, sun.awt.FontConfiguration, java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void access$700(sun.font.SunFontManager, sun.awt.FontConfiguration, java.util.concurrent.ConcurrentHashMap) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void access$700(sun.font.SunFontManager, sun.awt.FontConfiguration, java.util.concurrent.ConcurrentHashMap) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void addCompositeToFontList(sun.font.CompositeFont, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void addDirFonts(java.lang.String, java.io.File, java.io.FilenameFilter, int, boolean, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void addDirFonts(java.lang.String, java.io.File, java.io.FilenameFilter, int, boolean, int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void addFontToPlatformFontPath(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void addFontToPlatformFontPath(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void addNativeFontFamilyNames(java.util.TreeMap&lt;java.lang.String,java.lang.String&gt;, java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void addNativeFontFamilyNames(java.util.TreeMap&lt;java.lang.String,java.lang.String&gt;, java.util.Locale) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void addNativeFontFamilyNames(java.util.TreeMap&lt;java.lang.String,java.lang.String&gt;, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void createCompositeFonts(java.util.concurrent.ConcurrentHashMap&lt;java.lang.String,sun.font.Font2D&gt;, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void deRegisterBadFont(sun.font.Font2D) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void initCompositeFonts(sun.awt.FontConfiguration, java.util.concurrent.ConcurrentHashMap&lt;java.lang.String,sun.font.Font2D&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void initCompositeFonts(sun.awt.FontConfiguration, java.util.concurrent.ConcurrentHashMap&lt;java.lang.String,sun.font.Font2D&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void registerCompositeFont(java.lang.String, java.lang.String[], java.lang.String[], int, int[], int[], boolean, java.util.concurrent.ConcurrentHashMap&lt;java.lang.String,sun.font.Font2D&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void registerCompositeFont(java.lang.String, java.lang.String[], java.lang.String[], int, int[], int[], boolean, java.util.concurrent.ConcurrentHashMap&lt;java.lang.String,sun.font.Font2D&gt;) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void registerFontDir(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void registerFontDir(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void registerFontDirs(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void registerFontDirs(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void registerFontsInDir(java.lang.String, boolean, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void registerFontsOnPath(java.lang.String, boolean, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void registerOtherFontFiles(java.util.HashSet) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void registerPlatformFontsUsedByFontConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void removeFromCache(sun.font.Font2D) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager void replaceFont(sun.font.PhysicalFont, sun.font.PhysicalFont) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager void resolveFontFiles(java.util.HashSet&lt;java.lang.String&gt;, java.util.ArrayList&lt;java.lang.String&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.10 10()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.10 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager.11 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.12 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.13 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.14 14()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.6 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.6 java.lang.String run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.7 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.8.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.9 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.FamilyDescription FamilyDescription()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.T1Filter T1Filter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.T1Filter T1Filter(sun.font.SunFontManager.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.T1Filter T1Filter(sun.font.SunFontManager.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.T1Filter boolean accept(java.io.File, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.T1Filter boolean accept(java.io.File, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTFilter TTFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTFilter TTFilter(sun.font.SunFontManager.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.TTFilter TTFilter(sun.font.SunFontManager.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTFilter boolean accept(java.io.File, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.TTFilter boolean accept(java.io.File, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager.TTFilter boolean accept(java.io.File, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTorT1Filter TTorT1Filter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTorT1Filter TTorT1Filter(sun.font.SunFontManager.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.TTorT1Filter TTorT1Filter(sun.font.SunFontManager.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTorT1Filter boolean accept(java.io.File, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.SunFontManager.TTorT1Filter boolean accept(java.io.File, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunFontManager.TTorT1Filter boolean accept(java.io.File, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.SunLayoutEngine sun.font.GlyphLayout.LayoutEngine getEngine(sun.font.Font2D, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunLayoutEngine sun.font.GlyphLayout.LayoutEngine getEngine(sun.font.GlyphLayout.LayoutEngineKey)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.SunLayoutEngine void layout(sun.font.FontStrikeDesc, float[], int, int, sun.font.TextRecord, int, java.awt.geom.Point2D.Float, sun.font.GlyphLayout.GVData) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.T2KFontScaler void invalidateScalerContext(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.T2KFontScaler.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.T2KFontScaler.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TextLabel TextLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory TextLabelFactory(java.awt.font.FontRenderContext, char[], java.text.Bidi, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextLabelFactory char[] getText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory int getLayoutFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory int getLineLimit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory int getLineStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory java.awt.font.FontRenderContext getFontRenderContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory java.text.Bidi getLineBidi()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory java.text.Bidi getParagraphBidi()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory sun.font.ExtendedTextLabel createExtended(java.awt.Font, sun.font.CoreMetrics, sun.font.Decoration, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextLabelFactory sun.font.ExtendedTextLabel createExtended(java.awt.Font, sun.font.CoreMetrics, sun.font.Decoration, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TextLabelFactory sun.font.ExtendedTextLabel createExtended(java.awt.Font, sun.font.CoreMetrics, sun.font.Decoration, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextLabelFactory sun.font.TextLabel createSimple(java.awt.Font, sun.font.CoreMetrics, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextLabelFactory sun.font.TextLabel createSimple(java.awt.Font, sun.font.CoreMetrics, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TextLabelFactory sun.font.TextLabel createSimple(java.awt.Font, sun.font.CoreMetrics, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextRecord TextRecord()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextSource TextSource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextSourceLabel java.awt.font.GlyphVector createGV()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextSourceLabel java.awt.geom.AffineTransform getBaselineTransform()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TextSourceLabel java.awt.geom.Rectangle2D getAlignBounds(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextSourceLabel java.awt.geom.Rectangle2D getItalicBounds(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextSourceLabel java.awt.geom.Rectangle2D getLogicalBounds(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextSourceLabel java.awt.geom.Rectangle2D getVisualBounds(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TextSourceLabel sun.font.TextSource getSource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TextSourceLabel void draw(java.awt.Graphics2D, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TrueTypeFont boolean supportsEncoding(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont boolean supportsJA()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont byte[] getTableBytes(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont int getFontCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont int getTableOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont int getTableSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont java.awt.geom.Point2D.Float getGlyphPoint(long, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont java.lang.String getFamilyName(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont java.lang.String getFontName(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont java.lang.String getFullName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont java.lang.String lookupName(short, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont java.lang.String makeString(byte[], int, short)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TrueTypeFont java.nio.ByteBuffer getTableBuffer(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont java.nio.ByteBuffer readBlock(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont short getLCIDFromLocale(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TrueTypeFont sun.font.TrueTypeFont.DirectoryEntry getDirectoryEntry(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont void addLCIDMapEntry(java.util.Map&lt;java.lang.String,java.lang.Short&gt;, java.lang.String, short) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TrueTypeFont void getStyleMetrics(float, float[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TrueTypeFont void setCJKSupport(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont void setStrikethroughMetrics(java.nio.ByteBuffer, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont void setStyle(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont void setUnderlineMetrics(java.nio.ByteBuffer, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeFont.TTDisposerRecord TTDisposerRecord(sun.font.TrueTypeFont.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper TrueTypeGlyphMapper(sun.font.TrueTypeFont) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper boolean hasSupplementaryChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper char remapJAChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper int remapJAIntChar(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Type1Font byte skip(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String expandName(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String expandName(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String fullName2FamilyName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String fullName2FamilyName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String getPostscriptName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Type1Font java.lang.String getSimpleToken(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String getSimpleToken(java.nio.ByteBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String getString(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String getString(java.nio.ByteBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String psName2FamilyName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String psName2FamilyName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String psName2FullName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String psName2FullName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font java.nio.ByteBuffer readBlock(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Type1Font void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Type1Font void verifyPFA(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font void verifyPFB(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Type1Font.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Type1Font.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Type1Font.T1DisposerRecord.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Type1GlyphMapper int getMissingGlyphCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline Underline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline sun.font.Underline getUnderline(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Underline sun.font.Underline getUnderline(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Underline sun.font.Underline getUnderline(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.Underline.IMGrayUnderline float getLowerDrawLimit(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline.IMGrayUnderline java.awt.Shape getUnderlineShape(float, float, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Underline.IMGrayUnderline void drawUnderline(java.awt.Graphics2D, float, float, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Underline.StandardUnderline float getLineThickness(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline.StandardUnderline float getLowerDrawLimit(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline.StandardUnderline java.awt.BasicStroke createStroke(float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Underline.StandardUnderline java.awt.Stroke getStroke(float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.Underline.StandardUnderline void drawUnderline(java.awt.Graphics2D, float, float, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.X11TextRenderer X11TextRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.X11TextRenderer sun.font.X11TextRenderer traceWrap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.X11TextRenderer void drawGlyphList(sun.java2d.SunGraphics2D, sun.font.GlyphList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.X11TextRenderer void drawGlyphVector(sun.java2d.SunGraphics2D, java.awt.font.GlyphVector, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.X11TextRenderer void drawGlyphVector(sun.java2d.SunGraphics2D, java.awt.font.GlyphVector, float, float) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.X11TextRenderer.Tracer Tracer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.XMap XMap(java.lang.String, int, int, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.XMap sun.font.XMap getXMapper(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XMap sun.font.XMap getXMapperInternal(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XMap sun.font.XMap getXMapperInternal(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache XRGlyphCache(sun.java2d.xr.XRCompositeManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache boolean containsLCDGlyphs(java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache byte[] generateGlyphImageStream(java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;[] seperateGlyphTypes(java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;[] seperateGlyphTypes(java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache sun.font.XRGlyphCacheEntry getEntryForPointer(long)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.XRGlyphCache sun.font.XRGlyphCacheEntry[] cacheGlyphs(sun.font.GlyphList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache sun.font.XRGlyphCacheEntry[] cacheGlyphs(sun.font.GlyphList)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache void clearCache(sun.font.XRGlyphCacheEntry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache void freeGlyphs(sun.java2d.xr.GrowableIntArray) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache void glyphDisposed(java.util.ArrayList&lt;java.lang.Long&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache void uploadGlyphs(sun.font.XRGlyphCacheEntry[], java.util.ArrayList&lt;sun.font.XRGlyphCacheEntry&gt;, sun.font.GlyphList, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache void uploadGlyphs(sun.font.XRGlyphCacheEntry[], java.util.ArrayList&lt;sun.font.XRGlyphCacheEntry&gt;, sun.font.GlyphList, int[]) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.XRGlyphCache.1 int compare(sun.font.XRGlyphCacheEntry, sun.font.XRGlyphCacheEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCache.1 int compare(sun.font.XRGlyphCacheEntry, sun.font.XRGlyphCacheEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRGlyphCacheEntry XRGlyphCacheEntry(long, sun.font.GlyphList) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.font.XRGlyphCacheEntry boolean isPinned()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry int getGlyphSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry int getLastUsed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry int getXOff()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry int getYOff()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry long getGlyphInfoPtr()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.font.XRTextRenderer XRTextRenderer(sun.java2d.xr.XRCompositeManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.font.XRTextRenderer void drawGlyphList(sun.java2d.SunGraphics2D, sun.font.GlyphList) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
