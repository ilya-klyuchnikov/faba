<root>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension int getFilterLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension int getFilterRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension int getIfPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension java.util.List&lt;sun.org.mozilla.javascript.internal.ast.ArrayComprehensionLoop&gt; getLoops()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension sun.org.mozilla.javascript.internal.ast.AstNode getFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension sun.org.mozilla.javascript.internal.ast.AstNode getResult()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension void addLoop(sun.org.mozilla.javascript.internal.ast.ArrayComprehensionLoop) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension void setLoops(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.ArrayComprehensionLoop&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension void setResult(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehension void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehensionLoop java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehensionLoop sun.org.mozilla.javascript.internal.ast.AstNode getBody()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehensionLoop void setBody(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayComprehensionLoop void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayLiteral boolean isDestructuring()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayLiteral int getDestructuringLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayLiteral int getSkipCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayLiteral java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayLiteral java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt; getElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayLiteral void addElement(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayLiteral void setElements(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ArrayLiteral void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Assignment Assignment(int, sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.AstNode, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode int getPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode java.lang.String makeIndent(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode java.lang.String operatorToString(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode java.lang.String shortName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode sun.org.mozilla.javascript.internal.ast.AstNode getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode void addChild(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode void assertNotNull(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode void printList(java.util.List&lt;T&gt;, java.lang.StringBuilder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode.DebugPrintVisitor boolean visit(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode.DebugPrintVisitor boolean visit(sun.org.mozilla.javascript.internal.ast.AstNode)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode.DebugPrintVisitor java.lang.String makeIndent(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode.DebugPrintVisitor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode.PositionComparator PositionComparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode.PositionComparator int compare(sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode.PositionComparator int compare(sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.AstNode) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstNode.PositionComparator int compare(sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.AstNode)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstRoot boolean isInStrictMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstRoot java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstRoot java.util.SortedSet&lt;sun.org.mozilla.javascript.internal.ast.Comment&gt; getComments()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstRoot void addComment(sun.org.mozilla.javascript.internal.ast.Comment) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstRoot void setComments(java.util.SortedSet&lt;sun.org.mozilla.javascript.internal.ast.Comment&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstRoot.1 boolean visit(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.AstRoot.1 boolean visit(sun.org.mozilla.javascript.internal.ast.AstNode)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Block java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Block void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.BreakStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.BreakStatement sun.org.mozilla.javascript.internal.ast.AstNode getBreakTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.BreakStatement sun.org.mozilla.javascript.internal.ast.Name getBreakLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.BreakStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause int getIfPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause int getLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause sun.org.mozilla.javascript.internal.ast.AstNode getCatchCondition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause sun.org.mozilla.javascript.internal.ast.Block getBody()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause sun.org.mozilla.javascript.internal.ast.Name getVarName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause void setBody(sun.org.mozilla.javascript.internal.ast.Block) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause void setVarName(sun.org.mozilla.javascript.internal.ast.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.CatchClause void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Comment java.lang.String getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Comment java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Comment sun.org.mozilla.javascript.internal.Token.CommentType getCommentType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Comment void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression int getColonPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression int getQuestionMarkPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression sun.org.mozilla.javascript.internal.ast.AstNode getFalseExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression sun.org.mozilla.javascript.internal.ast.AstNode getTestExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression sun.org.mozilla.javascript.internal.ast.AstNode getTrueExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression void setFalseExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression void setTestExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression void setTrueExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ConditionalExpression void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ContinueStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ContinueStatement sun.org.mozilla.javascript.internal.ast.Loop getTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ContinueStatement sun.org.mozilla.javascript.internal.ast.Name getLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ContinueStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.DoLoop int getWhilePosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.DoLoop java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.DoLoop sun.org.mozilla.javascript.internal.ast.AstNode getCondition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.DoLoop void setCondition(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.DoLoop void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ElementGet int getLb()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ElementGet int getRb()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ElementGet java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ElementGet sun.org.mozilla.javascript.internal.ast.AstNode getElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ElementGet sun.org.mozilla.javascript.internal.ast.AstNode getTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ElementGet void setElement(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ElementGet void setTarget(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ElementGet void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.EmptyExpression void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector java.util.List&lt;sun.org.mozilla.javascript.internal.ast.ParseProblem&gt; getErrors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector sun.org.mozilla.javascript.internal.EvaluatorException runtimeError(java.lang.String, java.lang.String, int, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector sun.org.mozilla.javascript.internal.EvaluatorException runtimeError(java.lang.String, java.lang.String, int, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector sun.org.mozilla.javascript.internal.EvaluatorException runtimeError(java.lang.String, java.lang.String, int, java.lang.String, int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector void error(java.lang.String, java.lang.String, int, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector void error(java.lang.String, java.lang.String, int, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector void error(java.lang.String, java.lang.String, int, java.lang.String, int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector void warning(java.lang.String, java.lang.String, int, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector void warning(java.lang.String, java.lang.String, int, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorCollector void warning(java.lang.String, java.lang.String, int, java.lang.String, int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorNode java.lang.String getMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorNode java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ErrorNode void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ExpressionStatement ExpressionStatement(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ExpressionStatement ExpressionStatement(sun.org.mozilla.javascript.internal.ast.AstNode, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ExpressionStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ExpressionStatement sun.org.mozilla.javascript.internal.ast.AstNode getExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ExpressionStatement void setExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ExpressionStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop boolean isForEach()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop int getEachPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop int getInPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop sun.org.mozilla.javascript.internal.ast.AstNode getIteratedObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop sun.org.mozilla.javascript.internal.ast.AstNode getIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop void setIteratedObject(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop void setIterator(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForInLoop void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForLoop java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForLoop sun.org.mozilla.javascript.internal.ast.AstNode getCondition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForLoop sun.org.mozilla.javascript.internal.ast.AstNode getIncrement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForLoop sun.org.mozilla.javascript.internal.ast.AstNode getInitializer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForLoop void setCondition(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForLoop void setIncrement(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForLoop void setInitializer(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ForLoop void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall int getLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt; getArguments()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall sun.org.mozilla.javascript.internal.ast.AstNode getTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall void addArgument(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall void setArguments(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall void setTarget(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionCall void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode boolean getIgnoreDynamicScope()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode boolean isExpressionClosure()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode boolean isGenerator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode boolean isGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode boolean isGetterOrSetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode boolean isSetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode boolean requiresActivation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode int getFunctionType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode int getLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode java.util.List&lt;sun.org.mozilla.javascript.internal.Node&gt; getResumptionPoints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt; getParams()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode java.util.Map&lt;sun.org.mozilla.javascript.internal.Node,int[]&gt; getLiveLocals()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode sun.org.mozilla.javascript.internal.ast.AstNode getBody()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode sun.org.mozilla.javascript.internal.ast.AstNode getMemberExprNode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode sun.org.mozilla.javascript.internal.ast.Name getFunctionName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode void addParam(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode void setBody(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode void setParams(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.FunctionNode void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement int getElsePosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement int getLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement sun.org.mozilla.javascript.internal.ast.AstNode getCondition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement sun.org.mozilla.javascript.internal.ast.AstNode getElsePart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement sun.org.mozilla.javascript.internal.ast.AstNode getThenPart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement void setCondition(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement void setThenPart(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.IfStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression InfixExpression(int, sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.AstNode, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression int getOperatorPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression sun.org.mozilla.javascript.internal.ast.AstNode getLeft()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression sun.org.mozilla.javascript.internal.ast.AstNode getRight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression void setLeft(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression void setLeftAndRight(sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression void setLeftAndRight(sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.AstNode) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression void setRight(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.InfixExpression void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Jump void setContinue(sun.org.mozilla.javascript.internal.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Jump void setDefault(sun.org.mozilla.javascript.internal.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Jump void setFinally(sun.org.mozilla.javascript.internal.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Jump void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.KeywordLiteral boolean isBooleanLiteral()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.KeywordLiteral java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.KeywordLiteral sun.org.mozilla.javascript.internal.ast.KeywordLiteral setType(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.KeywordLiteral void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Label java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Label java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Label void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LabeledStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LabeledStatement java.util.List&lt;sun.org.mozilla.javascript.internal.ast.Label&gt; getLabels()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LabeledStatement sun.org.mozilla.javascript.internal.ast.AstNode getStatement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LabeledStatement sun.org.mozilla.javascript.internal.ast.Label getLabelByName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LabeledStatement void addLabel(sun.org.mozilla.javascript.internal.ast.Label) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LabeledStatement void setLabels(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.Label&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LabeledStatement void setStatement(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LabeledStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LetNode int getLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LetNode int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LetNode java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LetNode sun.org.mozilla.javascript.internal.ast.AstNode getBody()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LetNode sun.org.mozilla.javascript.internal.ast.VariableDeclaration getVariables()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LetNode void setVariables(sun.org.mozilla.javascript.internal.ast.VariableDeclaration) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.LetNode void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Loop int getLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Loop int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Loop sun.org.mozilla.javascript.internal.ast.AstNode getBody()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Loop void setBody(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Name Name(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Name int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Name java.lang.String getIdentifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Name java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Name sun.org.mozilla.javascript.internal.ast.Scope getDefiningScope()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Name sun.org.mozilla.javascript.internal.ast.Scope getScope()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Name void setIdentifier(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Name void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NewExpression java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NewExpression sun.org.mozilla.javascript.internal.ast.ObjectLiteral getInitializer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NewExpression void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NumberLiteral NumberLiteral(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NumberLiteral NumberLiteral(int, java.lang.String, double) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NumberLiteral double getNumber()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NumberLiteral java.lang.String getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NumberLiteral java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.NumberLiteral void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectLiteral boolean isDestructuring()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectLiteral java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectLiteral java.util.List&lt;sun.org.mozilla.javascript.internal.ast.ObjectProperty&gt; getElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectLiteral void addElement(sun.org.mozilla.javascript.internal.ast.ObjectProperty) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectLiteral void setElements(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.ObjectProperty&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectLiteral void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectProperty boolean isGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectProperty boolean isSetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ObjectProperty java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParenthesizedExpression java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParenthesizedExpression sun.org.mozilla.javascript.internal.ast.AstNode getExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParenthesizedExpression void setExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParenthesizedExpression void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParseProblem int getFileOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParseProblem int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParseProblem java.lang.String getMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParseProblem java.lang.String getSourceName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParseProblem java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ParseProblem sun.org.mozilla.javascript.internal.ast.ParseProblem.Type getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.PropertyGet PropertyGet(sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.Name, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.PropertyGet java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.PropertyGet void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.RegExpLiteral java.lang.String getFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.RegExpLiteral java.lang.String getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.RegExpLiteral java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.RegExpLiteral void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ReturnStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ReturnStatement sun.org.mozilla.javascript.internal.ast.AstNode getReturnValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ReturnStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt; getStatements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope java.util.List&lt;sun.org.mozilla.javascript.internal.ast.Scope&gt; getChildScopes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope java.util.Map&lt;java.lang.String,sun.org.mozilla.javascript.internal.ast.Symbol&gt; getSymbolTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope sun.org.mozilla.javascript.internal.ast.Scope getDefiningScope(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope sun.org.mozilla.javascript.internal.ast.Scope getParentScope()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope sun.org.mozilla.javascript.internal.ast.Scope splitScope(sun.org.mozilla.javascript.internal.ast.Scope) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope sun.org.mozilla.javascript.internal.ast.Scope splitScope(sun.org.mozilla.javascript.internal.ast.Scope)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope sun.org.mozilla.javascript.internal.ast.ScriptNode getTop()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope sun.org.mozilla.javascript.internal.ast.Symbol getSymbol(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope void addChildScope(sun.org.mozilla.javascript.internal.ast.Scope) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope void joinScopes(sun.org.mozilla.javascript.internal.ast.Scope, sun.org.mozilla.javascript.internal.ast.Scope) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope void joinScopes(sun.org.mozilla.javascript.internal.ast.Scope, sun.org.mozilla.javascript.internal.ast.Scope) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope void putSymbol(sun.org.mozilla.javascript.internal.ast.Symbol) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Scope void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode int getBaseLineno()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode int getEncodedSourceEnd()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode int getEncodedSourceStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode int getEndLineno()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode int getIndexForNameNode(sun.org.mozilla.javascript.internal.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode int getParamCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode java.lang.Object getCompilerData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode java.lang.String getEncodedSource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode java.lang.String getNextTempName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode java.lang.String getSourceName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode java.util.List&lt;sun.org.mozilla.javascript.internal.ast.FunctionNode&gt; getFunctions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode java.util.List&lt;sun.org.mozilla.javascript.internal.ast.Symbol&gt; getSymbols()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode void addRegExp(sun.org.mozilla.javascript.internal.ast.RegExpLiteral) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode void addSymbol(sun.org.mozilla.javascript.internal.ast.Symbol) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ScriptNode void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.StringLiteral char getQuoteCharacter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.StringLiteral java.lang.String getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.StringLiteral java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.StringLiteral void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchCase boolean isDefault()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchCase java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchCase java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt; getStatements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchCase sun.org.mozilla.javascript.internal.ast.AstNode getExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchCase void addStatement(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchCase void setStatements(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.AstNode&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchCase void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement int getLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement java.util.List&lt;sun.org.mozilla.javascript.internal.ast.SwitchCase&gt; getCases()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement sun.org.mozilla.javascript.internal.ast.AstNode getExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement void addCase(sun.org.mozilla.javascript.internal.ast.SwitchCase) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement void setCases(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.SwitchCase&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement void setExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.SwitchStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Symbol int getDeclType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Symbol int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Symbol java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Symbol java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Symbol sun.org.mozilla.javascript.internal.Node getNode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Symbol sun.org.mozilla.javascript.internal.ast.Scope getContainingTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ThrowStatement ThrowStatement(int, sun.org.mozilla.javascript.internal.ast.AstNode) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ThrowStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ThrowStatement sun.org.mozilla.javascript.internal.ast.AstNode getExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ThrowStatement void setExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.ThrowStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement int getFinallyPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement java.util.List&lt;sun.org.mozilla.javascript.internal.ast.CatchClause&gt; getCatchClauses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement sun.org.mozilla.javascript.internal.ast.AstNode getFinallyBlock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement sun.org.mozilla.javascript.internal.ast.AstNode getTryBlock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement void addCatchClause(sun.org.mozilla.javascript.internal.ast.CatchClause) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement void setCatchClauses(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.CatchClause&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement void setTryBlock(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.TryStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.UnaryExpression boolean isPostfix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.UnaryExpression boolean isPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.UnaryExpression int getOperator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.UnaryExpression java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.UnaryExpression sun.org.mozilla.javascript.internal.ast.AstNode getOperand()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.UnaryExpression void setOperand(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.UnaryExpression void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration boolean isConst()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration boolean isLet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration boolean isVar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration java.lang.String declTypeName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration java.util.List&lt;sun.org.mozilla.javascript.internal.ast.VariableInitializer&gt; getVariables()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration void addVariable(sun.org.mozilla.javascript.internal.ast.VariableInitializer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration void setVariables(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.VariableInitializer&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableDeclaration void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableInitializer boolean isDestructuring()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableInitializer java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableInitializer sun.org.mozilla.javascript.internal.ast.AstNode getInitializer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableInitializer sun.org.mozilla.javascript.internal.ast.AstNode getTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableInitializer void setTarget(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.VariableInitializer void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WhileLoop java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WhileLoop sun.org.mozilla.javascript.internal.ast.AstNode getCondition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WhileLoop void setCondition(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WhileLoop void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WithStatement int getLp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WithStatement int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WithStatement java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WithStatement sun.org.mozilla.javascript.internal.ast.AstNode getExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WithStatement sun.org.mozilla.javascript.internal.ast.AstNode getStatement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WithStatement void setExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WithStatement void setStatement(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.WithStatement void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlDotQuery int getRp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlDotQuery java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlElemRef int getLb()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlElemRef int getRb()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlElemRef java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlElemRef sun.org.mozilla.javascript.internal.ast.AstNode getExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlElemRef void setExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlElemRef void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlExpression boolean isXmlAttribute()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlExpression java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlExpression sun.org.mozilla.javascript.internal.ast.AstNode getExpression()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlExpression void setExpression(sun.org.mozilla.javascript.internal.ast.AstNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlExpression void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlLiteral java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlLiteral java.util.List&lt;sun.org.mozilla.javascript.internal.ast.XmlFragment&gt; getFragments()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlLiteral void addFragment(sun.org.mozilla.javascript.internal.ast.XmlFragment) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlLiteral void setFragments(java.util.List&lt;sun.org.mozilla.javascript.internal.ast.XmlFragment&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlLiteral void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlMemberGet XmlMemberGet(sun.org.mozilla.javascript.internal.ast.AstNode, sun.org.mozilla.javascript.internal.ast.XmlRef, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlMemberGet java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlPropRef java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlPropRef sun.org.mozilla.javascript.internal.ast.Name getPropName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlPropRef void setPropName(sun.org.mozilla.javascript.internal.ast.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlPropRef void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlRef boolean isAttributeAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlRef int getAtPos()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlRef int getColonPos()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlRef sun.org.mozilla.javascript.internal.ast.Name getNamespace()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlString java.lang.String getXml()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlString java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlString void setXml(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.XmlString void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Yield java.lang.String toSource(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Yield sun.org.mozilla.javascript.internal.ast.AstNode getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.org.mozilla.javascript.internal.ast.Yield void visit(sun.org.mozilla.javascript.internal.ast.NodeVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
