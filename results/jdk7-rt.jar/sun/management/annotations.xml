<root>
  <item name="sun.management.Agent Agent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Agent java.util.Properties getManagementProperties()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Agent java.util.Properties loadManagementProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Agent java.util.Properties parseString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Agent java.util.Properties parseString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Agent void agentmain(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Agent void error(java.lang.Exception) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Agent void error(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Agent void error(java.lang.String, java.lang.String[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Agent void premain(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Agent void startAgent(java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Agent void startDiscoveryService(java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Agent void startRemoteManagementAgent(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Agent void warning(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.AgentConfigurationError AgentConfigurationError(java.lang.String, java.lang.String...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.AgentConfigurationError AgentConfigurationError(java.lang.String, java.lang.Throwable, java.lang.String...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.AgentConfigurationError java.lang.String getError()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.AgentConfigurationError java.lang.String[] getParams()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ClassLoadingImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.CompilationImpl java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.CompilationImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.CompilerThreadStat java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.CompilerThreadStat java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.CompilerThreadStat long getCompileTaskCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.CompilerThreadStat long getCompileTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.CompilerThreadStat sun.management.MethodInfo getLastCompiledMethodInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ConnectorAddressLink ConnectorAddressLink()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ConnectorAddressLink java.lang.String importFrom(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ConnectorAddressLink java.util.Map&lt;java.lang.String,java.lang.String&gt; importRemoteFrom(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ConnectorAddressLink void export(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ConnectorAddressLink void exportRemote(java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.FileSystem FileSystem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.FileSystemImpl FileSystemImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.FileSystemImpl boolean isAccessUserOnly(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.FileSystemImpl boolean supportsFileSecurity(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.FileSystemImpl boolean supportsFileSecurity(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Flag Flag(java.lang.String, java.lang.Object, boolean, boolean, com.sun.management.VMOption.Origin) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Flag boolean isExternal()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Flag boolean isWriteable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Flag com.sun.management.VMOption getVMOption()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Flag java.lang.Object getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Flag java.util.List&lt;sun.management.Flag&gt; getAllFlags()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Flag java.util.List&lt;sun.management.Flag&gt; getFlags(java.lang.String[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Flag sun.management.Flag getFlag(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData com.sun.management.GarbageCollectionNotificationInfo access$000(sun.management.GarbageCollectionNotifInfoCompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData com.sun.management.GarbageCollectionNotificationInfo access$000(sun.management.GarbageCollectionNotifInfoCompositeData)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData com.sun.management.GarbageCollectionNotificationInfo getGarbageCollectionNotifInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData com.sun.management.GcInfo getGcInfo(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData com.sun.management.GcInfo getGcInfo(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData java.lang.String getGcAction(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData java.lang.String getGcCause(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData java.lang.String getGcName(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData javax.management.openmbean.CompositeData getCompositeData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData void validateCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.GarbageCollectionNotifInfoCompositeData.1 sun.management.GcInfoBuilder run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.GarbageCollectorImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GcInfoBuilder int getGcExtItemCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.GcInfoBuilder java.lang.String[] getPoolNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.GcInfoCompositeData com.sun.management.GcInfo getGcInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.GcInfoCompositeData java.lang.String[] getBaseGcInfoItemNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.GcInfoCompositeData java.util.Map&lt;java.lang.String,java.lang.management.MemoryUsage&gt; cast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.GcInfoCompositeData java.util.Map&lt;java.lang.String,java.lang.management.MemoryUsage&gt; getMemoryUsageAfterGc(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GcInfoCompositeData java.util.Map&lt;java.lang.String,java.lang.management.MemoryUsage&gt; getMemoryUsageBeforeGc(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GcInfoCompositeData javax.management.openmbean.CompositeData getCompositeData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GcInfoCompositeData void validateCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.GcInfoCompositeData.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.GcInfoCompositeData.1 sun.management.GcInfoBuilder run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.GcInfoCompositeData.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.GcInfoCompositeData.2 java.lang.Object[] run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.HotSpotDiagnostic HotSpotDiagnostic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.HotSpotDiagnostic com.sun.management.VMOption getVMOption(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotSpotDiagnostic java.util.List&lt;com.sun.management.VMOption&gt; getDiagnosticOptions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotSpotDiagnostic javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotSpotDiagnostic void setVMOption(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotSpotDiagnostic void setVMOption(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotCompilation int getCompilerThreadCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.HotspotCompilation java.util.List&lt;sun.management.CompilerThreadStat&gt; getCompilerThreadStats()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotCompilation sun.management.MethodInfo getFailedCompile()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotCompilation sun.management.MethodInfo getInvalidatedCompile()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotCompilation sun.management.MethodInfo getLastCompile()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotCompilation sun.management.counter.Counter access$000(sun.management.HotspotCompilation, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotCompilation sun.management.counter.Counter access$000(sun.management.HotspotCompilation, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.HotspotCompilation sun.management.counter.Counter lookup(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.HotspotCompilation.CompilerThreadInfo CompilerThreadInfo(sun.management.HotspotCompilation, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotCompilation.CompilerThreadInfo CompilerThreadInfo(sun.management.HotspotCompilation, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotCompilation.CompilerThreadInfo CompilerThreadInfo(sun.management.HotspotCompilation, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.HotspotCompilation.CompilerThreadInfo sun.management.CompilerThreadStat getCompilerThreadStat()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.HotspotInternal javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.HotspotInternal void postDeregister()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.HotspotInternal void postRegister(java.lang.Boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.HotspotInternal void postRegister(java.lang.Boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.LazyCompositeData LazyCompositeData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.LazyCompositeData boolean getBoolean(javax.management.openmbean.CompositeData, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.LazyCompositeData int getInt(javax.management.openmbean.CompositeData, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.LazyCompositeData java.lang.String getString(javax.management.openmbean.CompositeData, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.LazyCompositeData long getLong(javax.management.openmbean.CompositeData, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.LockDataConverter LockDataConverter(java.lang.management.ThreadInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.LockDataConverter LockDataConverter(sun.management.LockDataConverter.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.LockDataConverter java.lang.management.LockInfo getLockInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.LockDataConverter java.lang.management.LockInfo[] getLockedSynchronizers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.LockDataConverter sun.management.LockDataConverter newLockDataConverter(java.lang.management.ThreadInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.LockDataConverter sun.management.LockDataConverter newLockDataConverter(java.lang.management.ThreadInfo)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.LockDataConverter.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.LockDataConverter.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.LockDataConverter.1 sun.management.LockDataConverter run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactory ManagementFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ManagementFactory java.lang.management.GarbageCollectorMXBean createGarbageCollector(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ManagementFactory java.lang.management.GarbageCollectorMXBean createGarbageCollector(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactory java.lang.management.MemoryManagerMXBean createMemoryManager(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactory java.lang.management.MemoryPoolMXBean createMemoryPool(java.lang.String, boolean, long, long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper ManagementFactoryHelper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ManagementFactoryHelper boolean isThreadRunningNative(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ManagementFactoryHelper boolean isThreadSuspended(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ManagementFactoryHelper java.lang.Thread.State toThreadState(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ManagementFactoryHelper java.lang.management.BufferPoolMXBean createBufferPoolMXBean(sun.misc.JavaNioAccess.BufferPool)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper java.lang.management.PlatformLoggingMXBean getPlatformLoggingMXBean()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper java.util.List&lt;java.lang.management.GarbageCollectorMXBean&gt; getGarbageCollectorMXBeans()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper java.util.List&lt;java.lang.management.MemoryManagerMXBean&gt; getMemoryManagerMXBeans()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper java.util.List&lt;java.lang.management.MemoryPoolMXBean&gt; getMemoryPoolMXBeans()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper void addMBean(javax.management.MBeanServer, java.lang.Object, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper void unregisterMBean(javax.management.MBeanServer, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper.1 javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper.2 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper.3 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper.3 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ManagementFactoryHelper.PlatformLoggingImpl PlatformLoggingImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ManagementFactoryHelper.PlatformLoggingImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType boolean isBasicType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.Class access$200()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.Class getMappedTypeClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.Object toJavaTypeData(java.lang.Object, java.lang.reflect.Type) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.Object toJavaTypeData(java.lang.Object, java.lang.reflect.Type)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.Object toOpenTypeData(java.lang.Object, java.lang.reflect.Type) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.Object toOpenTypeData(java.lang.Object, java.lang.reflect.Type)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.String access$300(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.String decapitalize(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.String[] access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType java.lang.String[] access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType javax.management.openmbean.OpenType getOpenType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType sun.management.MappedMXBeanType newBasicType(java.lang.Class, javax.management.openmbean.OpenType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType sun.management.MappedMXBeanType newMappedType(java.lang.reflect.Type)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.ArrayMXBeanType ArrayMXBeanType(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.ArrayMXBeanType java.lang.Object toJavaTypeData(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.ArrayMXBeanType java.lang.Object toOpenTypeData(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.ArrayMXBeanType java.lang.reflect.Type getJavaType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.BasicMXBeanType java.lang.Object toJavaTypeData(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.BasicMXBeanType java.lang.Object toOpenTypeData(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.BasicMXBeanType java.lang.reflect.Type getJavaType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.CompositeDataMXBeanType java.lang.Object toOpenTypeData(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.CompositeDataMXBeanType java.lang.reflect.Type getJavaType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.CompositeDataMXBeanType.1 java.lang.reflect.Method run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.CompositeDataMXBeanType.2 java.lang.reflect.Method[] run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.EnumMXBeanType java.lang.Object toOpenTypeData(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.EnumMXBeanType java.lang.Object toOpenTypeData(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.EnumMXBeanType java.lang.reflect.Type getJavaType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.GenericArrayMXBeanType GenericArrayMXBeanType(java.lang.reflect.GenericArrayType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.GenericArrayMXBeanType java.lang.reflect.Type getJavaType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.InProgress boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MappedMXBeanType.InProgress boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.InProgress boolean isValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MappedMXBeanType.InProgress boolean isValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.InProgress int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.InProgress java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.ListMXBeanType ListMXBeanType(java.lang.reflect.ParameterizedType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.ListMXBeanType java.lang.Object toJavaTypeData(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.ListMXBeanType java.lang.Object toJavaTypeData(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.ListMXBeanType java.lang.Object toOpenTypeData(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.ListMXBeanType java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.ListMXBeanType java.lang.reflect.Type getJavaType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.MapMXBeanType MapMXBeanType(java.lang.reflect.ParameterizedType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.MapMXBeanType java.lang.Object toJavaTypeData(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.MapMXBeanType java.lang.Object toJavaTypeData(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.MapMXBeanType java.lang.Object toOpenTypeData(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.MapMXBeanType java.lang.Object toOpenTypeData(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MappedMXBeanType.MapMXBeanType java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MappedMXBeanType.MapMXBeanType java.lang.reflect.Type getJavaType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryImpl int getObjectPendingFinalizationCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryImpl java.lang.String getNotifMsg(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MemoryImpl java.lang.String getNotifMsg(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryManagerImpl boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryManagerImpl java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryManagerImpl java.lang.String[] getMemoryPoolNames()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryManagerImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryNotifInfoCompositeData java.lang.String getPoolName(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryNotifInfoCompositeData java.lang.management.MemoryNotificationInfo getMemoryNotifInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryNotifInfoCompositeData java.lang.management.MemoryUsage getUsage(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryNotifInfoCompositeData java.lang.management.MemoryUsage getUsage(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MemoryNotifInfoCompositeData javax.management.openmbean.CompositeData getCompositeData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryNotifInfoCompositeData void validateCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryPoolImpl boolean isCollectionUsageThresholdSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryPoolImpl boolean isUsageThresholdSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryPoolImpl boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryPoolImpl java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryPoolImpl java.lang.String[] getMemoryManagerNames()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryPoolImpl java.lang.management.MemoryType getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryPoolImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryPoolImpl sun.management.Sensor access$000(sun.management.MemoryPoolImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryPoolImpl sun.management.Sensor access$000(sun.management.MemoryPoolImpl)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryPoolImpl.CollectionSensor void clearAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryPoolImpl.PoolSensor void clearAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryUsageCompositeData java.lang.management.MemoryUsage getMemoryUsage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryUsageCompositeData javax.management.openmbean.CompositeData getCompositeData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MemoryUsageCompositeData javax.management.openmbean.CompositeType getMemoryUsageCompositeType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MemoryUsageCompositeData void validateCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MethodInfo int getCompileSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MethodInfo java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MethodInfo java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MethodInfo long getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MonitorInfoCompositeData java.lang.StackTraceElement getLockedStackFrame(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MonitorInfoCompositeData java.lang.StackTraceElement getLockedStackFrame(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.MonitorInfoCompositeData java.lang.management.MonitorInfo getMonitorInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MonitorInfoCompositeData javax.management.openmbean.CompositeData getCompositeData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.MonitorInfoCompositeData javax.management.openmbean.CompositeType getMonitorInfoCompositeType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.MonitorInfoCompositeData void validateCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.NotificationEmitterSupport void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.NotificationEmitterSupport void removeNotificationListener(javax.management.NotificationListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.NotificationEmitterSupport void removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.NotificationEmitterSupport void removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.NotificationEmitterSupport void removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.NotificationEmitterSupport void sendNotification(javax.management.Notification) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.OperatingSystemImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.RuntimeImpl java.util.Map&lt;java.lang.String,java.lang.String&gt; getSystemProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.RuntimeImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.RuntimeImpl long getStartTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Sensor boolean isOn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Sensor java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Sensor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Sensor long getCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.StackTraceElementCompositeData java.lang.StackTraceElement from(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.StackTraceElementCompositeData java.lang.StackTraceElement from(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.StackTraceElementCompositeData java.lang.StackTraceElement getStackTraceElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.StackTraceElementCompositeData javax.management.openmbean.CompositeData getCompositeData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.StackTraceElementCompositeData void validateCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl boolean verifyThreadAllocatedMemory(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl boolean verifyThreadCpuTime(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl java.lang.management.ThreadInfo[] getThreadInfo(long[], boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl java.lang.management.ThreadInfo[] getThreadInfo(long[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl java.lang.management.ThreadInfo[] getThreadInfo(long[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl javax.management.ObjectName getObjectName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl long[] findDeadlockedThreads()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ThreadImpl long[] findMonitorDeadlockedThreads()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.ThreadImpl long[] getAllThreadIds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl long[] getThreadAllocatedBytes(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl long[] getThreadAllocatedBytes(long[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl long[] getThreadCpuTime(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl long[] getThreadCpuTime(long[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl long[] getThreadUserTime(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl long[] getThreadUserTime(long[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadImpl void verifyThreadIds(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData ThreadInfoCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData boolean isCurrentVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ThreadInfoCompositeData boolean isCurrentVersion(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData boolean isV5Attribute(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ThreadInfoCompositeData java.lang.StackTraceElement[] stackTrace()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData java.lang.String threadName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData java.lang.management.MonitorInfo[] lockedMonitors()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData java.lang.management.ThreadInfo getThreadInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.ThreadInfoCompositeData javax.management.openmbean.CompositeData getCompositeData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData sun.management.ThreadInfoCompositeData getInstance(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData sun.management.ThreadInfoCompositeData getInstance(javax.management.openmbean.CompositeData)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.ThreadInfoCompositeData void validateCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Util Util()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.Util java.lang.String[] toStringArray(java.util.List&lt;java.lang.String&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Util javax.management.ObjectName newObjectName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Util javax.management.ObjectName newObjectName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.Util javax.management.ObjectName newObjectName(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Util javax.management.ObjectName newObjectName(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.Util javax.management.ObjectName newObjectName(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.VMManagementImpl boolean isBootClassPathSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl boolean isCompilationTimeMonitoringSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl boolean isCurrentThreadCpuTimeSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl boolean isGcNotificationSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl boolean isObjectMonitorUsageSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl boolean isOtherThreadCpuTimeSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl boolean isSynchronizerUsageSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl boolean isThreadAllocatedMemorySupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl boolean isThreadContentionMonitoringSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl java.lang.String getManagementVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMManagementImpl java.lang.String getVmId()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.VMManagementImpl sun.management.counter.perf.PerfInstrumentation getPerfInstrumentation()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.management.VMOptionCompositeData com.sun.management.VMOption getVMOption()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMOptionCompositeData javax.management.openmbean.CompositeData getCompositeData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.management.VMOptionCompositeData javax.management.openmbean.CompositeType getVMOptionCompositeType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.management.VMOptionCompositeData void validateCompositeData(javax.management.openmbean.CompositeData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
