<root>
  <item name="sun.awt.X11.AwtGraphicsConfigData int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.AwtGraphicsConfigData int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.AwtGraphicsConfigData java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.AwtGraphicsConfigData java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.AwtGraphicsConfigData java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.AwtGraphicsConfigData long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.AwtGraphicsConfigData sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.AwtGraphicsConfigData sun.awt.X11.XRenderPictFormat get_renderPictFormat()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.AwtGraphicsConfigData sun.awt.X11.XVisualInfo get_awt_visInfo()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.AwtScreenData int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.AwtScreenData int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.AwtScreenData java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.AwtScreenData java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.AwtScreenData java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.AwtScreenData long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.AwtScreenData sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ColorData int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ColorData int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ColorData java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ColorData java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ColorData java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ColorData long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ColorData sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ColorEntry int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ColorEntry int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ColorEntry java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ColorEntry java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ColorEntry java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ColorEntry long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ColorEntry sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Depth int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Depth int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Depth java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Depth java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Depth java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Depth long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Depth sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.FileDialogFilter boolean accept(java.io.File, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.FileDialogFilter boolean accept(java.io.File, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.FileDialogFilter boolean accept(java.io.File, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.FileDialogFilter boolean matches(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.FileDialogFilter boolean matches(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.FileDialogFilter java.lang.String convert(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer java.awt.FileDialog access$100(sun.awt.X11.GtkFileDialogPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer java.awt.FileDialog access$100(sun.awt.X11.GtkFileDialogPeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void access$000(sun.awt.X11.GtkFileDialogPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void setDirectory(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void setDirectory(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void setFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void setFile(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void setFileInternal(java.lang.String, java.lang.String[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void setFilenameFilter(java.io.FilenameFilter) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void setFilenameFilter(java.io.FilenameFilter)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow java.awt.Component add(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.InfoWindow void access$101(sun.awt.X11.InfoWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow void show(java.awt.Point, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.1 java.awt.Insets getInsets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.awt.Image access$1100(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.awt.Image access$1100(sun.awt.X11.InfoWindow.Balloon)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.awt.Panel access$700(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.awt.Panel access$700(sun.awt.X11.InfoWindow.Balloon)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.lang.Object access$1200(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.lang.Object access$1200(sun.awt.X11.InfoWindow.Balloon)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.InfoWindow.Balloon.Displayer access$900(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.InfoWindow.Balloon.Displayer access$900(sun.awt.X11.InfoWindow.Balloon)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.InfoWindow.Balloon.LiveArguments access$1000(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.InfoWindow.Balloon.LiveArguments access$1000(sun.awt.X11.InfoWindow.Balloon)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.XTrayIconPeer.IconCanvas access$800(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.XTrayIconPeer.IconCanvas access$800(sun.awt.X11.InfoWindow.Balloon)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon void _display(java.lang.String, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon void _display(java.lang.String, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon void access$1300(sun.awt.X11.InfoWindow.Balloon, java.lang.String, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon void access$1300(sun.awt.X11.InfoWindow.Balloon, java.lang.String, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon void access$1300(sun.awt.X11.InfoWindow.Balloon, java.lang.String, java.lang.String, java.lang.String) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon.2 void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon.ActionPerformer ActionPerformer(sun.awt.X11.InfoWindow.Balloon, sun.awt.X11.InfoWindow.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon.ActionPerformer void mouseClicked(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Closer Closer(sun.awt.X11.InfoWindow, sun.awt.X11.InfoWindow.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip boolean access$500(sun.awt.X11.InfoWindow.Tooltip, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip boolean access$500(sun.awt.X11.InfoWindow.Tooltip, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip boolean isPointerOverTrayIcon(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip java.awt.Label access$400(sun.awt.X11.InfoWindow.Tooltip) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip java.awt.Label access$400(sun.awt.X11.InfoWindow.Tooltip)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip sun.awt.X11.InfoWindow.Tooltip.LiveArguments access$300(sun.awt.X11.InfoWindow.Tooltip) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip sun.awt.X11.InfoWindow.Tooltip.LiveArguments access$300(sun.awt.X11.InfoWindow.Tooltip)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip void access$200(sun.awt.X11.InfoWindow.Tooltip) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper boolean doWheelScroll(sun.awt.X11.XVerticalScrollbar, sun.awt.X11.XHorizontalScrollbar, java.awt.event.MouseWheelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper boolean doWheelScroll(sun.awt.X11.XVerticalScrollbar, sun.awt.X11.XHorizontalScrollbar, java.awt.event.MouseWheelEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper boolean doWheelScroll(sun.awt.X11.XVerticalScrollbar, sun.awt.X11.XHorizontalScrollbar, java.awt.event.MouseWheelEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.ListHelper boolean isFocusedIndex(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper boolean isHSBVisible()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper boolean isInHorizSB(java.awt.Rectangle, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.ListHelper boolean isInVertSB(java.awt.Rectangle, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.ListHelper boolean isVSBVisible()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper sun.awt.X11.XHorizontalScrollbar getHSB()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper sun.awt.X11.XVerticalScrollbar getVSB()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper void end()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper void handleVSBEvent(java.awt.event.MouseEvent, java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void handleVSBEvent(java.awt.event.MouseEvent, java.awt.Rectangle, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void home()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper void notifyValue(sun.awt.X11.XScrollbar, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintHSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintHSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintHSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintHSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItem(java.awt.Graphics, java.awt.Color[], java.lang.String, int, int, int, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItem(java.awt.Graphics, java.awt.Color[], java.lang.String, int, int, int, int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItems(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItems(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItems(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItems(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItems(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintVSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintVSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintVSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void repaintScrollbarRequest(sun.awt.X11.XScrollbar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.MWMConstants MWMConstants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifColorUtilities MotifColorUtilities()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifColorUtilities void loadMotifDefaultColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifColorUtilities void loadSystemColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifColorUtilities void loadSystemColorsForCDE(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants MotifDnDConstants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants int getIndexForTargetList(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants int getJavaActionsForMotifActions(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants int getMotifActionsForJavaActions(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants sun.misc.Unsafe access$000()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants void putTargetListTable(long, long[][]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants.Swapper Swapper()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants.Swapper int swap(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants.Swapper short swap(short)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol MotifDnDDragSourceProtocol(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol boolean processClientMessage(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol boolean processProxyModeEvent(sun.awt.X11.XClientMessageEvent, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol boolean processProxyModeEvent(sun.awt.X11.XClientMessageEvent, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;false;null,_-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol java.lang.String getProtocolName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol sun.awt.X11.XDragSourceProtocol createInstance(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol sun.awt.X11.XDragSourceProtocol createInstance(sun.awt.X11.XDragSourceProtocolListener)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol void initializeDragImpl(int, java.awt.datatransfer.Transferable, java.util.Map, long[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol MotifDnDDropTargetProtocol(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean forwardEventToEmbedded(long, long, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean isDragOverComponent()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean isXEmbedSupported()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processClientMessageImpl(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processDragMotion(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processDragMotion(sun.awt.X11.XClientMessageEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processDropStart(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processTopLevelEnter(sun.awt.X11.XClientMessageEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processTopLevelLeave(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol int getMessageType(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol java.lang.String getProtocolName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol long getSourceWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol sun.awt.X11.XDropTargetProtocol createInstance(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol sun.awt.X11.XDropTargetProtocol createInstance(sun.awt.X11.XDropTargetProtocolListener)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol void notifyProtocolListener(sun.awt.X11.XWindow, int, int, int, int, sun.awt.X11.XClientMessageEvent, int) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol void sendEnterMessageToToplevel(long, sun.awt.X11.XClientMessageEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol void sendLeaveMessageToToplevel(long, sun.awt.X11.XClientMessageEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native Native()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getByteSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getCard32Size()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getIntSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getLongSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getShortSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getUByteSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getUIntSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getUShortSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native int getWindowSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Native long card32ToData(long[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native long toData(byte[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native long toData(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native long toData(long[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native long toData(short[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native long toUData(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native long toUData(long[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native long toUData(short[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.Native void put(long, long[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Native void putLong(long, java.util.Vector) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Native void putLongReverse(long, java.util.Vector) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Native.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.PropMwmHints int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.PropMwmHints int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.PropMwmHints java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.PropMwmHints java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.PropMwmHints java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.PropMwmHints long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.PropMwmHints sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Screen int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Screen int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Screen java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Screen java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Screen java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Screen long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Screen sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ScreenFormat int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ScreenFormat int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ScreenFormat java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ScreenFormat java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ScreenFormat java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ScreenFormat long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.ScreenFormat sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Separator void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Visual int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Visual int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Visual java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Visual java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Visual java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Visual long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.Visual sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(java.awt.Point, java.awt.Dimension, java.awt.Insets, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(java.awt.Point, java.awt.Dimension, java.awt.Insets, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(java.awt.Rectangle, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(java.awt.Rectangle, java.awt.Insets, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.WindowDimensions boolean isClientSizeSet()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions java.awt.Point getLocation()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions java.awt.Rectangle getClientRect()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions java.awt.Rectangle getScreenBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions void setClientSize(java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions void setInsets(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter WindowPropertyGetter(long, sun.awt.X11.XAtom, long, long, boolean, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter WindowPropertyGetter(long, sun.awt.X11.XAtom, long, long, boolean, sun.awt.X11.XAtom) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter WindowPropertyGetter(long, sun.awt.X11.XAtom, long, long, boolean, sun.awt.X11.XAtom) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter boolean isCachingSupported()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter boolean isDisposed()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter boolean isExecuted()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAWTFormatter java.lang.String format(java.util.logging.LogRecord) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAWTFormatter java.lang.String format(java.util.logging.LogRecord)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAWTLookAndFeel void initComponentDefaults(javax.swing.UIDefaults) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAWTXSettings void ownerChanged(int, sun.awt.X11.XMSelection, long, long, long) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XAWTXSettings void ownerDeath(int, sun.awt.X11.XMSelection, long) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XAWTXSettings void selectionChanged(int, sun.awt.X11.XMSelection, long, sun.awt.X11.XPropertyEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XAWTXSettings void selectionChanged(int, sun.awt.X11.XMSelection, long, sun.awt.X11.XPropertyEvent) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XAnyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAnyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAnyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAnyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAnyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAnyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAnyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XArc int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XArc int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XArc java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XArc java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XArc java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XArc long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XArc sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XAtom boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAtom int getAtomSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAtom int hashCode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAtom java.lang.String asString(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom long getAtom()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAtom long getCard32Property(sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom long toData(sun.awt.X11.XAtom[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom sun.awt.X11.XAtomList getAtomListPropertyList(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom sun.awt.X11.XAtomList getAtomListPropertyList(sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom sun.awt.X11.XAtomList getAtomListPropertyList(sun.awt.X11.XBaseWindow)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom sun.awt.X11.XAtom[] getAtomListProperty(sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void DeleteProperty(sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void register(sun.awt.X11.XAtom) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomData(long, long, byte[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(long, sun.awt.X11.XAtomList) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(long, sun.awt.X11.XAtom[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XAtomList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XAtomList) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XAtom[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XAtom[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setCard32Property(sun.awt.X11.XBaseWindow, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setWindowProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setWindowProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XBaseWindow) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList XAtomList(sun.awt.X11.XAtom[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList sun.awt.X11.XAtomList subset(int, java.util.Map&lt;java.lang.Integer,sun.awt.X11.XAtom&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList void addAll(sun.awt.X11.XAtomList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList void init(sun.awt.X11.XAtom[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAwtState XAwtState()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XAwtState boolean isManualGrab()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Color getBackgroundColor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Color getDarkShadowColor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Color getDisabledColor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Color getForegroundColor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Color getLightShadowColor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Color getSelectedColor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowAbove(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowAbove(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowAbove(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowBelow(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowBelow(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowBelow(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowLeft(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowLeft(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowLeft(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowRight(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowRight(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowRight(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowToScreen(java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowToScreen(java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowToScreen(java.awt.Dimension, java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.lang.Object getMenuTreeLock()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow sun.awt.X11.XMenuPeer getShowingSubmenu()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void access$000(sun.awt.X11.XBaseMenuWindow, sun.awt.X11.XMenuPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void addItem(java.awt.MenuItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void doHandleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void doHandleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void doHandleJavaPaintEvent(java.awt.event.PaintEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void reloadItems(java.util.Vector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow.MappingData sun.awt.X11.XMenuItemPeer[] getItems()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow boolean isDisposed()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow boolean isEventDisabled(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow boolean isGrabbedEvent(sun.awt.X11.XEvent, sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow boolean isGrabbedEvent(sun.awt.X11.XEvent, sun.awt.X11.XBaseWindow) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow boolean isMapped()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow boolean isVisible()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow int getHeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow int getWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow int getX()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow int getY()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Dimension getSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Point toGlobal(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Point toLocal(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Rectangle toGlobal(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Rectangle toGlobal(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.lang.Object getStateLock()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.util.Set&lt;java.lang.Long&gt; getChildren()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow long getContentWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow long getWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow sun.awt.X11.XBaseWindow getParentWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow sun.awt.X11.XCreateWindowParams getDelayedParams()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void checkParams(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void create(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void dispatchToWindow(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleCreateNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleDestroyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleExposeEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleExposeEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleKeyPress(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleKeyPress(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleKeyRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleKeyRelease(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleMapNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleMotionNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleMotionNotify(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleUnmapNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleVisibilityEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleVisibilityEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleXCrossingEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleXCrossingEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void init(long, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void init(long, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void instantPreInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void postInit()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void preInit()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void setWMClass(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void setWMHints(sun.awt.X11.XWMHints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void ungrabInputImpl()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void xSetBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow.StateLock StateLock()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XButtonEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XButtonEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XButtonEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XButtonEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XButtonEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer XButtonPeer(java.awt.Button) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paint(java.awt.Graphics, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paint(java.awt.Graphics, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintButtonPressed(java.awt.Graphics, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintButtonPressed(java.awt.Graphics, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintFocus(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintText(java.awt.Graphics, java.awt.Component, java.awt.Rectangle, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintText(java.awt.Graphics, java.awt.Component, java.awt.Rectangle, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintText(java.awt.Graphics, java.awt.Component, java.awt.Rectangle, java.lang.String) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCanvasPeer XCanvasPeer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCanvasPeer boolean doEraseBackground()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCanvasPeer boolean shouldFocusOnClick()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCanvasPeer java.awt.GraphicsConfiguration getAppropriateGraphicsConfiguration(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XCanvasPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChar2b int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChar2b int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChar2b java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChar2b java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChar2b java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChar2b long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChar2b sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCharStruct int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCharStruct int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCharStruct java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCharStruct java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCharStruct java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCharStruct long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCharStruct sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxMenuItemPeer void access$000(sun.awt.X11.XCheckboxMenuItemPeer, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer XCheckboxPeer(java.awt.Checkbox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer int getCheckboxSize(java.awt.FontMetrics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void keyPressed(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void keyReleased(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void keyReleased(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void keyTyped(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void keyTyped(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void mouseClicked(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void mouseEntered(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void mouseExited(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void mouseReleased(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintFocus(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintRadioButton(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintText(java.awt.Graphics, java.awt.Rectangle, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintText(java.awt.Graphics, java.awt.Rectangle, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintText(java.awt.Graphics, java.awt.Rectangle, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void setLabel(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer XChoicePeer(java.awt.Choice) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean access$500(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean access$500(sun.awt.X11.XChoicePeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean access$502(sun.awt.X11.XChoicePeer, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean access$502(sun.awt.X11.XChoicePeer, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,false-&gt;false;_,true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean handleMouseEventByChoice(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean handlesWheelScrolling()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean isMouseEventInChoice(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean isUnfurled()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer java.awt.Component access$300(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer java.awt.Component access$300(sun.awt.X11.XChoicePeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.ListHelper access$200(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.ListHelper access$200(sun.awt.X11.XChoicePeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.XChoicePeer.UnfurledChoice access$700(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.XChoicePeer.UnfurledChoice access$700(sun.awt.X11.XChoicePeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.XChoicePeerListener access$400(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.XChoicePeerListener access$400(sun.awt.X11.XChoicePeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.util.logging.PlatformLogger access$600()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void keyPressed(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void layout()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void mouseDragged(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void paintFocus(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice UnfurledChoice(sun.awt.X11.XChoicePeer, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean access$000(sun.awt.X11.XChoicePeer.UnfurledChoice, java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean access$000(sun.awt.X11.XChoicePeer.UnfurledChoice, java.awt.event.MouseEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean access$100(sun.awt.X11.XChoicePeer.UnfurledChoice, java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean access$100(sun.awt.X11.XChoicePeer.UnfurledChoice, java.awt.event.MouseEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean isMouseEventInside(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean isMouseInListArea(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice java.awt.Point toLocalCoords(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice java.awt.Rectangle placeOnScreen()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void handleConfigureNotifyEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void handleMapNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void handleMapNotifyEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void handleUnmapNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void handleUnmapNotifyEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void trackMouse(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCirculateEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCirculateEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCirculateEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCirculateEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCirculateEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCirculateEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCirculateEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCirculateRequestEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCirculateRequestEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCirculateRequestEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCirculateRequestEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCirculateRequestEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCirculateRequestEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCirculateRequestEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClassHint int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClassHint int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClassHint java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClassHint java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClassHint java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClassHint long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClassHint sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClientMessageEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClientMessageEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClientMessageEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClientMessageEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClientMessageEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClientMessageEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClientMessageEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard java.awt.datatransfer.Transferable getContents(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XClipboard java.lang.Object access$400()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClipboard java.util.Map access$200()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClipboard long getID()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClipboard void access$300(sun.awt.X11.XClipboard) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard void access$600(sun.awt.X11.XClipboard, sun.awt.X11.XSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard void access$600(sun.awt.X11.XClipboard, sun.awt.X11.XSelectionEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard void checkChange(sun.awt.X11.XSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard.CheckChangeTimerTask CheckChangeTimerTask()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClipboard.CheckChangeTimerTask CheckChangeTimerTask(sun.awt.X11.XClipboard.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XClipboard.CheckChangeTimerTask CheckChangeTimerTask(sun.awt.X11.XClipboard.1)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClipboard.SelectionNotifyHandler SelectionNotifyHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClipboard.SelectionNotifyHandler SelectionNotifyHandler(sun.awt.X11.XClipboard.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XClipboard.SelectionNotifyHandler SelectionNotifyHandler(sun.awt.X11.XClipboard.1)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XClipboard.SelectionNotifyHandler void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XColor int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XColor int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XColor java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XColor java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XColor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XColor long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XColor sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XColormapEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XColormapEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XColormapEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XColormapEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XColormapEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XColormapEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XColormapEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer XComponentPeer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean canDetermineObscurity()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean handlesWheelScrolling()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean hasFocus()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean isEnabled()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean isInitialReshape()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean isPaintPending()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean rejectFocusRequestHelper(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean updateGraphicsData(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer int[] getRGBvals(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer int[] getRGBvals(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.BufferCapabilities getBackBufferCaps()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.Color getPeerBackground()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.Color getPeerForeground()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.Color[] getGUIcolors()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.Dimension getPeerSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.Font getPeerFont()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.Image createImage(java.awt.image.ImageProducer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.Insets getInsets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.awt.image.VolatileImage createVolatileImage(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.lang.Class access$000()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer java.lang.String operationToString(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void addDropTarget(java.awt.dnd.DropTarget) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void addTree(java.util.Collection, java.util.Set, java.awt.Container) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void beginValidate()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void coalescePaintEvent(java.awt.event.PaintEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DOval(java.awt.Graphics, java.awt.Color, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DOval(java.awt.Graphics, java.awt.Color, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DOval(java.awt.Graphics, java.awt.Color[], int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DOval(java.awt.Graphics, java.awt.Color[], int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DRect(java.awt.Graphics, java.awt.Color, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DRect(java.awt.Graphics, java.awt.Color, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DRect(java.awt.Graphics, java.awt.Color[], int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DRect(java.awt.Graphics, java.awt.Color[], int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void drawMotif3DRect(java.awt.Graphics, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void drawScrollbar(java.awt.Graphics, java.awt.Color, int, int, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void drawScrollbar(java.awt.Graphics, java.awt.Color, int, int, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void endValidate()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleF10JavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaFocusEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaInputMethodEvent(java.awt.event.InputMethodEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaInputMethodEvent(java.awt.event.InputMethodEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaKeyEvent(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaMouseWheelEvent(java.awt.event.MouseWheelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaMouseWheelEvent(java.awt.event.MouseWheelEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaWindowFocusEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaWindowFocusEvent(java.awt.AWTEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void layout()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void paint(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void removeDropTarget(java.awt.dnd.DropTarget) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void reparent(java.awt.peer.ContainerPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void updateMotifColors(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComposeStatus int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComposeStatus int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComposeStatus java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComposeStatus java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComposeStatus java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComposeStatus long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XComposeStatus sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XConfigureEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XConfigureEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XConfigureEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XConfigureEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XConfigureEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XConfigureEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XConfigureEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XConfigureRequestEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XConfigureRequestEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XConfigureRequestEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XConfigureRequestEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XConfigureRequestEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XConfigureRequestEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XConfigureRequestEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XConstants XConstants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XContentWindow XContentWindow(sun.awt.X11.XDecoratedPeer, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow java.lang.String getWMName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XContentWindow java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow sun.awt.X11.XContentWindow createContent(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow sun.awt.X11.XContentWindow createContent(sun.awt.X11.XDecoratedPeer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow void handleResize(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow void setContentBounds(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams XCreateWindowParams(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams sun.awt.X11.XCreateWindowParams add(java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams sun.awt.X11.XCreateWindowParams add(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams sun.awt.X11.XCreateWindowParams add(java.lang.Object, long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams sun.awt.X11.XCreateWindowParams delete(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams sun.awt.X11.XCreateWindowParams putIfNull(java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams sun.awt.X11.XCreateWindowParams putIfNull(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams sun.awt.X11.XCreateWindowParams putIfNull(java.lang.Object, long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams void init(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCrossingEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCrossingEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCrossingEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCrossingEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCrossingEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCrossingEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCrossingEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCursorFontConstants XCursorFontConstants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XCustomCursor XCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCustomCursor XCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCustomCursor java.awt.Dimension getBestCursorSize(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCustomCursor void createCursor(byte[], byte[], int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XCustomCursor void createCursor(byte[], byte[], int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer XDataTransferer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer boolean isFileFormat(long)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer boolean isLocaleDependentTextFormat(long)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer boolean isMimeFormat(long, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.io.ByteArrayOutputStream convertFileListToBytes(java.util.ArrayList&lt;java.lang.String&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.lang.String getCharsetForTextFormat(java.lang.Long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.lang.String getDefaultUnicodeEncoding()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.net.URI[] dragQueryURIs(java.io.InputStream, byte[], long, java.awt.datatransfer.Transferable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.net.URI[] dragQueryURIs(java.io.InputStream, byte[], long, java.awt.datatransfer.Transferable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.util.List getPlatformMappingsForFlavor(java.awt.datatransfer.DataFlavor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.util.List getPlatformMappingsForFlavor(java.awt.datatransfer.DataFlavor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.util.List getPlatformMappingsForNative(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.util.List getPlatformMappingsForNative(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer sun.awt.datatransfer.ToolkitThreadBlockedHandler getToolkitThreadBlockedHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer XDecoratedPeer(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer boolean isInitialReshape()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer boolean isMaximized()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer boolean isNull(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer boolean isNull(java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer int getDecorations()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer int getFunctions()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer int getInputMethodHeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets copy(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets copy(java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets difference(java.awt.Insets, java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets difference(java.awt.Insets, java.awt.Insets) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets difference(java.awt.Insets, java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets getInsets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets getWMSetInsets(sun.awt.X11.XAtom) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer long getShell()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer sun.awt.X11.WindowDimensions getDimensions()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer sun.awt.X11.XFocusProxyWindow createFocusProxy()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer sun.awt.X11.XFocusProxyWindow getFocusProxy()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void checkShellRect(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void checkShellRectSize(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void dumpWindow(java.lang.String, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleCorrectInsets(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleFocusEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleMoved(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleReparentNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleWmTakeFocus(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void reshape(sun.awt.X11.WindowDimensions, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void setShellBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void setShellPosition(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void setShellSize(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void updateSizeHints(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer boolean isSupported(java.awt.Desktop.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer boolean isSupported(java.awt.Desktop.Action)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void browse(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void edit(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void launch(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void mail(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void open(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void print(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDestroyWindowEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDestroyWindowEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDestroyWindowEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDestroyWindowEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDestroyWindowEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDestroyWindowEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDestroyWindowEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDialogPeer int getDecorations()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDialogPeer int getFunctions()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDialogPeer void blockWindows(java.util.List&lt;java.awt.Window&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDialogPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDConstants XDnDConstants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDnDConstants int getJavaActionForXDnDAction(long)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDnDConstants long getXDnDActionForJavaAction(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol XDnDDragSourceProtocol(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processClientMessage(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processProxyModeEvent(sun.awt.X11.XClientMessageEvent, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processXdndFinished(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processXdndFinished(sun.awt.X11.XClientMessageEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processXdndStatus(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processXdndStatus(sun.awt.X11.XClientMessageEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol java.lang.String getProtocolName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol sun.awt.X11.XDragSourceProtocol createInstance(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol sun.awt.X11.XDragSourceProtocol createInstance(sun.awt.X11.XDragSourceProtocolListener)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol void initializeDragImpl(int, java.awt.datatransfer.Transferable, java.util.Map, long[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol void sendEnterMessage(long[], int, int, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol XDnDDropTargetProtocol(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean isDragOverComponent()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean isXEmbedSupported()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processClientMessageImpl(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processXdndDrop(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processXdndEnter(sun.awt.X11.XClientMessageEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processXdndLeave(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processXdndPosition(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol int getMessageType(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol java.lang.String getProtocolName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol long getSourceWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol sun.awt.X11.XDropTargetProtocol createInstance(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol sun.awt.X11.XDropTargetProtocol createInstance(sun.awt.X11.XDropTargetProtocolListener)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void adjustEventForForwarding(sun.awt.X11.XClientMessageEvent, sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void adjustEventForForwarding(sun.awt.X11.XClientMessageEvent, sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void notifyProtocolListener(sun.awt.X11.XWindow, int, int, int, sun.awt.X11.XClientMessageEvent, int) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void sendEnterMessageToToplevel(long, sun.awt.X11.XClientMessageEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void sendLeaveMessageToToplevel(long, sun.awt.X11.XClientMessageEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDragAndDropProtocols XDragAndDropProtocols()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragAndDropProtocols sun.awt.X11.XDragSourceProtocol getDragSourceProtocol(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDragAndDropProtocols sun.awt.X11.XDragSourceProtocol getDragSourceProtocol(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDragAndDropProtocols sun.awt.X11.XDropTargetProtocol getDropTargetProtocol(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDragAndDropProtocols sun.awt.X11.XDropTargetProtocol getDropTargetProtocol(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer boolean needsBogusExitBeforeDrop()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer boolean processProxyModeEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer long getProxyModeSourceWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer sun.awt.X11.XDragSourceProtocolListener getXDragSourceProtocolListener()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer void processDrop(sun.awt.X11.XButtonEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer void setNativeCursor(long, java.awt.Cursor, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer void throwGrabFailureException(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer void updateTargetWindow(sun.awt.X11.XMotionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDragSourceProtocol XDragSourceProtocol(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDragSourceProtocol int getTargetProtocolVersion()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragSourceProtocol long getTargetProxyWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragSourceProtocol long getTargetWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragSourceProtocol sun.awt.X11.XDragSourceProtocolListener getProtocolListener()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragSourceProtocol.TargetWindowInfo int getProtocolVersion()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDragSourceProtocol.TargetWindowInfo long getProxyWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer boolean processSunDropTargetEvent(sun.awt.dnd.SunDropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer int access$000(sun.awt.X11.XDropTargetContextPeer, java.awt.Component, int, int, int, int, long[], long, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer sun.awt.X11.XDropTargetContextPeer getPeer(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer sun.awt.X11.XDropTargetProtocolListener getXDropTargetProtocolListener()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void cleanup()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void processDropMessage(sun.awt.dnd.SunDropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void processEnterMessage(sun.awt.dnd.SunDropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void processExitMessage(sun.awt.dnd.SunDropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void processMotionMessage(sun.awt.dnd.SunDropTargetEvent, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer.XDropTargetProtocolListenerImpl XDropTargetProtocolListenerImpl()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer.XDropTargetProtocolListenerImpl sun.awt.X11.XDropTargetProtocolListener getInstance()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer.XDropTargetProtocolListenerImpl void handleDropTargetNotification(sun.awt.X11.XWindow, int, int, int, int, long[], long, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetEventProcessor boolean doProcessEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetEventProcessor boolean processEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol XDropTargetProtocol(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol boolean forwardClientMessageToToplevel(long, sun.awt.X11.XClientMessageEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol boolean processClientMessage(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol sun.awt.X11.XDropTargetProtocolListener getProtocolListener()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol void adjustEventForForwarding(sun.awt.X11.XClientMessageEvent, sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol void adjustEventForForwarding(sun.awt.X11.XClientMessageEvent, sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol void adjustEventForForwarding(sun.awt.X11.XClientMessageEvent, sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol void postProcessClientMessage(sun.awt.X11.XClientMessageEvent, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry boolean isOverriden()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry int getVersion()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry long getProxy()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry sun.awt.X11.XDropTargetRegistry getRegistry()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry sun.awt.X11.XDropTargetRegistry.EmbeddedDropSiteEntry registerEmbedderDropSite(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry void access$000(sun.awt.X11.XDropTargetRegistry, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry void registerProtocols(long, boolean, java.util.List&lt;sun.awt.X11.XDropTargetProtocol&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry void unregisterEmbedderDropSite(long, sun.awt.X11.XDropTargetRegistry.EmbeddedDropSiteEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry.EmbeddedDropSiteEntry EmbeddedDropSiteEntry(long, long, java.util.List&lt;sun.awt.X11.XDropTargetProtocol&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry.EmbeddedDropSiteEntry java.util.List&lt;sun.awt.X11.XDropTargetProtocol&gt; getSupportedProtocols()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry.EmbeddedDropSiteEntry long getEventMask()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry.EmbeddedDropSiteEntry long getRoot()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer XEmbedCanvasPeer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer boolean isApplicationActive()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer boolean isXEmbedActive()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer java.awt.GraphicsConfiguration getAppropriateGraphicsConfiguration(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer java.awt.Window getTopLevel(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer sun.util.logging.PlatformLogger access$000()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void canvasFocusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void modalityPopped(sun.awt.ModalityEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void modalityPushed(sun.awt.ModalityEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void windowGainedFocus(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void windowLostFocus(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer.GrabbedKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer.GrabbedKey boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer.GrabbedKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer.GrabbedKey java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer.XEmbedDropTarget XEmbedDropTarget(sun.awt.X11.XEmbedCanvasPeer.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer.XEmbedDropTarget void addDropTargetListener(java.awt.dnd.DropTargetListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer.XEmbedServer void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxy long getHandle()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxy sun.awt.X11.XEmbeddingContainer getEmbeddingContainer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer XEmbedChildProxyPeer(sun.awt.X11.XEmbedChildProxy) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean canDetermineObscurity()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean handlesWheelScrolling()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean isObscured()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean isReparentSupported()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;false;_,_,_,!null-&gt;false;_,_,_,null-&gt;false;null,_,_,_-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean simulateMotifRequestFocus(java.awt.Component, boolean, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean simulateMotifRequestFocus(java.awt.Component, boolean, boolean, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;true;_,_,false,_-&gt;true;_,_,true,_-&gt;true;_,false,_,_-&gt;true;_,true,_,_-&gt;true;null,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean updateGraphicsData(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer boolean updateGraphicsData(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Dimension getPreferredSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.FontMetrics getFontMetrics(java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.FontMetrics getFontMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Graphics getGraphics()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.GraphicsConfiguration getGraphicsConfiguration()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Image createImage(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Image createImage(java.awt.image.ImageProducer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Image createImage(java.awt.image.ImageProducer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Image getBackBuffer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Point getLocationOnScreen()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.Window getTopLevel(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer java.awt.image.VolatileImage createVolatileImage(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void applyShape(sun.java2d.pipe.Region) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void applyShape(sun.java2d.pipe.Region)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void coalescePaintEvent(java.awt.event.PaintEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void coalescePaintEvent(java.awt.event.PaintEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void createBuffers(int, java.awt.BufferCapabilities) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void createBuffers(int, java.awt.BufferCapabilities)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void destroyBuffers()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void disable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void enable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void flip(int, int, int, int, java.awt.BufferCapabilities.FlipContents) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void flip(int, int, int, int, java.awt.BufferCapabilities.FlipContents)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void handleConfigureNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void layout()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void paint(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void print(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void repaint(long, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void reparent(java.awt.peer.ContainerPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void reparent(java.awt.peer.ContainerPeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setBackground(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setBackground(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setBoundsOperation(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setEnabled(boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setFont(java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setFont(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setForeground(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setForeground(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setZOrder(java.awt.peer.ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void setZOrder(java.awt.peer.ComponentPeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void updateCursorImmediately()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper boolean isActive()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper boolean isApplicationActive()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper long getEmbedder(sun.awt.X11.XWindowPeer, sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper long getEmbedder(sun.awt.X11.XWindowPeer, sun.awt.X11.XClientMessageEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper long getX11KeySym(java.awt.AWTKeyStroke) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper long getX11Mods(java.awt.AWTKeyStroke) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper long getX11Mods(java.awt.AWTKeyStroke)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper sun.awt.X11.XEmbeddedFramePeer access$000(sun.awt.X11.XEmbedClientHelper) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper sun.awt.X11.XEmbeddedFramePeer access$000(sun.awt.X11.XEmbedClientHelper)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper void handleReparentNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedHelper int getModifiers(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbedHelper java.lang.String XEmbedMessageToString(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedHelper java.lang.String XEmbedMessageToString(sun.awt.X11.XClientMessageEvent)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedHelper java.lang.String focusIdToString(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedHelper java.lang.String msgidToString(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedServerTester XEmbedServerTester(java.awt.Rectangle[], long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedServerTester sun.awt.X11.XEmbedServerTester getTester(java.awt.Rectangle[], long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedServerTester sun.awt.X11.XEmbedServerTester getTester(java.awt.Rectangle[], long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedServerTester void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFrame boolean traverseOut(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;true;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer int getHeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer int getWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer java.awt.Dimension getSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer java.awt.Rectangle getBoundsPrivate()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer java.lang.String getWMName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer long getParentWindowHandle()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void registerAccelerator(java.awt.AWTKeyStroke) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void setMaximizedBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void unregisterAccelerator(java.awt.AWTKeyStroke) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void updateMinimumSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer java.awt.Component createChildProxy(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void childResized(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void childResized(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void install(sun.awt.X11.XWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XErrorEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XErrorEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XErrorEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler XErrorHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.IgnoreBadWindowHandler IgnoreBadWindowHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.IgnoreBadWindowHandler int handleError(long, sun.awt.X11.XErrorEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.IgnoreBadWindowHandler sun.awt.X11.XErrorHandler.IgnoreBadWindowHandler getInstance()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.VerifyChangePropertyHandler VerifyChangePropertyHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.VerifyChangePropertyHandler int handleError(long, sun.awt.X11.XErrorEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.VerifyChangePropertyHandler sun.awt.X11.XErrorHandler.VerifyChangePropertyHandler getInstance()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.XBaseErrorHandler XBaseErrorHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XAnyEvent get_xany()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XButtonEvent get_xbutton()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XCirculateEvent get_xcirculate()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XCirculateRequestEvent get_xcirculaterequest()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XClientMessageEvent get_xclient()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XColormapEvent get_xcolormap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XConfigureEvent get_xconfigure()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XConfigureRequestEvent get_xconfigurerequest()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XCreateWindowEvent get_xcreatewindow()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XCrossingEvent get_xcrossing()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XDestroyWindowEvent get_xdestroywindow()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XErrorEvent get_xerror()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XExposeEvent get_xexpose()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XFocusChangeEvent get_xfocus()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XGraphicsExposeEvent get_xgraphicsexpose()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XGravityEvent get_xgravity()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XKeyEvent get_xkey()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XKeymapEvent get_xkeymap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XMapEvent get_xmap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XMapRequestEvent get_xmaprequest()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XMappingEvent get_xmapping()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XMotionEvent get_xmotion()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XNoExposeEvent get_xnoexpose()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XPropertyEvent get_xproperty()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XReparentEvent get_xreparent()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XResizeRequestEvent get_xresizerequest()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XSelectionClearEvent get_xselectionclear()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XSelectionEvent get_xselection()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XSelectionRequestEvent get_xselectionrequest()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XUnmapEvent get_xunmap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEvent sun.awt.X11.XVisibilityEvent get_xvisibility()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExposeEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExposeEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExposeEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExposeEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExposeEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExposeEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExposeEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExtCodes int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExtCodes int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExtCodes java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExtCodes java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExtCodes java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExtCodes long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExtCodes sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExtData int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExtData int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExtData java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExtData java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExtData java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XExtData long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XExtData sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer boolean dispatchKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer boolean updateDirectoryByUserAction(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer java.lang.String getFileName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer java.lang.String getFileName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer java.lang.String[] getDirList(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void addComponent(java.awt.Component, java.awt.GridBagLayout, java.awt.GridBagConstraints, int, int, int, int, java.awt.Container, int, int, int, java.awt.Insets) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void addComponent(java.awt.Component, java.awt.GridBagLayout, java.awt.GridBagConstraints, int, int, int, int, java.awt.Container, int, int, int, java.awt.Insets) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void addComponent(java.awt.Component, java.awt.GridBagLayout, java.awt.GridBagConstraints, int, int, int, int, java.awt.Container, int, int, int, java.awt.Insets) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void handleFilter(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void handleSelection(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void init(java.awt.FileDialog) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void itemStateChanged(java.awt.event.ItemEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void setDirectory(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void setFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void setFilterEntry(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void unfurledChoiceOpening(sun.awt.X11.ListHelper) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void updateMinimumSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer.2 java.awt.Dimension getPreferredSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer.3 void windowClosing(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XFocusChangeEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFocusChangeEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFocusChangeEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusChangeEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFocusChangeEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusChangeEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFocusChangeEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow XFocusProxyWindow(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow java.lang.String getWMName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow java.lang.String[] getWMClass()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow sun.awt.X11.XWindowPeer getOwner()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XFontPeer char getMissingGlyphCharacter()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontProp int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontProp int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontProp java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontProp java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontProp java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontProp long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontProp sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents sun.awt.X11.XRectangle get_max_ink_extent()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontSetExtents sun.awt.X11.XRectangle get_max_logical_extent()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontStruct int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontStruct int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontStruct java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontStruct java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontStruct java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontStruct long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFontStruct sun.awt.X11.XCharStruct get_max_bounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontStruct sun.awt.X11.XCharStruct get_min_bounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFontStruct sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer XFramePeer(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer boolean isMaximized()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFramePeer int access$000(sun.awt.X11.XFramePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer int access$000(sun.awt.X11.XFramePeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFramePeer int access$002(sun.awt.X11.XFramePeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer sun.awt.X11.XMenuBarPeer getMenubarPeer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XFramePeer void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer void setMaximizedBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XGCValues int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGCValues int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGCValues java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGCValues java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGCValues java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGCValues long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGCValues sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGlobalCursorManager java.awt.Component findComponentAt(java.awt.Container, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGlobalCursorManager java.awt.Cursor getCapableCursor(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XGlobalCursorManager java.awt.Cursor getCapableCursor(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XGlobalCursorManager java.awt.Point getLocationOnScreen(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGlobalCursorManager void setCursor(java.awt.Component, java.awt.Cursor, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XGraphicsExposeEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGraphicsExposeEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGraphicsExposeEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGraphicsExposeEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGraphicsExposeEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGraphicsExposeEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGraphicsExposeEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGravityEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGravityEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGravityEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGravityEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGravityEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGravityEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XGravityEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XHorizontalScrollbar java.awt.Rectangle getThumbArea()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XHostAddress int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XHostAddress int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XHostAddress java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XHostAddress java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XHostAddress java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XHostAddress long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XHostAddress sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMCallback int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMCallback int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMCallback java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMCallback java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMCallback java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMCallback long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMCallback sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTrigger int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTrigger int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTrigger java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTrigger java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTrigger java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTrigger long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTrigger sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTriggers int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTriggers int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTriggers java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTriggers java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTriggers java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTriggers long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMHotKeyTriggers sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditCaretCallbackStruct int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditCaretCallbackStruct int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditCaretCallbackStruct java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditCaretCallbackStruct java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditCaretCallbackStruct java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditCaretCallbackStruct long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditCaretCallbackStruct sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditDrawCallbackStruct int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditDrawCallbackStruct int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditDrawCallbackStruct java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditDrawCallbackStruct java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditDrawCallbackStruct java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditDrawCallbackStruct long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditDrawCallbackStruct sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditStateNotifyCallbackStruct int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditStateNotifyCallbackStruct int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditStateNotifyCallbackStruct java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditStateNotifyCallbackStruct java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditStateNotifyCallbackStruct java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditStateNotifyCallbackStruct long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMPreeditStateNotifyCallbackStruct sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStatusDrawCallbackStruct int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStatusDrawCallbackStruct int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStatusDrawCallbackStruct java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStatusDrawCallbackStruct java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStatusDrawCallbackStruct java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStatusDrawCallbackStruct long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStatusDrawCallbackStruct sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionCallbackStruct int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionCallbackStruct int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionCallbackStruct java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionCallbackStruct java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionCallbackStruct java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionCallbackStruct long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionCallbackStruct sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionText int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionText int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionText java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionText java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionText java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionText long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStringConversionText sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStyles int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStyles int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStyles java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStyles java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStyles java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMStyles long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMStyles sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMText int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMText int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMText java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMText java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMText java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMText long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMText sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMValuesList int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMValuesList int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMValuesList java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMValuesList java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMValuesList java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIMValuesList long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIMValuesList sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIconSize int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIconSize int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIconSize java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIconSize java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIconSize java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIconSize long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIconSize sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIconWindow int paddedwidth(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XIconWindow java.awt.Dimension calcIconSize(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIconWindow void instantPreInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIconWindow void setIconImages(java.util.List&lt;sun.awt.IconInfo&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XImage int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XImage int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XImage java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XImage java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XImage java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XImage long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XImage sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XInputMethod java.awt.Container getParent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XInputMethod long getXICFocus()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XInputMethod void notifyClientWindowChange(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XInputMethod void setInputMethodContext(java.awt.im.spi.InputMethodContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XInputMethod void setXICFocus(java.awt.peer.ComponentPeer, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XInputMethodDescriptor java.awt.im.spi.InputMethod createInputMethod()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyboardControl int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardControl int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardControl java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyboardControl java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardControl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyboardControl long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardControl sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyboardFocusManagerPeer XKeyboardFocusManagerPeer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardFocusManagerPeer boolean deliverFocus(java.awt.Component, java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XKeyboardFocusManagerPeer boolean deliverFocus(java.awt.Component, java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XKeyboardFocusManagerPeer boolean deliverFocus(java.awt.Component, java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_-&gt;true;_,!null,_,_,_,_-&gt;true;_,_,_,_,_,!null-&gt;true;_,_,_,_,_,null-&gt;true;_,_,_,false,_,_-&gt;true;_,_,_,true,_,_-&gt;true;_,_,false,_,_,_-&gt;true;_,_,true,_,_,_-&gt;true;_,null,_,_,_,_-&gt;true;null,_,_,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XKeyboardFocusManagerPeer java.awt.Component getCurrentFocusOwner()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardFocusManagerPeer java.awt.Window getCurrentFocusedWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardFocusManagerPeer sun.awt.X11.XKeyboardFocusManagerPeer getInstance()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardState int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardState int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardState java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyboardState java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardState java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeyboardState long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeyboardState sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeymapEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeymapEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeymapEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeymapEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeymapEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeymapEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeymapEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym XKeysym()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeysym boolean isKPEvent(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym int getJavaKeycodeOnly(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym int getLegacyJavaKeycodeOnly(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long getKeypadKeysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long getKeysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long xkeycode2keysym(sun.awt.X11.XKeyEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long xkeycode2keysym_noxkb(sun.awt.X11.XKeyEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long xkeycode2keysym_xkb(sun.awt.X11.XKeyEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long xkeycode2primary_keysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym sun.awt.X11.XKeysym.Keysym2JavaKeycode getJavaKeycode(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym void main(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XKeysym.Keysym2JavaKeycode int getJavaKeycode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XKeysym.Keysym2JavaKeycode int getKeyLocation()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XLabelPeer XLabelPeer(java.awt.Label) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XLabelPeer java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XLabelPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XLabelPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer XListPeer(java.awt.List) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer boolean handlesWheelScrolling()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer boolean hsbIsVisible(boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer boolean inVerticalScrollbar(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer boolean isSelected(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer boolean prePostMouseEvent(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XListPeer int getFocusIndex()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer int getItemHeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer int getItemWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer int getItemX()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer int getListWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer int posInSel(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer int[] getSelectedIndexes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer java.awt.Color getListBackground(java.awt.Color[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer java.awt.Color getListForeground(java.awt.Color[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer java.awt.Dimension minimumSize(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer java.awt.Rectangle getFocusRect()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer java.awt.Rectangle getHScrollBarRec()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer java.awt.Rectangle getVScrollBarRec()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer sun.util.logging.PlatformLogger access$200()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void keyPressed(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void notifyValue(sun.awt.X11.XScrollbar, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XListPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void repaintScrollbarRequest(sun.awt.X11.XScrollbar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XListPeer void trackMouseDraggedScroll(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter java.awt.Color getListBackground()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter java.awt.Color getListForeground()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void access$000(sun.awt.X11.XListPeer.ListPainter, java.awt.Graphics, int, int, int, java.awt.Rectangle, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void access$000(sun.awt.X11.XListPeer.ListPainter, java.awt.Graphics, int, int, int, java.awt.Rectangle, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void access$100(sun.awt.X11.XListPeer.ListPainter, java.awt.Graphics, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void access$100(sun.awt.X11.XListPeer.ListPainter, java.awt.Graphics, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paint(java.awt.Graphics, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paint(java.awt.Graphics, int, int, int, java.awt.Rectangle, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintBackground(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintFocus(java.awt.Graphics, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintScrollBar(sun.awt.X11.XScrollbar, java.awt.Graphics, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintScrollBar(sun.awt.X11.XScrollbar, java.awt.Graphics, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection boolean processClientMessage(sun.awt.X11.XEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection boolean processClientMessage(sun.awt.X11.XEvent, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XMSelection boolean processRootEvent(sun.awt.X11.XEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection boolean processRootEvent(sun.awt.X11.XEvent, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XMSelection int getNumberOfScreens()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMSelection java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMSelection java.util.Collection getListeners()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMSelection long getOwner(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMSelection sun.awt.X11.XAtom getAtom(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMSelection void dispatchOwnerChangedEvent(sun.awt.X11.XEvent, int, long, long, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMSelection void dispatchSelectionEvent(sun.awt.X11.XEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection.1 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMapEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMapEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMapEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMapEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMapEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMapEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMapEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMapRequestEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMapRequestEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMapRequestEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMapRequestEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMapRequestEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMapRequestEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMapRequestEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMappingEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMappingEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMappingEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMappingEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMappingEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMappingEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMappingEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer sun.awt.X11.XBaseMenuWindow getParentMenuWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer sun.awt.X11.XMenuBarPeer.MappingData map()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void addHelpMenu(java.awt.Menu) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void handleF10KeyPress(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void handleKeyPress(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void init(java.awt.Frame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void print(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer.MappingData int getDesiredHeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer java.awt.MenuItem getTarget()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer java.awt.Point getTextOrigin()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer sun.awt.X11.XBaseMenuWindow getContainer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer void dispose()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer void setFont(java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer void setLabel(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer.TextMetrics int getShortcutWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer.TextMetrics int getTextBaseline()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuItemPeer.TextMetrics java.awt.Dimension getTextDimension()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuPeer boolean isSeparator()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuPeer java.lang.String getShortcutText()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuPeer sun.awt.X11.XMenuWindow getMenuWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow XMenuWindow(sun.awt.X11.XMenuPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow java.awt.Dimension getCaptionSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow sun.awt.X11.XMenuPeer getMenuPeer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow sun.awt.X11.XMenuWindow.MappingData map()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow void paintCaption(java.awt.Graphics, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow void paintCaption(java.awt.Graphics, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow void paintCaption(java.awt.Graphics, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow.MappingData int getLeftMarkWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow.MappingData int getRightMarkOrigin()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow.MappingData int getShortcutOrigin()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow.MappingData java.awt.Dimension getDesiredSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow.MappingData java.awt.Rectangle getCaptionRect()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XModifierKeymap int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XModifierKeymap int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XModifierKeymap java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XModifierKeymap java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XModifierKeymap java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XModifierKeymap long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XModifierKeymap sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMotionEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMotionEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMotionEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMotionEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMotionEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMotionEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMotionEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer int mapDragOperationFromModifiers(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer void mouseClicked(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer void mouseEntered(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer void mouseMoved(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer void mouseReleased(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XMouseInfoPeer XMouseInfoPeer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XMouseInfoPeer boolean isWindowUnderMouse(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol boolean isStateChange(sun.awt.X11.XPropertyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XNETProtocol boolean isWMName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XNETProtocol boolean isWMStateNetHidden(sun.awt.X11.XWindowPeer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XNETProtocol int getState(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol int getStateImpl(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void requestState(sun.awt.X11.XWindow, sun.awt.X11.XAtom, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void requestState(sun.awt.X11.XWindow, sun.awt.X11.XAtom, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void requestState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setInitialState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setLayer(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setStateHelper(sun.awt.X11.XWindowPeer, sun.awt.X11.XAtom, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setWMIcons(sun.awt.X11.XWindowPeer, java.util.List&lt;sun.awt.IconInfo&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setWMIcons(sun.awt.X11.XWindowPeer, java.util.List&lt;sun.awt.IconInfo&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void unshadeKludge(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNoExposeEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XNoExposeEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XNoExposeEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNoExposeEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XNoExposeEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNoExposeEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XNoExposeEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMCharSetList int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMCharSetList int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMCharSetList java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMCharSetList java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMCharSetList java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMCharSetList long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMCharSetList sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMFontInfo int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMFontInfo int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMFontInfo java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMFontInfo java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMFontInfo java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMFontInfo long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMFontInfo sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMOrientation int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMOrientation int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMOrientation java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMOrientation java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMOrientation java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XOMOrientation long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XOMOrientation sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPanelPeer XPanelPeer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPanelPeer java.awt.GraphicsConfiguration getAppropriateGraphicsConfiguration(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XPanelPeer java.awt.Insets getInsets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPanelPeer void setForegroundForHierarchy(java.awt.Container, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPixmapFormatValues int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPixmapFormatValues int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPixmapFormatValues java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPixmapFormatValues java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPixmapFormatValues java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPixmapFormatValues long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPixmapFormatValues sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPoint int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPoint int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPoint java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPoint java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPoint java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPoint long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPoint sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer java.awt.Rectangle getWindowBounds(java.awt.Point, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer void handleKeyPress(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer void setLabel(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer void show(java.awt.Event) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPropertyCache XPropertyCache()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyCache boolean isCachingSupported()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyCache.PropertyCacheEntry int getDataLength()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyCache.PropertyCacheEntry int getFormat()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyCache.PropertyCacheEntry int getNumberOfItems()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyCache.PropertyCacheEntry long getBytesAfter()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyCache.PropertyCacheEntry long getData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPropertyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPropertyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XPropertyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XProtocol long checkAnchor(sun.awt.X11.XAtom, sun.awt.X11.XAtom) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XProtocol long checkAnchorImpl(sun.awt.X11.XAtom, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XProtocolConstants XProtocolConstants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XQueryTree boolean isDisposed()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XQueryTree boolean isExecuted()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRectangle int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRectangle int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRectangle java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRectangle java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRectangle java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRectangle long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRectangle sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRenderDirectFormat int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRenderDirectFormat int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRenderDirectFormat java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRenderDirectFormat java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRenderDirectFormat java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRenderDirectFormat long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRenderDirectFormat sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRenderPictFormat int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRenderPictFormat int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRenderPictFormat java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRenderPictFormat java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRenderPictFormat java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRenderPictFormat long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRenderPictFormat sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRenderPictFormat sun.awt.X11.XRenderDirectFormat get_direct()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRepaintArea void paintComponent(java.awt.Component, java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XRepaintArea void updateComponent(java.awt.Component, java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XReparentEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XReparentEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XReparentEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XReparentEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XReparentEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XReparentEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XReparentEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XResizeRequestEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XResizeRequestEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XResizeRequestEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XResizeRequestEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XResizeRequestEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XResizeRequestEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XResizeRequestEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRobotPeer int[] getRGBPixels(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRobotPeer int[] getRGBPixels(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRobotPeer void dispose()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRootWindow java.lang.String getWMName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRootWindow java.lang.String[] getWMClass()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XRootWindow void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer XScrollPanePeer(java.awt.ScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer boolean inHorizontalScrollbar(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer boolean inVerticalScrollbar(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer int getHScrollbarHeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer int getVScrollbarWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer java.awt.Insets getInsets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void notifyValue(sun.awt.X11.XScrollbar, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void paintComponent(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void repaintScrollbarRequest(sun.awt.X11.XScrollbar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void setUnitIncrement(java.awt.Adjustable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void setValue(java.awt.Adjustable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer.XScrollPaneContentWindow XScrollPaneContentWindow(java.awt.ScrollPane, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer.XScrollPaneContentWindow java.lang.String getWMName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar boolean needsRepaint()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar int getArrowAreaWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar int getBlockIncrement()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar int getMaximum()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar int getMinimum()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar int getUnitIncrement()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar int getValue()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar int getVisibleAmount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XScrollbar java.awt.Polygon createArrowShape(boolean, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbar java.awt.Rectangle calculateThumbRect()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbar java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbar void paint(java.awt.Graphics, java.awt.Color[], boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbar void paintArrows(java.awt.Graphics2D, java.awt.Color, java.awt.Color, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer XScrollbarPeer(java.awt.Scrollbar) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void notifyValue(sun.awt.X11.XScrollbar, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void repaintScrollbarRequest(sun.awt.X11.XScrollbar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XSegment int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSegment int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSegment java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSegment java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSegment java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSegment long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSegment sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection XSelection(sun.awt.X11.XAtom) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection boolean isOwner()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection long access$300()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection long[] getFormats(sun.awt.X11.WindowPropertyGetter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection sun.awt.X11.WindowPropertyGetter access$200()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection sun.awt.X11.WindowPropertyGetter access$202(sun.awt.X11.WindowPropertyGetter)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XSelection sun.awt.X11.XAtom access$400()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection sun.awt.X11.XAtom getSelectionAtom()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection void access$500(sun.awt.X11.XSelection, sun.awt.X11.XSelectionRequestEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void access$500(sun.awt.X11.XSelection, sun.awt.X11.XSelectionRequestEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void access$600(sun.awt.X11.XSelection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void handleSelectionRequest(sun.awt.X11.XSelectionRequestEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void validateDataGetter(sun.awt.X11.WindowPropertyGetter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void waitForSelectionNotify(sun.awt.X11.WindowPropertyGetter) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XSelection.IncrementalDataProvider void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection.IncrementalTransferHandler IncrementalTransferHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection.IncrementalTransferHandler IncrementalTransferHandler(sun.awt.X11.XSelection.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XSelection.IncrementalTransferHandler IncrementalTransferHandler(sun.awt.X11.XSelection.1)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection.IncrementalTransferHandler void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection.SelectionEventHandler SelectionEventHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection.SelectionEventHandler SelectionEventHandler(sun.awt.X11.XSelection.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XSelection.SelectionEventHandler SelectionEventHandler(sun.awt.X11.XSelection.1)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelection.SelectionEventHandler void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionClearEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionClearEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionClearEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionClearEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionClearEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionClearEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionClearEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionRequestEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionRequestEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionRequestEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionRequestEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionRequestEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelectionRequestEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSelectionRequestEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSetWindowAttributes int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSetWindowAttributes int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSetWindowAttributes java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSetWindowAttributes java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSetWindowAttributes java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSetWindowAttributes long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSetWindowAttributes sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSizeHints int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSizeHints int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSizeHints java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSizeHints java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSizeHints java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSizeHints long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSizeHints sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XStandardColormap int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XStandardColormap int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XStandardColormap java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XStandardColormap java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XStandardColormap java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XStandardColormap long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XStandardColormap sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer boolean isAvailable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer java.awt.Dimension getTrayIconSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer sun.awt.X11.XSystemTrayPeer getPeerInstance()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer void addTrayIcon(sun.awt.X11.XTrayIconPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer void ownerChanged(int, sun.awt.X11.XMSelection, long, long, long) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer void ownerDeath(int, sun.awt.X11.XMSelection, long) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer void selectionChanged(int, sun.awt.X11.XMSelection, long, sun.awt.X11.XPropertyEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer void selectionChanged(int, sun.awt.X11.XMSelection, long, sun.awt.X11.XPropertyEvent) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer void selectionChanged(int, sun.awt.X11.XMSelection, long, sun.awt.X11.XPropertyEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer XTextAreaPeer(java.awt.TextArea) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer boolean handlesWheelScrolling()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer boolean setTextImpl(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer java.awt.Dimension getMinimumSize(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextArea boolean hasFocus()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextArea void changedUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextArea void forwardFocusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextArea void forwardFocusLost(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextArea void insertUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextArea void removeUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextAreaUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextAreaUI javax.swing.text.Caret createCaret()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane AWTTextPane(sun.awt.X11.XTextAreaPeer, javax.swing.JTextArea, sun.awt.X11.XWindow, java.awt.Container) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane java.awt.Window getRealParent()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane java.awt.peer.ComponentPeer getPeer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane javax.swing.JScrollBar createHorizontalScrollBar()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane javax.swing.JScrollBar createVerticalScrollBar()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane javax.swing.JTextArea getTextArea()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane void focusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane void focusLost(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder boolean isOpaque(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder boolean isOpaque(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder java.awt.Insets getBorderInsets(java.awt.Component, java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder java.awt.Insets getBorderInsets(java.awt.Component, java.awt.Insets) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder java.awt.Insets getBorderInsets(java.awt.Component, java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler boolean setPointerIfPointOverButton(javax.swing.JButton, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler boolean setPointerIfPointOverScrollbar(javax.swing.JScrollBar, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toLocalSpace(java.awt.Component, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toLocalSpace(java.awt.Component, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toLocalSpace(java.awt.Component, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toViewportChildLocalSpace(javax.swing.JViewport, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toViewportChildLocalSpace(javax.swing.JViewport, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toViewportChildLocalSpace(javax.swing.JViewport, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.event.MouseEvent newMouseEvent(java.awt.Component, java.awt.Point, java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.event.MouseEvent newMouseEvent(java.awt.Component, java.awt.Point, java.awt.event.MouseEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.event.MouseEvent newMouseEvent(java.awt.Component, java.awt.Point, java.awt.event.MouseEvent) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.event.MouseEvent newMouseEvent(java.awt.Component, java.awt.Point, java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void access$000(sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void access$100(sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void grabbed_update(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void handle(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler.Pointer Pointer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler.Pointer Pointer(sun.awt.X11.XTextAreaPeer.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler.Pointer Pointer(sun.awt.X11.XTextAreaPeer.1)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler.Pointer boolean isNone()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler.Pointer sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler.Pointer.Type getType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTCaret void focusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollBarButton boolean isFocusTraversable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollBarButton java.awt.Dimension getPreferredSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollBarUI javax.swing.JButton createDecreaseButton(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollBarUI javax.swing.JButton createIncreaseButton(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollBarUI javax.swing.JButton getDecreaseButton()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollBarUI javax.swing.JButton getIncreaseButton()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollBarUI void paintThumb(java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI boolean isLeftToRight(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI java.beans.PropertyChangeListener createPropertyChangeHandler()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI javax.swing.border.Border access$200(sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI javax.swing.border.Border access$200(sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI javax.swing.border.Border access$202(sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI, javax.swing.border.Border) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI javax.swing.border.Border access$202(sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI, javax.swing.border.Border)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI void installDefaults(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI void installListeners(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI void paint(java.awt.Graphics, javax.swing.JComponent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI void uninstallDefaults(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI void uninstallListeners(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI.1 void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer XTextFieldPeer(java.awt.TextField) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer boolean setXAWTTextField(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer int getIndexAtPoint(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer java.awt.Dimension getMinimumSize(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer java.awt.Rectangle getCharacterBounds(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer long filterEvents(long)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer void disposeImpl()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.AWTTextFieldUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.AWTTextFieldUI javax.swing.text.Caret createCaret()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField XAWTTextField(sun.awt.X11.XTextFieldPeer, java.lang.String, sun.awt.X11.XComponentPeer, java.awt.Container) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField XAWTTextField(sun.awt.X11.XTextFieldPeer, java.lang.String, sun.awt.X11.XComponentPeer, java.awt.Container) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField boolean hasFocus()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField java.awt.peer.ComponentPeer getPeer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField void changedUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField void forwardFocusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField void forwardFocusLost(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField void insertUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField void removeUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTextItem int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextItem int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextItem java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextItem java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextItem java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextItem long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextItem sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextItem16 int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextItem16 int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextItem16 java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextItem16 java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextItem16 java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextItem16 long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextItem16 sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextProperty int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextProperty int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextProperty java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextProperty java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextProperty java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextProperty long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTextProperty sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTimeCoord int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTimeCoord int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTimeCoord java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTimeCoord java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTimeCoord java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTimeCoord long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTimeCoord sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean access$302(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XToolkit boolean access$502(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XToolkit boolean access$602(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XToolkit boolean areExtraMouseButtonsEnabled()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean enableInputMethodsForTextComponent()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean getLastCursorPos(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XToolkit boolean initXSettingsIfNeeded(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isDynamicLayoutSet()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isLeftMouseButton(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isRightMouseButton(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isSecurityWarningEnabled()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isTranslucencyCapable(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isTranslucencyCapable(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isWindowTranslucencySupported()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean needsXEmbedImpl()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean useBufferPerWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit int getBackingStoreType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit int getMaximumCursorColors()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.Dimension getBestCursorSize(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.Insets getScreenInsetsManually(long, java.awt.Rectangle, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.im.spi.InputMethodDescriptor getInputMethodAdapterDescriptor()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ButtonPeer createButton(java.awt.Button) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ButtonPeer createButton(java.awt.Button)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.CanvasPeer createCanvas(java.awt.Canvas) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.CanvasPeer createCanvas(java.awt.Canvas)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.CheckboxMenuItemPeer createCheckboxMenuItem(java.awt.CheckboxMenuItem)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.CheckboxPeer createCheckbox(java.awt.Checkbox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.CheckboxPeer createCheckbox(java.awt.Checkbox)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ChoicePeer createChoice(java.awt.Choice) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ChoicePeer createChoice(java.awt.Choice)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.DesktopPeer createDesktopPeer(java.awt.Desktop) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.DesktopPeer createDesktopPeer(java.awt.Desktop)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.DialogPeer createDialog(java.awt.Dialog)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.FileDialogPeer createFileDialog(java.awt.FileDialog)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.FontPeer getFontPeer(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.FramePeer createFrame(java.awt.Frame)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.KeyboardFocusManagerPeer getKeyboardFocusManagerPeer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.LabelPeer createLabel(java.awt.Label) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.LabelPeer createLabel(java.awt.Label)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ListPeer createList(java.awt.List) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ListPeer createList(java.awt.List)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.MenuBarPeer createMenuBar(java.awt.MenuBar)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.MenuItemPeer createMenuItem(java.awt.MenuItem)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.MenuPeer createMenu(java.awt.Menu)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.PanelPeer createPanel(java.awt.Panel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.PanelPeer createPanel(java.awt.Panel)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.PopupMenuPeer createPopupMenu(java.awt.PopupMenu)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ScrollPanePeer createScrollPane(java.awt.ScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ScrollPanePeer createScrollPane(java.awt.ScrollPane)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ScrollbarPeer createScrollbar(java.awt.Scrollbar) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ScrollbarPeer createScrollbar(java.awt.Scrollbar)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.SystemTrayPeer createSystemTray(java.awt.SystemTray)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.TextAreaPeer createTextArea(java.awt.TextArea) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.TextAreaPeer createTextArea(java.awt.TextArea)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.TextFieldPeer createTextField(java.awt.TextField) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.TextFieldPeer createTextField(java.awt.TextField)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.TrayIconPeer createTrayIcon(java.awt.TrayIcon)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.WindowPeer createWindow(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.lang.Object lazilyLoadDesktopProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.lang.Object targetToPeer(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.lang.Object targetToPeer(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XToolkit java.lang.String getAWTAppClassName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.lang.String getCorrectXIDString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XToolkit long getAwtDefaultFg()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit long getDisplay()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.X11.XAtom access$400(sun.awt.X11.XToolkit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.X11.XAtom access$400(sun.awt.X11.XToolkit)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.X11.XEmbedChildProxyPeer createEmbedProxy(sun.awt.X11.XEmbedChildProxy) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.X11.XEmbedChildProxyPeer createEmbedProxy(sun.awt.X11.XEmbedChildProxy)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.X11.XEmbeddedFramePeer createEmbeddedFrame(sun.awt.X11.XEmbeddedFrame)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.XSettings access$000(sun.awt.X11.XToolkit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.XSettings access$000(sun.awt.X11.XToolkit)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.util.logging.PlatformLogger access$100()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit void WITH_XERROR_HANDLER(sun.awt.X11.XErrorHandler) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void grab(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void loadSystemColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void parseXSettings(int, java.util.Map) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit void processGlobalMotionEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void processXkbChanges(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void remove(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void removeFromWinMap(long, sun.awt.X11.XBaseWindow) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit void schedule(java.lang.Runnable, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void targetDisposedPeer(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit void targetDisposedPeer(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit void ungrab(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit.1.1 1(sun.awt.X11.XToolkit.1, java.lang.ThreadGroup, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XToolkit.1.1 1(sun.awt.X11.XToolkit.1, java.lang.ThreadGroup, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit.2 java.lang.Thread run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit.3 3()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkit.3 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit.4 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkitThreadBlockedHandler XToolkitThreadBlockedHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XToolkitThreadBlockedHandler sun.awt.datatransfer.ToolkitThreadBlockedHandler getToolkitThreadBlockedHandler()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTranslateCoordinates boolean isDisposed()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTranslateCoordinates boolean isExecuted()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer boolean isDisposed()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer java.lang.String getTooltipString()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer sun.util.logging.PlatformLogger access$000()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer void access$100(sun.awt.X11.XTrayIconPeer, long, sun.awt.X11.XEventDispatcher, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer void access$200(sun.awt.X11.XTrayIconPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.1 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.1 void dispatchEvent(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.IconCanvas void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.IconCanvas.IconObserver boolean imageUpdate(java.awt.Image, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void handleEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void mouseClicked(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.XTrayIconEmbeddedFrame boolean isResizable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.XTrayIconEmbeddedFrame boolean isUndecorated()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.XTrayIconEmbeddedFrame void dispose()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XUnmapEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XUnmapEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XUnmapEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XUnmapEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XUnmapEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XUnmapEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XUnmapEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XUtilConstants XUtilConstants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVerticalScrollbar java.awt.Rectangle getThumbArea()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XVisibilityEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVisibilityEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVisibilityEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XVisibilityEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVisibilityEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XVisibilityEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVisibilityEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XVisualInfo int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVisualInfo int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVisualInfo java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XVisualInfo java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVisualInfo java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XVisualInfo long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XVisualInfo sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWINProtocol boolean isStateChange(sun.awt.X11.XPropertyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWINProtocol int getState(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWINProtocol void setLayer(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWINProtocol void setState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWINProtocol void unshadeKludge(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM boolean access$002(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWM boolean isNetWMName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWM boolean isStateChange(sun.awt.X11.XDecoratedPeer, sun.awt.X11.XPropertyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM boolean isStateChange(sun.awt.X11.XDecoratedPeer, sun.awt.X11.XPropertyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWM boolean needRemap(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM boolean setNetWMIcon(sun.awt.X11.XWindowPeer, java.util.List&lt;sun.awt.IconInfo&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWM boolean setNetWMIcon(sun.awt.X11.XWindowPeer, java.util.List&lt;sun.awt.IconInfo&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWM boolean syncTopLevelPos(long, sun.awt.X11.XWindowAttributes) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM int getID()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWM int getState(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM int normalizeMotifDecor(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWM int normalizeMotifFunc(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWM java.awt.Insets getInsets(sun.awt.X11.XDecoratedPeer, long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWM java.awt.Insets guessInsets(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM java.awt.Insets normalize(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM java.awt.Insets normalize(java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWM java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWM sun.awt.X11.XNETProtocol getNETProtocol()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWM void removeSizeHints(sun.awt.X11.XDecoratedPeer, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setExtendedState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setMotifDecor(sun.awt.X11.XWindow, boolean, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setOLDecor(sun.awt.X11.XWindow, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWM void setShellDecor(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setShellNotResizable(sun.awt.X11.XDecoratedPeer, sun.awt.X11.WindowDimensions, java.awt.Rectangle, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setShellResizable(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWM.1 int handleError(long, sun.awt.X11.XErrorEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWMHints int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWMHints int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWMHints java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWMHints java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWMHints java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWMHints long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWMHints sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow boolean isEventDisabled(sun.awt.X11.XEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow int access$300(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow int access$300(sun.awt.X11.XWarningWindow)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow int access$310(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.awt.Color getBackground()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.awt.Color getColor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.awt.Window access$000(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.awt.Window access$000(sun.awt.X11.XWarningWindow)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.lang.Runnable access$400(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.lang.Runnable access$400(sun.awt.X11.XWarningWindow)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.lang.String getWMName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.lang.String getWarningString()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.lang.ref.WeakReference access$200(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.lang.ref.WeakReference access$200(sun.awt.X11.XWarningWindow)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow void access$100(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow void handleExposeEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow void paint(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow.1 java.lang.String getTooltipString()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow XWindow(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow XWindow(java.awt.Component, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow XWindow(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean doEraseBackground()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean isEmbedded()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean isLocationByPlatform()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean isParentOf(sun.awt.X11.XWindow) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean isParentOf(sun.awt.X11.XWindow)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWindow boolean isReparented()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean isResizable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean isShowing()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean prePostEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow boolean prePostEvent(java.awt.AWTEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow int getMouseMovementSmudge()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow int getXModifiers(java.awt.AWTKeyStroke) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow int getXModifiers(java.awt.AWTKeyStroke)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow int keyEventType2Id(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow java.awt.Component getEventSource()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow java.awt.Graphics getGraphics(sun.java2d.SurfaceData, java.awt.Color, java.awt.Color, java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow java.awt.Graphics getGraphics(sun.java2d.SurfaceData, java.awt.Color, java.awt.Color, java.awt.Font) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow java.awt.Graphics getGraphics(sun.java2d.SurfaceData, java.awt.Color, java.awt.Color, java.awt.Font) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow java.awt.Graphics getGraphics(sun.java2d.SurfaceData, java.awt.Color, java.awt.Color, java.awt.Font) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow java.awt.Graphics getGraphics(sun.java2d.SurfaceData, java.awt.Color, java.awt.Color, java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;null,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWindow java.lang.Object getTarget()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow java.lang.String[] getWMClass()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow long getParentWindowID(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow long xkeycodeToKeysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow long xkeycodeToPrimaryKeysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow sun.awt.X11.XAtomList getWMProtocols()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow sun.awt.X11.XWindow getParentXWindowObject(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow sun.awt.X11.XWindow getParentXWindowObject(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11.XWindow sun.java2d.SurfaceData getSurfaceData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow void doLayout(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow void dumpKeysymArray(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleExposeEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleKeyPress(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleKeyPress(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleKeyRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleKeyRelease(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleMotionNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleXCrossingEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void layout()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow void logIncomingKeyEvent(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow void paint(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindow void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void postEventStatic(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindow void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void reshape(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void sendEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void stateChanged(long, int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowAttributes int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowAttributes int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowAttributes java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowAttributes java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowAttributes java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowAttributes long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowAttributes sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowChanges int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowChanges int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowChanges java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowChanges java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowChanges java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowChanges long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowChanges sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer XWindowPeer(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer boolean hasDecorations(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer boolean hasWarningWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer boolean isFocusedWindowModalBlocker()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer boolean isLocationByPlatform()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer boolean isModalBlocked()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer boolean isResizable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer boolean isSimpleWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer int getMenuBarHeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer java.awt.Insets getInsets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer java.awt.Window.Type getWindowType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer java.util.List&lt;sun.awt.IconInfo&gt; getIconInfo()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer java.util.List&lt;sun.awt.IconInfo&gt; normalizeIconImages(java.util.List&lt;sun.awt.IconInfo&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer sun.awt.X11.XWindowPeer getOwnerPeer()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void addToTransientFors(sun.awt.X11.XDialogPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void addToTransientFors(sun.awt.X11.XDialogPeer, java.util.Vector&lt;sun.awt.X11.XWindowPeer&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void addToTransientFors(sun.awt.X11.XDialogPeer, java.util.Vector&lt;sun.awt.X11.XWindowPeer&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleFocusEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleMotionNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleRootPropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleVisibilityEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleXCrossingEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void paletteChanged()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void removeTransientForHint(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void restoreTransientFor(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setActualFocusedWindow(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setActualFocusedWindow(sun.awt.X11.XWindowPeer)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setIconHints(java.util.List&lt;sun.awt.IconInfo&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setIconHints(java.util.List&lt;sun.awt.IconInfo&gt;)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setModalBlocked(java.awt.Dialog, boolean, java.util.Vector&lt;sun.awt.X11.XWindowPeer&gt;) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setOpaque(boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setSaveUnder(boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setToplevelTransientFor(sun.awt.X11.XWindowPeer, sun.awt.X11.XWindowPeer, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setToplevelTransientFor(sun.awt.X11.XWindowPeer, sun.awt.X11.XWindowPeer, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void suppressWmTakeFocus(boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void updateChildrenSizes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void updateWindow()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer.3 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWrapperBase XWrapperBase()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWrapperBase java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWrapperBase java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XWrapperBase java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWrapperBase sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XdbeSwapInfo int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XdbeSwapInfo int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XdbeSwapInfo java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XdbeSwapInfo java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XdbeSwapInfo java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XdbeSwapInfo long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XdbeSwapInfo sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbAccessXNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbAccessXNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbAccessXNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbAccessXNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbAccessXNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbAccessXNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbAccessXNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbActionMessageEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbActionMessageEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbActionMessageEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbActionMessageEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbActionMessageEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbActionMessageEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbActionMessageEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbAnyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbAnyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbAnyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbAnyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbAnyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbAnyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbAnyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbBellNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbBellNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbBellNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbBellNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbBellNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbBellNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbBellNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbCompatMapNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbCompatMapNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbCompatMapNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbCompatMapNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbCompatMapNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbCompatMapNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbCompatMapNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbControlsNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbControlsNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbControlsNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbControlsNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbControlsNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbControlsNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbControlsNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XEvent get_core()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbAccessXNotifyEvent get_accessx()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbActionMessageEvent get_message()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbAnyEvent get_any()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbBellNotifyEvent get_bell()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbCompatMapNotifyEvent get_compat()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbControlsNotifyEvent get_ctrls()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbExtensionDeviceNotifyEvent get_device()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbIndicatorNotifyEvent get_indicators()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbMapNotifyEvent get_map()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbNamesNotifyEvent get_names()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbNewKeyboardNotifyEvent get_new_kbd()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbEvent sun.awt.X11.XkbStateNotifyEvent get_state()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbExtensionDeviceNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbExtensionDeviceNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbExtensionDeviceNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbExtensionDeviceNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbExtensionDeviceNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbExtensionDeviceNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbExtensionDeviceNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbIndicatorNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbIndicatorNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbIndicatorNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbIndicatorNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbIndicatorNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbIndicatorNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbIndicatorNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbMapNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbMapNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbMapNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbMapNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbMapNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbMapNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbMapNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbNamesNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbNamesNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbNamesNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbNamesNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbNamesNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbNamesNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbNamesNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbNewKeyboardNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbNewKeyboardNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbNewKeyboardNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbNewKeyboardNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbNewKeyboardNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbNewKeyboardNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbNewKeyboardNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbStateNotifyEvent int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbStateNotifyEvent int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbStateNotifyEvent java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbStateNotifyEvent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbStateNotifyEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XkbStateNotifyEvent long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XkbStateNotifyEvent sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XlibUtil XlibUtil()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XlibUtil java.awt.Point translateCoordinates(long, long, java.awt.Point) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XlibUtil java.awt.Rectangle translateCoordinates(long, long, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XlibWrapper XlibWrapper()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XlibWrapper int getDataModel()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XlibWrapper java.lang.String hintsToString(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XmbTextItem int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XmbTextItem int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XmbTextItem java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XmbTextItem java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XmbTextItem java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XmbTextItem long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XmbTextItem sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XwcTextItem int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XwcTextItem int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XwcTextItem java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XwcTextItem java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XwcTextItem java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XwcTextItem long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.XwcTextItem sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.awtImageData int getDataSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.awtImageData int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.awtImageData java.lang.String getFieldsAsString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.awtImageData java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.awtImageData java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.awtImageData long getPData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.awt.X11.awtImageData sun.awt.X11.XEvent clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.awtImageData sun.awt.X11.XPixmapFormatValues get_wsImageFormat()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
