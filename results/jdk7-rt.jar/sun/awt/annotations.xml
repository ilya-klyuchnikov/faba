<root>
  <item name="sun.awt.AWTAccessor AWTAccessor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTAccessor sun.awt.AWTAccessor.SequencedEventAccessor getSequencedEventAccessor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTAccessor void setAWTEventAccessor(sun.awt.AWTAccessor.AWTEventAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setCheckboxMenuItemAccessor(sun.awt.AWTAccessor.CheckboxMenuItemAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setClientPropertyKeyAccessor(sun.awt.AWTAccessor.ClientPropertyKeyAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setComponentAccessor(sun.awt.AWTAccessor.ComponentAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setContainerAccessor(sun.awt.AWTAccessor.ContainerAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setCursorAccessor(sun.awt.AWTAccessor.CursorAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setDefaultKeyboardFocusManagerAccessor(sun.awt.AWTAccessor.DefaultKeyboardFocusManagerAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setEventQueueAccessor(sun.awt.AWTAccessor.EventQueueAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setFileDialogAccessor(sun.awt.AWTAccessor.FileDialogAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setFrameAccessor(sun.awt.AWTAccessor.FrameAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setInputEventAccessor(sun.awt.AWTAccessor.InputEventAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setKeyEventAccessor(sun.awt.AWTAccessor.KeyEventAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setKeyboardFocusManagerAccessor(sun.awt.AWTAccessor.KeyboardFocusManagerAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setMenuAccessor(sun.awt.AWTAccessor.MenuAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setMenuBarAccessor(sun.awt.AWTAccessor.MenuBarAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setMenuComponentAccessor(sun.awt.AWTAccessor.MenuComponentAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setMenuItemAccessor(sun.awt.AWTAccessor.MenuItemAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setPopupMenuAccessor(sun.awt.AWTAccessor.PopupMenuAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setScrollPaneAdjustableAccessor(sun.awt.AWTAccessor.ScrollPaneAdjustableAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setSequencedEventAccessor(sun.awt.AWTAccessor.SequencedEventAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setSystemTrayAccessor(sun.awt.AWTAccessor.SystemTrayAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setTrayIconAccessor(sun.awt.AWTAccessor.TrayIconAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAccessor void setWindowAccessor(sun.awt.AWTAccessor.WindowAccessor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAutoShutdown java.awt.AWTEvent getShutdownEvent()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTAutoShutdown sun.awt.AWTAutoShutdown getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTAutoShutdown void dumpPeers(sun.util.logging.PlatformLogger) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTAutoShutdown void notifyThreadBusy(java.lang.Thread) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAutoShutdown void notifyThreadFree(java.lang.Thread) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAutoShutdown void unregisterPeer(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTAutoShutdown.1 1(java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset AWTCharset(java.lang.String, java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset java.nio.charset.CharsetDecoder newDecoder()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset java.nio.charset.CharsetEncoder newEncoder()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder Decoder(sun.awt.AWTCharset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder Decoder(sun.awt.AWTCharset, java.nio.charset.CharsetDecoder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder Decoder(sun.awt.AWTCharset, java.nio.charset.CharsetDecoder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder void implOnMalformedInput(java.nio.charset.CodingErrorAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder Encoder(sun.awt.AWTCharset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder Encoder(sun.awt.AWTCharset, java.nio.charset.CharsetEncoder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder Encoder(sun.awt.AWTCharset, java.nio.charset.CharsetEncoder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder boolean isLegalReplacement(byte[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTCharset.Encoder void implOnMalformedInput(java.nio.charset.CodingErrorAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTIcon32_java_icon16_png AWTIcon32_java_icon16_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_java_icon24_png AWTIcon32_java_icon24_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_java_icon32_png AWTIcon32_java_icon32_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_java_icon48_png AWTIcon32_java_icon48_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_bw16_png AWTIcon32_security_icon_bw16_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_bw24_png AWTIcon32_security_icon_bw24_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_bw32_png AWTIcon32_security_icon_bw32_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_bw48_png AWTIcon32_security_icon_bw48_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_interim16_png AWTIcon32_security_icon_interim16_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_interim24_png AWTIcon32_security_icon_interim24_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_interim32_png AWTIcon32_security_icon_interim32_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_interim48_png AWTIcon32_security_icon_interim48_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_yellow16_png AWTIcon32_security_icon_yellow16_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_yellow24_png AWTIcon32_security_icon_yellow24_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_yellow32_png AWTIcon32_security_icon_yellow32_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon32_security_icon_yellow48_png AWTIcon32_security_icon_yellow48_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_java_icon16_png AWTIcon64_java_icon16_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_java_icon24_png AWTIcon64_java_icon24_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_java_icon32_png AWTIcon64_java_icon32_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_java_icon48_png AWTIcon64_java_icon48_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_bw16_png AWTIcon64_security_icon_bw16_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_bw24_png AWTIcon64_security_icon_bw24_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_bw32_png AWTIcon64_security_icon_bw32_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_bw48_png AWTIcon64_security_icon_bw48_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_interim16_png AWTIcon64_security_icon_interim16_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_interim24_png AWTIcon64_security_icon_interim24_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_interim32_png AWTIcon64_security_icon_interim32_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_interim48_png AWTIcon64_security_icon_interim48_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_yellow16_png AWTIcon64_security_icon_yellow16_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_yellow24_png AWTIcon64_security_icon_yellow24_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_yellow32_png AWTIcon64_security_icon_yellow32_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTIcon64_security_icon_yellow48_png AWTIcon64_security_icon_yellow48_png()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTPermissionFactory AWTPermissionFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTPermissionFactory java.awt.AWTPermission newPermission(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTPermissionFactory java.awt.AWTPermission newPermission(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTSecurityManager sun.awt.AppContext getAppContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext boolean isDisposed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext boolean isMainContext(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext boolean isMainContext(sun.awt.AppContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext java.lang.ClassLoader getContextClassLoader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext java.lang.ThreadGroup getThreadGroup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext java.lang.ThreadLocal access$400()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext java.util.Map access$300()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext java.util.Set&lt;sun.awt.AppContext&gt; getAppContexts()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext java.util.concurrent.atomic.AtomicInteger access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext sun.awt.AppContext access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext sun.awt.AppContext access$002(sun.awt.AppContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext sun.awt.AppContext access$600()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext sun.awt.AppContext getExecutionAppContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext sun.util.logging.PlatformLogger access$500()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext void removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext.2 2()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext.2 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext.3 3()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext.3 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext.3 sun.awt.AppContext run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext.4.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext.6 6()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext.6 boolean isMainAppContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext.6 java.lang.Object get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext.6 java.lang.Object get(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext.6 java.lang.Object getExecutionContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.AppContext.6 void put(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext.6 void remove(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext.CreateThreadAction java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsConfig boolean isTranslucencyCapable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsConfig java.awt.Image createAcceleratedImage(java.awt.Component, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig java.awt.geom.AffineTransform getDefaultTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsConfig java.awt.geom.AffineTransform getNormalizingTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig long createBackBuffer(sun.lwawt.macosx.CPlatformView, int, java.awt.BufferCapabilities) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig long createBackBuffer(sun.lwawt.macosx.CPlatformView, int, java.awt.BufferCapabilities) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig sun.awt.CGraphicsDevice getDevice()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.java2d.opengl.CGLLayer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.lwawt.macosx.CPlatformView) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig void flip(sun.lwawt.macosx.CPlatformView, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig void flip(sun.lwawt.macosx.CPlatformView, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig void flip(sun.lwawt.macosx.CPlatformView, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsConfig void flip(sun.lwawt.macosx.CPlatformView, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CGraphicsDevice boolean isDisplayChangeSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice double getXResolution()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice double getYResolution()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice int getCGDisplayID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice int getScaleFactor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice int getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice java.awt.GraphicsConfiguration getDefaultConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice java.awt.Insets getScreenInsets()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice java.lang.String getIDstring()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsDevice void enterFullScreenExclusive(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsDevice void exitFullScreenExclusive(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsDevice void paletteChanged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsDevice void setDisplayMode(java.awt.DisplayMode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsEnvironment boolean isDisplayLocal()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsEnvironment java.awt.Font[] getAllFonts()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsEnvironment void init()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsEnvironment.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CGraphicsEnvironment.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CausedFocusEvent CausedFocusEvent(java.awt.Component, int, boolean, java.awt.Component, sun.awt.CausedFocusEvent.Cause) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CausedFocusEvent CausedFocusEvent(java.awt.Component, int, boolean, java.awt.Component, sun.awt.CausedFocusEvent.Cause) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CausedFocusEvent java.awt.event.FocusEvent retarget(java.awt.event.FocusEvent, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CausedFocusEvent java.awt.event.FocusEvent retarget(java.awt.event.FocusEvent, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.CausedFocusEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CausedFocusEvent sun.awt.CausedFocusEvent.Cause getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.CustomCursor CustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CustomCursor CustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings boolean getBoolean(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.DebugSettings int getInt(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.DebugSettings java.lang.String getString(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.DebugSettings java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings void access$000(sun.awt.DebugSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings void access$100(sun.awt.DebugSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings void access$200(sun.awt.DebugSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings void access$300(sun.awt.DebugSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.DebugSettings.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.DefaultMouseInfoPeer DefaultMouseInfoPeer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.DesktopBrowse DesktopBrowse()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.DesktopBrowse sun.awt.DesktopBrowse getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.DesktopBrowse void setInstance(sun.awt.DesktopBrowse) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame boolean isCursorAllowed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame boolean isResizable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame boolean traverseOut(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame java.applet.Applet getAppletIfAncestorOf(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame java.applet.Applet getAppletIfAncestorOf(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame java.awt.Container getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame java.awt.Point getLocationPrivate()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void addTraversingOutListeners(java.awt.KeyboardFocusManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void notifyModalBlocked(java.awt.Dialog, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void notifyModalBlocked(java.awt.Dialog, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void remove(java.awt.MenuComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void remove(java.awt.MenuComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void removeTraversingOutListeners(java.awt.KeyboardFocusManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void setIconImage(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void setIconImage(java.awt.Image)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void setIconImages(java.util.List&lt;? extends java.awt.Image&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void setIconImages(java.util.List&lt;? extends java.awt.Image&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void setMenuBar(java.awt.MenuBar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void setMenuBar(java.awt.MenuBar)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void setResizable(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void setTitle(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void setTitle(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void synthesizeWindowActivation(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void toBack()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame void toFront()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer NullEmbeddedFramePeer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer NullEmbeddedFramePeer(sun.awt.EmbeddedFrame.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer NullEmbeddedFramePeer(sun.awt.EmbeddedFrame.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer boolean isRestackSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer boolean requestWindowFocus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer int getState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer java.awt.Component getGlobalHeavyweightFocusOwner()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void repositionSecurityWarning()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setIconImage(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setIconImage(java.awt.Image)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setMaximizedBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setMaximizedBounds(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setMenuBar(java.awt.MenuBar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setMenuBar(java.awt.MenuBar)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setModalBlocked(java.awt.Dialog, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setModalBlocked(java.awt.Dialog, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setOpacity(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setOpaque(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setResizable(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setState(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setTitle(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void setTitle(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void toBack()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void toFront()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void updateAlwaysOnTop()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void updateAlwaysOnTopState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void updateFocusableWindowState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void updateIconImages()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void updateMinimumSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame.NullEmbeddedFramePeer void updateWindow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EventListenerAggregate EventListenerAggregate(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EventListenerAggregate boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EventListenerAggregate int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EventListenerAggregate java.util.EventListener[] getListenersInternal()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.EventQueueDelegate EventQueueDelegate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.ExtendedKeyCodes ExtendedKeyCodes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FocusingTextField boolean getWillSelect()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FocusingTextField boolean gotFocus(java.awt.Event, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FocusingTextField boolean gotFocus(java.awt.Event, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FocusingTextField boolean gotFocus(java.awt.Event, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FocusingTextField boolean lostFocus(java.awt.Event, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FocusingTextField boolean lostFocus(java.awt.Event, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FocusingTextField boolean lostFocus(java.awt.Event, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration boolean contains(short[], short, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration boolean foundOsSpecificFile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration boolean hasMonoToPropMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration boolean isEmpty(short[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration boolean isEmpty(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration boolean isLogicalFontFaceName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration boolean isLogicalFontFaceNameLC(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration boolean isLogicalFontFamilyName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration boolean isLogicalFontFamilyNameLC(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration boolean isLogicalFontStyleName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration char[] access$1902(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration int getArrayIndex(java.lang.String[], java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration int getStyleIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration int[] access$2200()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.io.File findFontConfigFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.io.File findFontConfigFile(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.io.File findImpl(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.io.File findImpl(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getCompatibilityFamilyName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getCompatibilityFamilyName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getComponentFileName(short)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getComponentFontName(short)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getExtraFontPath()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getFontName(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getLogicalFontFaceName(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getLogicalFontFaceName(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getScriptName(short)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getString(short)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getStyleName(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getStyleString(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getVersion()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String makeAWTFontName(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String makeAWTFontName(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_-&gt;!null;null,_-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String mapFileName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.StringBuilder access$2000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String[] access$2102(java.lang.String[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String[] access$2500()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String[] split(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.nio.charset.CharsetEncoder getFontCharsetEncoder(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.util.HashSet&lt;java.lang.String&gt; getAWTFontPathSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration java.util.Vector access$2600(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.util.Vector access$2600(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.util.Vector splitSequence(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.util.Vector splitSequence(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short access$1000(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration short access$1500(short[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short access$1700()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short getComponentFileID(short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short getComponentFontID(short, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short getComponentFontIDMotif(short, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short getShortArrayID(short[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short getStringID(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration short remapProportional(int, short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$002(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$102(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1102(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1200()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1202(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1300()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1400()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1402(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1600()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1602(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1800()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$200(java.util.HashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$200(java.util.HashMap)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$300()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$302(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$400()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$402(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$500()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$502(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$600()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$602(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$700()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$702(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$800()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$802(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$900()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$902(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] getCoreScripts(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short[] getFallbackScripts()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short[] getShortArray(short)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short[] toList(java.util.HashMap&lt;java.lang.String,java.lang.Short&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short[] toList(java.util.HashMap&lt;java.lang.String,java.lang.Short&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration sun.awt.FontConfiguration getFontConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration sun.awt.FontDescriptor[] buildFontDescriptors(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration sun.awt.FontDescriptor[] getFontDescriptors(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration sun.font.CompositeFontDescriptor[] get2DCompositeFontInfo()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration sun.util.logging.PlatformLogger access$2300()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration void getInstalledFallbackFonts(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration void printTable(short[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration void readFontConfigFile(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration void saveBinary(java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration void writeShortTable(java.io.DataOutputStream, short[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration.3 3()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler PropertiesHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler int[] parseExclusions(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler int[] parseExclusions(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler java.lang.Short getID(java.util.HashMap&lt;java.lang.String,java.lang.Short&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler void access$2400(sun.awt.FontConfiguration.PropertiesHandler, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler void access$2400(sun.awt.FontConfiguration.PropertiesHandler, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler void parseProperty(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler.FontProperties java.lang.Object put(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler.FontProperties java.lang.Object put(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.FontDescriptor FontDescriptor(java.lang.String, java.nio.charset.CharsetEncoder, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontDescriptor boolean isExcluded(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontDescriptor int[] getExclusionRanges()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontDescriptor java.lang.String getFontCharsetName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontDescriptor java.lang.String getNativeName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.FontDescriptor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontDescriptor java.nio.charset.CharsetEncoder getFontCharsetEncoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.GlobalCursorManager void access$000(sun.awt.GlobalCursorManager, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.GlobalCursorManager void updateCursorImmediately(java.awt.event.InputEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.GlobalCursorManager void updateCursorOutOfJava()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.GlobalCursorManager.NativeUpdater void postIfNotPending(java.awt.Component, java.awt.event.InvocationEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_,_,_-&gt;null;_,!null,_,_,_-&gt;null;_,_,!null,_,_-&gt;null;_,_,_,_,!null-&gt;null;_,_,_,_,null-&gt;null;_,_,null,_,_-&gt;null;_,null,_,_,_-&gt;null;null,_,_,_,_-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit boolean isDesktopSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean isTraySupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean isWindowOpacityControlSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean isWindowShapingSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean isWindowTranslucencySupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean syncNativeQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean syncNativeQueue(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.Insets getScreenInsets(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.dnd.peer.DragSourceContextPeer createDragSourceContextPeer(java.awt.dnd.DragGestureEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.im.spi.InputMethodDescriptor getInputMethodAdapterDescriptor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.ButtonPeer createButton(java.awt.Button) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.CheckboxMenuItemPeer createCheckboxMenuItem(java.awt.CheckboxMenuItem) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.CheckboxPeer createCheckbox(java.awt.Checkbox) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.ChoicePeer createChoice(java.awt.Choice) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.DesktopPeer createDesktopPeer(java.awt.Desktop) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.DialogPeer createDialog(java.awt.Dialog) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.FileDialogPeer createFileDialog(java.awt.FileDialog) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.FontPeer getFontPeer(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.FontPeer getFontPeer(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.FramePeer createFrame(java.awt.Frame) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.KeyboardFocusManagerPeer getKeyboardFocusManagerPeer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.LabelPeer createLabel(java.awt.Label) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.ListPeer createList(java.awt.List) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.MenuBarPeer createMenuBar(java.awt.MenuBar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.MenuItemPeer createMenuItem(java.awt.MenuItem) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.MenuPeer createMenu(java.awt.Menu) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.PopupMenuPeer createPopupMenu(java.awt.PopupMenu) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.ScrollPanePeer createScrollPane(java.awt.ScrollPane) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.ScrollbarPeer createScrollbar(java.awt.Scrollbar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.SystemTrayPeer createSystemTray(java.awt.SystemTray) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.TextAreaPeer createTextArea(java.awt.TextArea) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.TextFieldPeer createTextField(java.awt.TextField) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.TrayIconPeer createTrayIcon(java.awt.TrayIcon) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.peer.WindowPeer createWindow(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit java.util.Map mapInputMethodHighlight(java.awt.im.InputMethodHighlight) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit void grab(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit void grab(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit void loadSystemColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit void sync()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit void ungrab(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit void ungrab(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit.1 java.awt.Component getCurrentFocusOwner()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit.1 java.awt.Window getCurrentFocusedWindow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit.1 void clearGlobalFocusOwner(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit.1 void clearGlobalFocusOwner(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit.1 void setCurrentFocusOwner(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit.1 void setCurrentFocusOwner(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit.1 void setCurrentFocusedWindow(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HToolkit.1 void setCurrentFocusedWindow(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_,_,_-&gt;null;_,!null,_,_,_-&gt;null;_,_,!null,_,_-&gt;null;_,_,_,_,!null-&gt;null;_,_,_,_,null-&gt;null;_,_,null,_,_-&gt;null;_,null,_,_,_-&gt;null;null,_,_,_,_-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isAlwaysOnTopSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isDesktopSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isTraySupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.Insets getScreenInsets(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.Toolkit getUnderlyingToolkit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.dnd.peer.DragSourceContextPeer createDragSourceContextPeer(java.awt.dnd.DragGestureEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.ButtonPeer createButton(java.awt.Button) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.CheckboxMenuItemPeer createCheckboxMenuItem(java.awt.CheckboxMenuItem) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.CheckboxPeer createCheckbox(java.awt.Checkbox) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.ChoicePeer createChoice(java.awt.Choice) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.DesktopPeer createDesktopPeer(java.awt.Desktop) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.DialogPeer createDialog(java.awt.Dialog) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.FileDialogPeer createFileDialog(java.awt.FileDialog) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.FontPeer getFontPeer(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.FramePeer createFrame(java.awt.Frame) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.KeyboardFocusManagerPeer getKeyboardFocusManagerPeer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.LabelPeer createLabel(java.awt.Label) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.ListPeer createList(java.awt.List) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.MenuBarPeer createMenuBar(java.awt.MenuBar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.MenuItemPeer createMenuItem(java.awt.MenuItem) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.MenuPeer createMenu(java.awt.Menu) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.PopupMenuPeer createPopupMenu(java.awt.PopupMenu) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.ScrollPanePeer createScrollPane(java.awt.ScrollPane) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.ScrollbarPeer createScrollbar(java.awt.Scrollbar) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.SystemTrayPeer createSystemTray(java.awt.SystemTray) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.TextAreaPeer createTextArea(java.awt.TextArea) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.TextFieldPeer createTextField(java.awt.TextField) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.TrayIconPeer createTrayIcon(java.awt.TrayIcon) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.peer.WindowPeer createWindow(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.util.Map mapInputMethodHighlight(java.awt.im.InputMethodHighlight) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit void loadSystemColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit void sync()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 java.awt.Component getCurrentFocusOwner()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 java.awt.Window getCurrentFocusedWindow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 void clearGlobalFocusOwner(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 void clearGlobalFocusOwner(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 void setCurrentFocusOwner(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 void setCurrentFocusOwner(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 void setCurrentFocusedWindow(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HeadlessToolkit.1 void setCurrentFocusedWindow(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HorizBagLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HorizBagLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HorizBagLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.HorizBagLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout void removeLayoutComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.HorizBagLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.IconInfo IconInfo(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo IconInfo(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo IconInfo(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.IconInfo int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.IconInfo int getRawLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.IconInfo int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.IconInfo int[] imageToIntArray(java.awt.Image, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.IconInfo int[] longArrayToIntArray(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo int[] longArrayToIntArray(long[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo java.awt.Image intArrayToImage(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo java.awt.Image intArrayToImage(int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo long[] intArrayToLongArray(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo long[] intArrayToLongArray(int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.KeyboardFocusManagerPeerImpl KeyboardFocusManagerPeerImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.KeyboardFocusManagerPeerImpl boolean deliverFocus(java.awt.Component, java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.KeyboardFocusManagerPeerImpl boolean deliverFocus(java.awt.Component, java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause, java.awt.Component) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.KeyboardFocusManagerPeerImpl boolean deliverFocus(java.awt.Component, java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_,_-&gt;true;_,!null,_,_,_,_,_-&gt;true;_,_,_,_,_,!null,_-&gt;true;_,_,_,_,_,_,!null-&gt;true;_,_,_,_,_,_,null-&gt;true;null,_,_,_,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.KeyboardFocusManagerPeerImpl void clearGlobalFocusOwner(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.ModalityEvent ModalityEvent(java.lang.Object, sun.awt.ModalityListener, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.Mutex Mutex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NativeLibLoader NativeLibLoader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer NullComponentPeer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean canDetermineObscurity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean handleEvent(java.awt.Event) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer boolean handleEvent(java.awt.Event)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean handlesWheelScrolling()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean isFocusable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean isObscured()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean isPaintPending()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean isReparentSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_,_-&gt;false;_,_,_,!null-&gt;false;_,_,_,null-&gt;false;null,_,_,_-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean requestFocus(java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer boolean requestFocus(java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer boolean requestFocus(java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_,_,_-&gt;false;_,_,_,_,!null-&gt;false;_,_,_,_,null-&gt;false;null,_,_,_,_-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean updateGraphicsData(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer boolean updateGraphicsData(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Dimension getPreferredSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.FontMetrics getFontMetrics(java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.FontMetrics getFontMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Graphics getGraphics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.GraphicsConfiguration getAppropriateGraphicsConfiguration(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.GraphicsConfiguration getGraphicsConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Image createImage(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Image createImage(java.awt.image.ImageProducer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Image createImage(java.awt.image.ImageProducer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Insets insets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Point getLocationOnScreen()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Toolkit getToolkit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.image.VolatileImage createVolatileImage(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void applyShape(sun.java2d.pipe.Region) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void applyShape(sun.java2d.pipe.Region)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void beginLayout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void beginValidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void coalescePaintEvent(java.awt.event.PaintEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void coalescePaintEvent(java.awt.event.PaintEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void createBuffers(int, java.awt.BufferCapabilities) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void destroyBuffers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void disable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void enable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void endLayout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void endValidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void flip(int, int, int, int, java.awt.BufferCapabilities.FlipContents) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void handleEvent(java.awt.AWTEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void hide()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void layout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void paint(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void print(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void repaint(long, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void reparent(java.awt.peer.ContainerPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void reshape(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void setBackground(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void setBackground(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void setBounds(int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void setCursor(java.awt.Cursor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void setCursor(java.awt.Cursor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void setEnabled(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void setFont(java.awt.Font) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void setFont(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void setForeground(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void setForeground(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void setVisible(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void setZOrder(java.awt.peer.ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.NullComponentPeer void setZOrder(java.awt.peer.ComponentPeer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void show()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer void updateCursorImmediately()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.OSInfo OSInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.OSInfo java.security.PrivilegedAction&lt;sun.awt.OSInfo.OSType&gt; getOSTypeAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.OSInfo.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion WindowsVersion(int, int, sun.awt.OSInfo.1) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion int compareTo(sun.awt.OSInfo.WindowsVersion) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion int getMajor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion int getMinor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PaintEventDispatcher PaintEventDispatcher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.PaintEventDispatcher boolean queueSurfaceDataReplacing(java.awt.Component, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PaintEventDispatcher boolean queueSurfaceDataReplacing(java.awt.Component, java.lang.Runnable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PaintEventDispatcher boolean queueSurfaceDataReplacing(java.awt.Component, java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_-&gt;false;_,!null-&gt;false;_,null-&gt;false;null,_-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.PaintEventDispatcher boolean shouldDoNativeBackgroundErase(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PaintEventDispatcher boolean shouldDoNativeBackgroundErase(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.PaintEventDispatcher java.awt.event.PaintEvent createPaintEvent(java.awt.Component, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PaintEventDispatcher java.awt.event.PaintEvent createPaintEvent(java.awt.Component, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PaintEventDispatcher void setPaintEventDispatcher(sun.awt.PaintEventDispatcher) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PeerEvent PeerEvent(java.lang.Object, java.lang.Runnable, java.lang.Object, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PeerEvent PeerEvent(java.lang.Object, java.lang.Runnable, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PeerEvent long getFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.PeerEvent sun.awt.PeerEvent coalesceEvents(sun.awt.PeerEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PeerEvent sun.awt.PeerEvent coalesceEvents(sun.awt.PeerEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PlatformFont boolean mightHaveMultiFontMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.PlatformFont java.lang.Object[] makeConvertedMultiFontChars(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PlatformFont java.lang.Object[] makeConvertedMultiFontChars(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PlatformFont java.lang.Object[] makeConvertedMultiFontString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PlatformFont java.lang.Object[] makeConvertedMultiFontString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PlatformFont sun.awt.CharsetString[] makeMultiCharsetString(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PlatformFont sun.awt.CharsetString[] makeMultiCharsetString(char[], int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PlatformFont sun.awt.CharsetString[] makeMultiCharsetString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PlatformFont sun.awt.CharsetString[] makeMultiCharsetString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PlatformFont sun.awt.CharsetString[] makeMultiCharsetString(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PlatformFont sun.awt.CharsetString[] makeMultiCharsetString(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.PostEventQueue boolean noEvents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.PostEventQueue void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.RepaintArea boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.RepaintArea boolean subtract(java.awt.Rectangle, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.RepaintArea boolean subtract(java.awt.Rectangle, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.RepaintArea boolean subtract(java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.RepaintArea java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.RepaintArea sun.awt.RepaintArea cloneAndReset()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.RepaintArea void add(java.awt.Rectangle, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.RepaintArea void paintComponent(java.awt.Component, java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.RepaintArea void updateComponent(java.awt.Component, java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller ScrollPaneWheelScroller()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller int getIncrementFromAdjustable(java.awt.Adjustable, java.awt.event.MouseWheelEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller java.awt.Adjustable getAdjustableToScroll(java.awt.ScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller java.awt.Adjustable getAdjustableToScroll(java.awt.ScrollPane)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller void handleWheelScrolling(java.awt.ScrollPane, java.awt.event.MouseWheelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller void scrollAdjustable(java.awt.Adjustable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback SunGraphicsCallback()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunGraphicsCallback void constrainGraphics(java.awt.Graphics, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback void constrainGraphics(java.awt.Graphics, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback void runComponents(java.awt.Component[], java.awt.Graphics, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback void runComponents(java.awt.Component[], java.awt.Graphics, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback void runOneComponent(java.awt.Component, java.awt.Rectangle, java.awt.Graphics, java.awt.Shape, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback.PaintHeavyweightComponentsCallback PaintHeavyweightComponentsCallback()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunGraphicsCallback.PaintHeavyweightComponentsCallback sun.awt.SunGraphicsCallback.PaintHeavyweightComponentsCallback getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunGraphicsCallback.PaintHeavyweightComponentsCallback void run(java.awt.Component, java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback.PrintHeavyweightComponentsCallback PrintHeavyweightComponentsCallback()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunGraphicsCallback.PrintHeavyweightComponentsCallback sun.awt.SunGraphicsCallback.PrintHeavyweightComponentsCallback getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunGraphicsCallback.PrintHeavyweightComponentsCallback void run(java.awt.Component, java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunHints SunHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Key boolean isCompatibleValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunHints.Key boolean isCompatibleValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Key java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.LCDContrastKey boolean isCompatibleValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunHints.LCDContrastKey boolean isCompatibleValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Value Value(sun.awt.SunHints.Key, int, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunHints.Value boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunHints.Value boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Value boolean isCompatibleKey(sun.awt.SunHints.Key) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunHints.Value boolean isCompatibleKey(sun.awt.SunHints.Key)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Value int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Value java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Value sun.awt.SunHints.Value get(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Value void register(sun.awt.SunHints.Key, sun.awt.SunHints.Value) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunHints.Value void register(sun.awt.SunHints.Key, sun.awt.SunHints.Value) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean access$102(sun.awt.SunToolkit, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean access$200(sun.awt.SunToolkit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean access$302(sun.awt.SunToolkit, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean enableInputMethodsForTextComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isDispatchThreadForAppContext(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isInstanceOf(java.lang.Class, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isInstanceOf(java.lang.Class, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isInstanceOf(java.lang.Object, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isInstanceOf(java.lang.Object, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isInstanceOf(java.lang.Object, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isLightweightOrUnknown(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isModalExcluded(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isModalExcludedSupportedImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isNativeGTKAvailable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isPrintableCharacterModifiersMask(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isSwingBackbufferTranslucencySupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isTranslucencyCapable(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isTranslucencyCapable(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isWindowOpacitySupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isWindowShapingSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isWindowTranslucencySupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean needUpdateWindow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean needsXEmbedImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean setAppContext(java.lang.Object, sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit boolean setAppContext(java.lang.Object, sun.awt.AppContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean useBufferPerWindow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit int getFocusAcceleratorKeyMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit int getNumberOfButtons()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Component getHeavyweightComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Container getNativeContainer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Dimension getScreenSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.EventQueue getSystemEventQueueImplPP(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.FocusTraversalPolicy createLayoutPolicy()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.FontMetrics getFontMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Image createImage(java.awt.image.ImageProducer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.RenderingHints getDesktopAAHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.RenderingHints getDesktopAAHintsByName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.RenderingHints getDesktopAAHintsByName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.RenderingHints getDesktopFontHints()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Window createInputMethodWindow(java.lang.String, sun.awt.im.InputContext) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Window createInputMethodWindow(java.lang.String, sun.awt.im.InputContext)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Window getContainingWindow(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit java.awt.image.BufferedImage getScaledIconImage(java.util.List&lt;java.awt.Image&gt;, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.image.DataBufferInt getScaledIconData(java.util.List&lt;java.awt.Image&gt;, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.lang.Object access$000(sun.awt.SunToolkit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.lang.Object access$000(sun.awt.SunToolkit)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit java.lang.Object targetToPeer(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.lang.Object targetToPeer(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.lang.RuntimeException windowClosingDelivered(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.lang.RuntimeException windowClosingNotify(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit java.lang.String[] getFontList()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext createNewAppContext()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext createNewAppContext(java.lang.ThreadGroup)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext getAppContext(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext getAppContext(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext targetToAppContext(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext targetToAppContext(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.WindowClosingListener getWindowClosingListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit void checkAndSetPolicy(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void dumpPeers(sun.util.logging.PlatformLogger) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void executeOnEDTAndWait(java.lang.Object, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void executeOnEventHandlerThread(java.lang.Object, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void executeOnEventHandlerThread(java.lang.Object, java.lang.Runnable, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void executeOnEventHandlerThread(sun.awt.PeerEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void initEQ(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void invokeLaterOnAppContext(sun.awt.AppContext, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void notifyModalityChange(int, java.awt.Dialog) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void notifyModalityPopped(java.awt.Dialog) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void notifyModalityPushed(java.awt.Dialog) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void postEvent(sun.awt.AppContext, java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void postEvent(sun.awt.AppContext, java.awt.AWTEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void postPriorityEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void setDataTransfererClassName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit void setModalExcluded(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void targetCreatedPeer(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit void targetCreatedPeer(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit void targetDisposedPeer(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit void targetDisposedPeer(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.SunToolkit.1AWTInvocationLock 1AWTInvocationLock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit.2 2(java.lang.Object, java.lang.Runnable, long, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit.2 long getWhen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit.3 3(sun.awt.SunToolkit, java.lang.Object, java.lang.Runnable, long, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkitSubclass void flushPendingEvents(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.Symbol boolean contains(java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.Symbol boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.Symbol java.nio.charset.CharsetEncoder newEncoder()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.Symbol.Encoder boolean canEncode(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.Symbol.Encoder boolean isLegalReplacement(byte[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.Symbol.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.Symbol.Encoder java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.Symbol.Encoder java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.TimedWindowEvent TimedWindowEvent(java.awt.Window, int, java.awt.Window, int, int, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.TimedWindowEvent TimedWindowEvent(java.awt.Window, int, java.awt.Window, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.TimedWindowEvent long getWhen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.TracedEventQueue void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.UNIXToolkit java.awt.RenderingHints getDesktopAAHints()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.UNIXToolkit java.awt.image.BufferedImage getGTKIcon(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.UNIXToolkit java.awt.image.BufferedImage getStockIcon(int, java.lang.String, int, int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.UNIXToolkit java.lang.Object lazilyLoadDesktopProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.UNIXToolkit java.lang.Object lazilyLoadGTKIcon(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.UngrabEvent UngrabEvent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.UngrabEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout double getColFraction(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.VariableGridLayout double getRowFraction(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.VariableGridLayout java.lang.String fracsToString(double[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout java.lang.String fracsToString(double[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout void allocateExtraSpace(double[], java.util.BitSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.VerticalBagLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.VerticalBagLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.VerticalBagLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout void removeLayoutComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.VerticalBagLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11CustomCursor X11CustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11CustomCursor X11CustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11CustomCursor void createNativeCursor(java.awt.Image, int[], int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11CustomCursor void createNativeCursor(java.awt.Image, int[], int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11CustomCursor.1CCount int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11CustomCursor.1CCount int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getFileNameFromPlatformName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getFileNameFromPlatformName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getFileNameFromXLFD(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getObliqueLucidaFontID(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getObliqueLucidaFontID(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getX11FontName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getX11FontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String specificFontIDForName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String switchFontIDForName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String[] getNativeNames(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String[] getNativeNames(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11FontManager javax.swing.plaf.FontUIResource getFontConfigFUIR(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager sun.awt.FontConfiguration createFontConfiguration()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager sun.awt.FontConfiguration createFontConfiguration(boolean, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager void registerFontDirs(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig boolean isDoubleBuffered()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig int getBitsPerPixel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig int getColormap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig int getDepth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig int getSwapAction(java.awt.BufferCapabilities.FlipContents) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig int getSwapAction(java.awt.BufferCapabilities.FlipContents)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig int getVisual()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.GraphicsDevice getDevice()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.Image createAcceleratedImage(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.ImageCapabilities access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.ImageCapabilities getImageCapabilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.geom.AffineTransform getDefaultTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.geom.AffineTransform getNormalizingTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.ColorModel getColorModel(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.ComponentColorModel createABGRCCM()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.DirectColorModel createDCM32(int, int, int, int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig long createBackBuffer(sun.awt.X11ComponentPeer, int, java.awt.BufferCapabilities) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig long createBackBuffer(sun.awt.X11ComponentPeer, int, java.awt.BufferCapabilities) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig long getAData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsConfig sun.awt.X11GraphicsConfig getConfig(sun.awt.X11GraphicsDevice, int, int, int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig sun.awt.X11GraphicsConfig getConfig(sun.awt.X11GraphicsDevice, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig void flip(sun.awt.X11ComponentPeer, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig void flip(sun.awt.X11ComponentPeer, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig void flip(sun.awt.X11ComponentPeer, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig void flip(sun.awt.X11ComponentPeer, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice int getScreen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsDevice int getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.awt.DisplayMode access$100(sun.awt.X11GraphicsDevice) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.awt.DisplayMode access$100(sun.awt.X11GraphicsDevice)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.awt.DisplayMode getDefaultDisplayMode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.awt.DisplayMode getMatchingDisplayMode(java.awt.DisplayMode)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.lang.Object getProxyKeyFor(sun.java2d.loops.SurfaceType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.lang.String getIDstring()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice void access$000(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice void enterFullScreenExclusive(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice void exitFullScreenExclusive(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice void paletteChanged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsDevice.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice.1 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean access$300()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean access$500()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean isGLXAvailable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean isGLXVerbose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean isXRenderAvailable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean isXRenderVerbose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment java.awt.GraphicsDevice makeScreenDevice(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment java.awt.Rectangle getXineramaWindowBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment java.lang.String getDefaultFontFaceName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment void paletteChanged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod boolean isDisposed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethod boolean setLocale(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod java.awt.im.InputMethodHighlight convertVisualFeedbackToHighlight(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethod java.lang.Object getControlObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod java.lang.String getNativeInputMethodInfo()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethod java.util.Map mapInputMethodHighlight(java.awt.im.InputMethodHighlight) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod java.util.Map mapInputMethodHighlight(java.awt.im.InputMethodHighlight)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod void dispatchCommittedText(java.lang.String, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod void dispatchComposedText(java.lang.String, int[], int, int, int, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod void dispatchComposedText(java.lang.String, int[], int, int, int, long) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod void dispatchEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod void dispatchEvent(java.awt.AWTEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethod void hideWindows()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethod void setAWTFocussedComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod void setCharacterSubsets(java.lang.Character.Subset[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod void setCharacterSubsets(java.lang.Character.Subset[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethod void setInputMethodContext(java.awt.im.spi.InputMethodContext) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethod void setInputMethodContext(java.awt.im.spi.InputMethodContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethod.IntBuffer int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethod.IntBuffer java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod.IntBuffer void insert(int, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod.IntBuffer void replace(int, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethodDescriptor boolean hasDynamicLocaleList()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethodDescriptor java.awt.Image getInputMethodIcon(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethodDescriptor java.awt.Image getInputMethodIcon(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethodDescriptor java.lang.String getInputMethodDisplayName(java.util.Locale, java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethodDescriptor java.lang.String getInputMethodDisplayName(java.util.Locale, java.util.Locale) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.X11InputMethodDescriptor java.util.Locale[] getAvailableLocales()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings java.util.Map update(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings long access$000(sun.awt.XSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings long access$000(sun.awt.XSettings)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.awt.XSettings long access$002(sun.awt.XSettings, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings.Update Update(sun.awt.XSettings, byte[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings.Update java.lang.String getString(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.awt.XSettings.Update java.util.Map update()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
</root>
