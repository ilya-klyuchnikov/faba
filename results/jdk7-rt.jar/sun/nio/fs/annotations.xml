<root>
  <item name="sun.nio.fs.AbstractAclFileAttributeView AbstractAclFileAttributeView()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractAclFileAttributeView java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractAclFileAttributeView java.util.Map&lt;java.lang.String,java.lang.Object&gt; readAttributes(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractAclFileAttributeView java.util.Map&lt;java.lang.String,java.lang.Object&gt; readAttributes(java.lang.String[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractAclFileAttributeView void setAttribute(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView AbstractBasicFileAttributeView()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView java.util.Map&lt;java.lang.String,java.lang.Object&gt; readAttributes(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView void addRequestedBasicAttributes(java.nio.file.attribute.BasicFileAttributes, sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView void setAttribute(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder AttributesBuilder(java.util.Set&lt;java.lang.String&gt;, java.lang.String[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder java.util.Map&lt;java.lang.String,java.lang.Object&gt; unmodifiableMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder create(java.util.Set&lt;java.lang.String&gt;, java.lang.String[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder create(java.util.Set&lt;java.lang.String&gt;, java.lang.String[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractFileSystemProvider java.lang.String[] split(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractFileSystemProvider java.lang.String[] split(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractFileSystemProvider java.util.Map&lt;java.lang.String,java.lang.Object&gt; readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractFileSystemProvider void setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractFileTypeDetector boolean isTokenChar(char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractFileTypeDetector boolean isValidToken(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractFileTypeDetector java.lang.String parse(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractFileTypeDetector java.lang.String probeContentType(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractPath AbstractPath()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractPath java.io.File toFile()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractPath java.nio.file.Path resolveSibling(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractPath java.util.Iterator&lt;java.nio.file.Path&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractPoller java.nio.file.WatchKey register(java.nio.file.Path, java.nio.file.WatchEvent.Kind&lt;?&gt;[], java.nio.file.WatchEvent.Modifier...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractPoller java.nio.file.WatchKey register(java.nio.file.Path, java.nio.file.WatchEvent.Kind&lt;?&gt;[], java.nio.file.WatchEvent.Modifier...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractPoller.Request java.lang.Object[] parameters()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractPoller.Request sun.nio.fs.AbstractPoller.RequestType type()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractUserDefinedFileAttributeView AbstractUserDefinedFileAttributeView()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractUserDefinedFileAttributeView java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractUserDefinedFileAttributeView java.util.Map&lt;java.lang.String,java.lang.Object&gt; readAttributes(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey java.nio.file.Path watchable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey sun.nio.fs.AbstractWatchService watcher()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.Event T context()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.Event int count()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.Event java.nio.file.WatchEvent.Kind&lt;T&gt; kind()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchService boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchService java.lang.Object closeLock()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchService.1 boolean isValid()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchService.1 void cancel()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.BsdFileStore BsdFileStore(sun.nio.fs.UnixFileSystem, sun.nio.fs.UnixMountEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystem BsdFileSystem(sun.nio.fs.UnixFileSystemProvider, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystem java.nio.file.FileStore getFileStore(sun.nio.fs.UnixMountEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystem java.nio.file.FileStore getFileStore(sun.nio.fs.UnixMountEntry)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystem java.nio.file.WatchService newWatchService()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystem java.util.Set&lt;java.lang.String&gt; supportedFileAttributeViews()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystem void copyNonPosixAttributes(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystem.SupportedFileFileAttributeViewsHolder SupportedFileFileAttributeViewsHolder()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystem.SupportedFileFileAttributeViewsHolder java.util.Set&lt;java.lang.String&gt; supportedFileAttributeViews()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystemProvider sun.nio.fs.BsdFileStore getFileStore(sun.nio.fs.UnixPath)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystemProvider sun.nio.fs.BsdFileSystem newFileSystem(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdFileSystemProvider sun.nio.fs.BsdFileSystem newFileSystem(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.BsdNativeDispatcher BsdNativeDispatcher()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Cancellable int cancelValue()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Cancellable java.lang.Throwable exception()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Cancellable long addressToPollForCancel()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Cancellable void runInterruptibly(sun.nio.fs.Cancellable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.DefaultFileSystemProvider DefaultFileSystemProvider()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.DefaultFileTypeDetector DefaultFileTypeDetector()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.FileOwnerAttributeViewImpl java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.FileOwnerAttributeViewImpl java.util.Map&lt;java.lang.String,java.lang.Object&gt; readAttributes(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.FileOwnerAttributeViewImpl void setAttribute(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Globs Globs()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Globs boolean isGlobMeta(char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Globs boolean isRegexMeta(char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Globs char next(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Globs java.lang.String toRegexPattern(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Globs java.lang.String toRegexPattern(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Globs java.lang.String toUnixRegexPattern(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Globs java.lang.String toUnixRegexPattern(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Globs java.lang.String toWindowsRegexPattern(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Globs java.lang.String toWindowsRegexPattern(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.MacOSXFileSystem MacOSXFileSystem(sun.nio.fs.UnixFileSystemProvider, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.MacOSXFileSystem char[] normalizeNativePath(char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.MacOSXFileSystem java.lang.String normalizeJavaPath(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.MacOSXFileSystem java.lang.String normalizeJavaPath(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.MacOSXFileSystem java.util.regex.Pattern compilePathMatchPattern(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.MacOSXFileSystemProvider sun.nio.fs.MacOSXFileSystem newFileSystem(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.MacOSXFileSystemProvider sun.nio.fs.MacOSXFileSystem newFileSystem(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.MacOSXNativeDispatcher MacOSXNativeDispatcher()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.NativeBuffer int size()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.NativeBuffer java.lang.Object owner()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.NativeBuffer long address()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.NativeBuffer sun.misc.Cleaner cleaner()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.NativeBuffer sun.misc.Unsafe access$000()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.NativeBuffers NativeBuffers()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.NativeBuffers sun.nio.fs.NativeBuffer allocNativeBuffer(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.NativeBuffers sun.nio.fs.NativeBuffer asNativeBuffer(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.NativeBuffers void copyCStringToNativeBuffer(byte[], sun.nio.fs.NativeBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.NativeBuffers void copyCStringToNativeBuffer(byte[], sun.nio.fs.NativeBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService java.nio.file.WatchKey register(java.nio.file.Path, java.nio.file.WatchEvent.Kind&lt;?&gt;[], java.nio.file.WatchEvent.Modifier...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService java.nio.file.WatchKey register(java.nio.file.Path, java.nio.file.WatchEvent.Kind&lt;?&gt;[], java.nio.file.WatchEvent.Modifier...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService java.util.Map access$200(sun.nio.fs.PollingWatchService) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService java.util.Map access$200(sun.nio.fs.PollingWatchService)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService java.util.concurrent.ScheduledExecutorService access$100(sun.nio.fs.PollingWatchService) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService java.util.concurrent.ScheduledExecutorService access$100(sun.nio.fs.PollingWatchService)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService sun.nio.fs.PollingWatchService.PollingWatchKey access$000(sun.nio.fs.PollingWatchService, java.nio.file.Path, java.util.Set, com.sun.nio.file.SensitivityWatchEventModifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService sun.nio.fs.PollingWatchService.PollingWatchKey access$000(sun.nio.fs.PollingWatchService, java.nio.file.Path, java.util.Set, com.sun.nio.file.SensitivityWatchEventModifier) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService sun.nio.fs.PollingWatchService.PollingWatchKey access$000(sun.nio.fs.PollingWatchService, java.nio.file.Path, java.util.Set, com.sun.nio.file.SensitivityWatchEventModifier) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService sun.nio.fs.PollingWatchService.PollingWatchKey doPrivilegedRegister(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.WatchEvent.Kind&lt;?&gt;&gt;, com.sun.nio.file.SensitivityWatchEventModifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService sun.nio.fs.PollingWatchService.PollingWatchKey doPrivilegedRegister(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.WatchEvent.Kind&lt;?&gt;&gt;, com.sun.nio.file.SensitivityWatchEventModifier) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.1 java.lang.Thread newThread(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.CacheEntry int lastTickCount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.CacheEntry long access$300(sun.nio.fs.PollingWatchService.CacheEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.CacheEntry long access$300(sun.nio.fs.PollingWatchService.CacheEntry)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.CacheEntry long lastModified()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.PollingWatchKey PollingWatchKey(sun.nio.fs.PollingWatchService, java.nio.file.Path, sun.nio.fs.PollingWatchService, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.PollingWatchKey boolean isValid()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.PollingWatchKey java.lang.Object fileKey()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Reflect Reflect()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Reflect java.lang.reflect.Field lookupField(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory UnixChannelFactory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.io.FileDescriptor open(int, sun.nio.fs.UnixPath, java.lang.String, sun.nio.fs.UnixChannelFactory.Flags, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.io.FileDescriptor open(int, sun.nio.fs.UnixPath, java.lang.String, sun.nio.fs.UnixChannelFactory.Flags, int) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.io.FileDescriptor open(int, sun.nio.fs.UnixPath, java.lang.String, sun.nio.fs.UnixChannelFactory.Flags, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(sun.nio.fs.UnixPath, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int, sun.nio.ch.ThreadPool) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(sun.nio.fs.UnixPath, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int, sun.nio.ch.ThreadPool) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(sun.nio.fs.UnixPath, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int, sun.nio.ch.ThreadPool) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(sun.nio.fs.UnixPath, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int, sun.nio.ch.ThreadPool)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.FileChannel newFileChannel(int, java.lang.String, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.FileChannel newFileChannel(int, sun.nio.fs.UnixPath, java.lang.String, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.FileChannel newFileChannel(int, sun.nio.fs.UnixPath, java.lang.String, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.FileChannel newFileChannel(int, sun.nio.fs.UnixPath, java.lang.String, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.FileChannel newFileChannel(sun.nio.fs.UnixPath, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.FileChannel newFileChannel(sun.nio.fs.UnixPath, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory java.nio.channels.FileChannel newFileChannel(sun.nio.fs.UnixPath, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory.Flags Flags()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory.Flags sun.nio.fs.UnixChannelFactory.Flags toFlags(java.util.Set&lt;? extends java.nio.file.OpenOption&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixConstants UnixConstants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile UnixCopyFile()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile void access$000(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes, sun.nio.fs.UnixPath, sun.nio.fs.UnixCopyFile.Flags, long) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile void copy(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath, java.nio.file.CopyOption...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile void copyDirectory(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes, sun.nio.fs.UnixPath, sun.nio.fs.UnixCopyFile.Flags) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile void copyFile(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes, sun.nio.fs.UnixPath, sun.nio.fs.UnixCopyFile.Flags, long) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile void copySpecial(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes, sun.nio.fs.UnixPath, sun.nio.fs.UnixCopyFile.Flags) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile void copySpecial(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes, sun.nio.fs.UnixPath, sun.nio.fs.UnixCopyFile.Flags) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile void move(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath, java.nio.file.CopyOption...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile.2 2()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile.Flags Flags()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile.Flags sun.nio.fs.UnixCopyFile.Flags fromCopyOptions(java.nio.file.CopyOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixCopyFile.Flags sun.nio.fs.UnixCopyFile.Flags fromMoveOptions(java.nio.file.CopyOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream java.nio.file.DirectoryStream.Filter access$200(sun.nio.fs.UnixDirectoryStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream java.nio.file.DirectoryStream.Filter access$200(sun.nio.fs.UnixDirectoryStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream long access$000(sun.nio.fs.UnixDirectoryStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream long access$000(sun.nio.fs.UnixDirectoryStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream sun.nio.fs.UnixPath directory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream.UnixDirectoryIterator boolean isSelfOrParent(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream.UnixDirectoryIterator boolean isSelfOrParent(byte[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixException int errno()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixException java.io.IOException asIOException(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixException java.io.IOException asIOException(sun.nio.fs.UnixPath)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixException java.io.IOException translateToIOException(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixException void rethrowAsIOException(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixException void rethrowAsIOException(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews UnixFileAttributeViews()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews sun.nio.fs.FileOwnerAttributeViewImpl createOwnerView(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews sun.nio.fs.UnixFileAttributeViews.Basic createBasicView(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews sun.nio.fs.UnixFileAttributeViews.Posix createPosixView(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews sun.nio.fs.UnixFileAttributeViews.Unix createUnixView(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Basic void setTimes(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix java.util.Map&lt;java.lang.String,java.lang.Object&gt; readAttributes(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix void addRequestedPosixAttributes(java.nio.file.attribute.PosixFileAttributes, sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix void setAttribute(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix void setGroup(java.nio.file.attribute.GroupPrincipal) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix void setOwner(java.nio.file.attribute.UserPrincipal) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix void setPermissions(java.util.Set&lt;java.nio.file.attribute.PosixFilePermission&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Unix java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Unix java.util.Map&lt;java.lang.String,java.lang.Object&gt; readAttributes(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Unix void setAttribute(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes UnixFileAttributes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isDevice()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isDirectory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isOther()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isRegularFile()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isSameFile(sun.nio.fs.UnixFileAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isSameFile(sun.nio.fs.UnixFileAttributes)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isSymbolicLink()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes int gid()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes int mode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes int nlink()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes int uid()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.nio.file.attribute.BasicFileAttributes asBasicFileAttributes()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.nio.file.attribute.FileTime ctime()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.nio.file.attribute.FileTime lastAccessTime()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.nio.file.attribute.FileTime lastModifiedTime()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.util.Set&lt;java.nio.file.attribute.PosixFilePermission&gt; permissions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes long dev()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes long ino()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes long rdev()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes long size()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes sun.nio.fs.UnixFileAttributes get(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes sun.nio.fs.UnixFileAttributes get(int, sun.nio.fs.UnixPath, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes sun.nio.fs.UnixFileAttributes get(int, sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes sun.nio.fs.UnixFileAttributes get(sun.nio.fs.UnixPath, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes sun.nio.fs.UnixFileAttributes get(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes sun.nio.fs.UnixFileAttributes toUnixFileAttributes(java.nio.file.attribute.BasicFileAttributes) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes sun.nio.fs.UnixFileAttributes toUnixFileAttributes(java.nio.file.attribute.BasicFileAttributes)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes.UnixAsBasicFileAttributes sun.nio.fs.UnixFileAttributes unwrap()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes.UnixAsBasicFileAttributes sun.nio.fs.UnixFileAttributes.UnixAsBasicFileAttributes wrap(sun.nio.fs.UnixFileAttributes)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixFileKey boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileKey java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileModeAttribute UnixFileModeAttribute()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileModeAttribute int toUnixMode(int, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileModeAttribute int toUnixMode(java.util.Set&lt;java.nio.file.attribute.PosixFilePermission&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore UnixFileStore(sun.nio.fs.UnixFileSystem, sun.nio.fs.UnixMountEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore V getFileStoreAttributeView(java.lang.Class&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore boolean supportsFileAttributeView(java.lang.Class&lt;? extends java.nio.file.attribute.FileAttributeView&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore boolean supportsFileAttributeView(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore java.lang.Object getAttribute(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore long dev()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore sun.nio.fs.UnixFileStore.FeatureStatus checkIfFeaturePresent(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore sun.nio.fs.UnixMountEntry entry()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileStore sun.nio.fs.UnixPath file()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes UnixFileStoreAttributes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes long availableBlocks()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes long blockSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes long freeBlocks()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes long totalBlocks()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes sun.nio.fs.UnixFileStoreAttributes get(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes sun.nio.fs.UnixFileStoreAttributes get(sun.nio.fs.UnixPath)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem UnixFileSystem(sun.nio.fs.UnixFileSystemProvider, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem boolean isReadOnly()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem boolean isSolaris()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem boolean needToResolveAgainstDefaultDirectory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem byte[] defaultDirectory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem char[] normalizeNativePath(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.lang.Iterable&lt;java.nio.file.Path&gt; getRootDirectories()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.lang.String getSeparator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.lang.String normalizeJavaPath(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.nio.file.Path getPath(java.lang.String, java.lang.String...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.nio.file.Path getPath(java.lang.String, java.lang.String...)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.nio.file.PathMatcher getPathMatcher(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.nio.file.PathMatcher getPathMatcher(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.nio.file.spi.FileSystemProvider provider()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.util.List&lt;java.lang.String&gt; standardFileAttributeViews()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.util.regex.Pattern compilePathMatchPattern(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem sun.nio.fs.UnixPath access$000(sun.nio.fs.UnixFileSystem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem sun.nio.fs.UnixPath access$000(sun.nio.fs.UnixFileSystem)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem sun.nio.fs.UnixPath rootDirectory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem void copyNonPosixAttributes(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.2 java.util.Iterator&lt;java.nio.file.FileStore&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.3 boolean matches(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.FileStoreIterator FileStoreIterator(sun.nio.fs.UnixFileSystem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.LookupService LookupService()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.LookupService.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.LookupService.1 java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.LookupService.1 java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.LookupService.1 java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider V getFileAttributeView(java.nio.file.Path, java.lang.Class&lt;V&gt;, java.nio.file.LinkOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider V getFileAttributeView(java.nio.file.Path, java.lang.Class&lt;V&gt;, java.nio.file.LinkOption...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider V getFileAttributeView(java.nio.file.Path, java.lang.Class&lt;V&gt;, java.nio.file.LinkOption...)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider boolean implDelete(java.nio.file.Path, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider boolean isHidden(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider boolean isSameFile(java.nio.file.Path, java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider boolean isSameFile(java.nio.file.Path, java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.lang.String getScheme()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.channels.FileChannel newFileChannel(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.DirectoryStream&lt;java.nio.file.Path&gt; newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream.Filter&lt;? super java.nio.file.Path&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.DirectoryStream&lt;java.nio.file.Path&gt; newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream.Filter&lt;? super java.nio.file.Path&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.DirectoryStream&lt;java.nio.file.Path&gt; newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream.Filter&lt;? super java.nio.file.Path&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.FileStore getFileStore(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.FileSystem getFileSystem(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map&lt;java.lang.String,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map&lt;java.lang.String,?&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.Path getPath(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.Path readSymbolicLink(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.nio.file.spi.FileTypeDetector getFileTypeDetector()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider sun.nio.fs.UnixPath checkPath(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider sun.nio.fs.UnixPath checkPath(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void checkAccess(java.nio.file.Path, java.nio.file.AccessMode...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void checkAccess(java.nio.file.Path, java.nio.file.AccessMode...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void checkUri(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void createLink(java.nio.file.Path, java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void createLink(java.nio.file.Path, java.nio.file.Path) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider void move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider.1 java.lang.String implProbeContentType(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider.1 java.lang.String implProbeContentType(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixMountEntry UnixMountEntry()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixMountEntry boolean hasOption(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixMountEntry byte[] dir()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixMountEntry java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixMountEntry long dev()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher UnixNativeDispatcher()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher boolean supportsAtSysCalls()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher boolean supportsNoFollowLinks()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher byte[] readlink(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher byte[] realpath(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher int getgrnam(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher int getpwnam(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher int open(sun.nio.fs.UnixPath, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher int openat(int, byte[], int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher long fopen(sun.nio.fs.UnixPath, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher long fopen(sun.nio.fs.UnixPath, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher long opendir(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher long pathconf(sun.nio.fs.UnixPath, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher sun.nio.fs.NativeBuffer copyToNativeBuffer(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void access(sun.nio.fs.UnixPath, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void chmod(sun.nio.fs.UnixPath, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void chown(sun.nio.fs.UnixPath, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void fstatat(int, byte[], int, sun.nio.fs.UnixFileAttributes) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void lchown(sun.nio.fs.UnixPath, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void link(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void link(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void lstat(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void mkdir(sun.nio.fs.UnixPath, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void mknod(sun.nio.fs.UnixPath, int, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void rename(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void rename(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void renameat(int, byte[], int, byte[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void renameat(int, byte[], int, byte[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void rmdir(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void stat(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void statvfs(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileStoreAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void symlink(byte[], sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void symlink(byte[], sun.nio.fs.UnixPath) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void unlink(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void unlinkat(int, byte[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher void utimes(sun.nio.fs.UnixPath, long, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixPath UnixPath(sun.nio.fs.UnixFileSystem, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath UnixPath(sun.nio.fs.UnixFileSystem, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath boolean endsWith(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath boolean endsWith(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixPath boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath boolean isAbsolute()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixPath boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixPath boolean startsWith(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath boolean startsWith(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath byte[] asByteArray()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixPath byte[] encode(sun.nio.fs.UnixFileSystem, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath byte[] encode(sun.nio.fs.UnixFileSystem, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath byte[] encode(sun.nio.fs.UnixFileSystem, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath byte[] resolve(byte[], byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath byte[] resolve(byte[], byte[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath int compareTo(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath int compareTo(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixPath java.lang.String normalize(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath java.lang.String normalizeAndCheck(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath java.lang.String normalizeAndCheck(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath java.net.URI toUri()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath java.nio.file.Path toRealPath(java.nio.file.LinkOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent.Kind&lt;?&gt;[], java.nio.file.WatchEvent.Modifier...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixFileSystem getFileSystem()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath emptyPath()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath getName(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath relativize(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath resolve(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath resolve(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath subpath(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath toAbsolutePath()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath toUnixPath(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath toUnixPath(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream V getFileAttributeView(java.lang.Class&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream V getFileAttributeView(java.nio.file.Path, java.lang.Class&lt;V&gt;, java.nio.file.LinkOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream V getFileAttributeView(java.nio.file.Path, java.lang.Class&lt;V&gt;, java.nio.file.LinkOption...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream V getFileAttributeView(java.nio.file.Path, java.lang.Class&lt;V&gt;, java.nio.file.LinkOption...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream V getFileAttributeViewImpl(sun.nio.fs.UnixPath, java.lang.Class&lt;V&gt;, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream int access$000(sun.nio.fs.UnixSecureDirectoryStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream int access$000(sun.nio.fs.UnixSecureDirectoryStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set&lt;? extends java.nio.file.OpenOption&gt;, java.nio.file.attribute.FileAttribute&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream java.nio.file.SecureDirectoryStream&lt;java.nio.file.Path&gt; newDirectoryStream(java.nio.file.Path, java.nio.file.LinkOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream java.nio.file.SecureDirectoryStream&lt;java.nio.file.Path&gt; newDirectoryStream(java.nio.file.Path, java.nio.file.LinkOption...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream java.nio.file.SecureDirectoryStream&lt;java.nio.file.Path&gt; newDirectoryStream(java.nio.file.Path, java.nio.file.LinkOption...)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream sun.nio.fs.UnixPath getName(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream sun.nio.fs.UnixPath getName(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream void deleteDirectory(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream void deleteFile(java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream void implDelete(java.nio.file.Path, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream void move(java.nio.file.Path, java.nio.file.SecureDirectoryStream&lt;java.nio.file.Path&gt;, java.nio.file.Path) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream void move(java.nio.file.Path, java.nio.file.SecureDirectoryStream&lt;java.nio.file.Path&gt;, java.nio.file.Path) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream void move(java.nio.file.Path, java.nio.file.SecureDirectoryStream&lt;java.nio.file.Path&gt;, java.nio.file.Path) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.BasicFileAttributeViewImpl java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.BasicFileAttributeViewImpl void access$200(sun.nio.fs.UnixSecureDirectoryStream.BasicFileAttributeViewImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.BasicFileAttributeViewImpl void setTimes(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.PosixFileAttributeViewImpl java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.PosixFileAttributeViewImpl void setGroup(java.nio.file.attribute.GroupPrincipal) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.PosixFileAttributeViewImpl void setOwner(java.nio.file.attribute.UserPrincipal) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils UnixUriUtils()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils boolean match(char, long, long)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils java.net.URI toUri(sun.nio.fs.UnixPath) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils java.net.URI toUri(sun.nio.fs.UnixPath)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils java.nio.file.Path fromUri(sun.nio.fs.UnixFileSystem, java.net.URI) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils long highMask(char, char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils long highMask(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils long lowMask(char, char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixUriUtils long lowMask(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals UnixUserPrincipals()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals int lookupName(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals java.nio.file.attribute.GroupPrincipal lookupGroup(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals java.nio.file.attribute.GroupPrincipal lookupGroup(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals java.nio.file.attribute.UserPrincipal lookupUser(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals sun.nio.fs.UnixUserPrincipals.Group fromGid(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals sun.nio.fs.UnixUserPrincipals.User createSpecial(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals sun.nio.fs.UnixUserPrincipals.User fromUid(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User User(int, boolean, java.lang.String, sun.nio.fs.UnixUserPrincipals.1) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User boolean isSpecial()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Util Util()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.nio.fs.Util boolean followLinks(java.nio.file.LinkOption...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Util java.lang.String[] split(java.lang.String, char) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Util java.util.Set&lt;E&gt; newSet(E...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Util java.util.Set&lt;E&gt; newSet(java.util.Set&lt;E&gt;, E...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.fs.Util java.util.Set&lt;E&gt; newSet(java.util.Set&lt;E&gt;, E...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
