<root>
  <item name="sun.nio.ch.AbstractPollSelectorImpl java.nio.channels.Selector wakeup()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AbstractPollSelectorImpl void implDereg(sun.nio.ch.SelectionKeyImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AbstractPollSelectorImpl void implRegister(sun.nio.ch.SelectionKeyImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AbstractPollSelectorImpl void putEventOps(sun.nio.ch.SelectionKeyImpl, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousChannelGroupImpl AsynchronousChannelGroupImpl(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousChannelGroupImpl java.lang.Runnable bindToGroup(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousChannelGroupImpl java.util.concurrent.ScheduledThreadPoolExecutor access$100(sun.nio.ch.AsynchronousChannelGroupImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousChannelGroupImpl sun.nio.ch.ThreadPool access$000(sun.nio.ch.AsynchronousChannelGroupImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousFileChannelImpl void lock(long, long, boolean, A, java.nio.channels.CompletionHandler&lt;java.nio.channels.FileLock,? super A&gt;) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousFileChannelImpl void read(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer,? super A&gt;) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousFileChannelImpl void write(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer,? super A&gt;) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl AsynchronousServerSocketChannelImpl(sun.nio.ch.AsynchronousChannelGroupImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl T getOption(java.net.SocketOption&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl java.nio.channels.AsynchronousServerSocketChannel bind(java.net.SocketAddress, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl java.nio.channels.AsynchronousServerSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl java.nio.channels.AsynchronousServerSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl java.nio.channels.AsynchronousServerSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl void accept(A, java.nio.channels.CompletionHandler&lt;java.nio.channels.AsynchronousSocketChannel,? super A&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl void onCancel(sun.nio.ch.PendingFuture&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.AsynchronousServerSocketChannelImpl.DefaultOptionsHolder java.util.Set&lt;java.net.SocketOption&lt;?&gt;&gt; defaultOptions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl AsynchronousSocketChannelImpl(sun.nio.ch.AsynchronousChannelGroupImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl AsynchronousSocketChannelImpl(sun.nio.ch.AsynchronousChannelGroupImpl, java.io.FileDescriptor, java.net.InetSocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl T getOption(java.net.SocketOption&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.AsynchronousSocketChannel bind(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.AsynchronousSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.AsynchronousSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.AsynchronousSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.AsynchronousSocketChannel shutdownInput()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.AsynchronousSocketChannel shutdownOutput()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.NetworkChannel bind(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl java.util.concurrent.Future&lt;java.lang.Integer&gt; read(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl void connect(java.net.SocketAddress, A, java.nio.channels.CompletionHandler&lt;java.lang.Void,? super A&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl void read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer,? super A&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl void read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer,? super A&gt;) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl void read(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;java.lang.Long,? super A&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl void read(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;java.lang.Long,? super A&gt;) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl void write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer,? super A&gt;) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl void write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;java.lang.Long,? super A&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl void write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;java.lang.Long,? super A&gt;) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.AsynchronousSocketChannelImpl.DefaultOptionsHolder java.util.Set&lt;java.net.SocketOption&lt;?&gt;&gt; defaultOptions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int, java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider sun.nio.ch.Port toPort(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.BsdAsynchronousChannelProvider sun.nio.ch.Port toPort(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.ChannelInputStream int read(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ChannelInputStream int read(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.CompletedFuture V get(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.CompletedFuture boolean cancel(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.CompletedFuture sun.nio.ch.CompletedFuture&lt;V&gt; withFailure(java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.CompletedFuture sun.nio.ch.CompletedFuture&lt;V&gt; withResult(V)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.CompletedFuture sun.nio.ch.CompletedFuture&lt;V&gt; withResult(V, java.lang.Throwable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.CompletedFuture sun.nio.ch.CompletedFuture&lt;V&gt; withResult(V, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl T getOption(java.net.SocketOption&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl int read(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl int receive(java.io.FileDescriptor, java.nio.ByteBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl int receiveIntoNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl int send(java.io.FileDescriptor, java.nio.ByteBuffer, java.net.InetSocketAddress) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl int send(java.nio.ByteBuffer, java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl int send(java.nio.ByteBuffer, java.net.SocketAddress) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl int sendFromNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, java.net.InetSocketAddress) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl int write(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.net.SocketAddress receive(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.DatagramChannel bind(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.DatagramChannel connect(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.DatagramChannel connect(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.DatagramChannel disconnect()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.DatagramChannel setOption(java.net.SocketOption&lt;T&gt;, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.DatagramChannel setOption(java.net.SocketOption&lt;T&gt;, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.MembershipKey innerJoin(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.MembershipKey innerJoin(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl long read(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl long write(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl void block(sun.nio.ch.MembershipKeyImpl, java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl void block(sun.nio.ch.MembershipKeyImpl, java.net.InetAddress) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl void drop(sun.nio.ch.MembershipKeyImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl void unblock(sun.nio.ch.MembershipKeyImpl, java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl void unblock(sun.nio.ch.MembershipKeyImpl, java.net.InetAddress) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramChannelImpl.DefaultOptionsHolder java.util.Set&lt;java.net.SocketOption&lt;?&gt;&gt; defaultOptions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor java.net.DatagramSocket create(sun.nio.ch.DatagramChannelImpl)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor void bind(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor void connect(java.net.InetAddress, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor void connect(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor void connectInternal(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 int peek(java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 int peekData(java.net.DatagramPacket) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void bind(int, java.net.InetAddress) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void join(java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void joinGroup(java.net.SocketAddress, java.net.NetworkInterface) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void joinGroup(java.net.SocketAddress, java.net.NetworkInterface) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void leave(java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void receive(java.net.DatagramPacket) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void send(java.net.DatagramPacket) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DatagramSocketAdaptor.1 void setOption(int, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.DefaultAsynchronousChannelProvider java.nio.channels.spi.AsynchronousChannelProvider create()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.DefaultSelectorProvider java.nio.channels.spi.SelectorProvider create()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort EPollPort(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort int access$100(sun.nio.ch.EPollPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort int[] access$300(sun.nio.ch.EPollPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.EPollPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort java.util.concurrent.atomic.AtomicInteger access$400(sun.nio.ch.EPollPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort long access$200(sun.nio.ch.EPollPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort sun.nio.ch.EPollPort start()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort sun.nio.ch.EPollPort.Event access$600(sun.nio.ch.EPollPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort sun.nio.ch.EPollPort.Event access$800(sun.nio.ch.EPollPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort void access$900(sun.nio.ch.EPollPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.EPollPort.EventHandlerTask EventHandlerTask(sun.nio.ch.EPollPort, sun.nio.ch.EPollPort.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.ExtendedSocketOption.1 java.lang.Class&lt;java.lang.Boolean&gt; type()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ExtendedSocketOption.1 java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ExtendedSocketOption.1 java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl int read(java.nio.ByteBuffer, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl int write(java.nio.ByteBuffer, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl java.nio.MappedByteBuffer map(java.nio.channels.FileChannel.MapMode, long, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl java.nio.channels.FileChannel open(java.io.FileDescriptor, java.lang.String, boolean, boolean, boolean, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl java.nio.channels.FileChannel open(java.io.FileDescriptor, java.lang.String, boolean, boolean, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl long read(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl long transferFrom(java.nio.channels.ReadableByteChannel, long, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl long transferFromFileChannel(sun.nio.ch.FileChannelImpl, long, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl long transferTo(long, long, java.nio.channels.WritableByteChannel) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl long transferToTrustedChannel(long, long, java.nio.channels.WritableByteChannel) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl long write(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl sun.misc.JavaNioAccess.BufferPool getMappedBufferPool()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl void release(sun.nio.ch.FileLockImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl void unmap(java.nio.MappedByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl.1 java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl.SimpleFileLockTable java.util.List&lt;java.nio.channels.FileLock&gt; removeAll()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl.SimpleFileLockTable void add(java.nio.channels.FileLock) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileChannelImpl.Unmapper Unmapper(long, long, int, java.io.FileDescriptor, sun.nio.ch.FileChannelImpl.1) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.FileDispatcherImpl java.io.FileDescriptor duplicateForMapping(java.io.FileDescriptor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.FileDispatcherImpl java.io.FileDescriptor duplicateForMapping(java.io.FileDescriptor)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.FileKey sun.nio.ch.FileKey create(java.io.FileDescriptor)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.FileLockTable sun.nio.ch.FileLockTable newSharedFileLockTable(java.nio.channels.Channel, java.io.FileDescriptor)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.IOUtil int read(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.IOUtil int readIntoNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.IOUtil int write(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.IOUtil int writeFromNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.IOUtil java.io.FileDescriptor newFD(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.IOUtil long read(java.io.FileDescriptor, java.nio.ByteBuffer[], sun.nio.ch.NativeDispatcher) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.IOUtil long write(java.io.FileDescriptor, java.nio.ByteBuffer[], sun.nio.ch.NativeDispatcher) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.IOVecWrapper sun.nio.ch.IOVecWrapper get(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel void checkAccess(java.nio.channels.Channel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl int read(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl int send(java.nio.ByteBuffer, java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl int send(java.nio.ByteBuffer, java.net.SocketAddress) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl int write(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.lang.Object getOption(java.net.SocketOption) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.net.SocketAddress receive(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.DatagramChannel bind(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.DatagramChannel connect(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.DatagramChannel connect(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.DatagramChannel disconnect()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.DatagramChannel setOption(java.net.SocketOption, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.DatagramChannel setOption(java.net.SocketOption, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl long read(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl long write(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedDatagramChannelImpl void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl java.lang.Object getOption(java.net.SocketOption) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedServerSocketChannelImpl void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl boolean connect(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl int read(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl int write(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl java.lang.Object getOption(java.net.SocketOption) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl java.nio.channels.SocketChannel bind(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl java.nio.channels.SocketChannel setOption(java.net.SocketOption, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl java.nio.channels.SocketChannel setOption(java.net.SocketOption, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl java.nio.channels.SocketChannel shutdownInput()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl java.nio.channels.SocketChannel shutdownOutput()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl long read(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl long write(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.InheritedChannel.InheritedSocketChannelImpl void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker boolean mayInvokeDirect(sun.nio.ch.Invoker.GroupAndInvokeCount, sun.nio.ch.AsynchronousChannelGroupImpl) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Invoker boolean mayInvokeDirect(sun.nio.ch.Invoker.GroupAndInvokeCount, sun.nio.ch.AsynchronousChannelGroupImpl) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Invoker boolean mayInvokeDirect(sun.nio.ch.Invoker.GroupAndInvokeCount, sun.nio.ch.AsynchronousChannelGroupImpl)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.Invoker void invoke(sun.nio.ch.PendingFuture&lt;V,A&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeDirect(sun.nio.ch.Invoker.GroupAndInvokeCount, java.nio.channels.CompletionHandler&lt;V,? super A&gt;, A, V, java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeDirect(sun.nio.ch.Invoker.GroupAndInvokeCount, java.nio.channels.CompletionHandler&lt;V,? super A&gt;, A, V, java.lang.Throwable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeDirect(sun.nio.ch.Invoker.GroupAndInvokeCount, java.nio.channels.CompletionHandler&lt;V,? super A&gt;, A, V, java.lang.Throwable) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeIndirectly(java.nio.channels.AsynchronousChannel, java.nio.channels.CompletionHandler&lt;V,? super A&gt;, A, V, java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeIndirectly(java.nio.channels.CompletionHandler&lt;V,? super A&gt;, A, V, java.lang.Throwable, java.util.concurrent.Executor) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeIndirectly(sun.nio.ch.PendingFuture&lt;V,A&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeOnThreadInThreadPool(sun.nio.ch.Groupable, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeUnchecked(java.nio.channels.CompletionHandler&lt;V,? super A&gt;, A, V, java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeUnchecked(java.nio.channels.CompletionHandler&lt;V,? super A&gt;, A, V, java.lang.Throwable) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Invoker void invokeUnchecked(sun.nio.ch.PendingFuture&lt;V,A&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Invoker.GroupAndInvokeCount sun.nio.ch.AsynchronousChannelGroupImpl access$100(sun.nio.ch.Invoker.GroupAndInvokeCount) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueueArrayWrapper void release(sun.nio.ch.SelChImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort KQueuePort(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort int access$100(sun.nio.ch.KQueuePort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort int[] access$300(sun.nio.ch.KQueuePort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.KQueuePort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort java.util.concurrent.atomic.AtomicInteger access$400(sun.nio.ch.KQueuePort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort long access$200(sun.nio.ch.KQueuePort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort sun.nio.ch.KQueuePort start()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort sun.nio.ch.KQueuePort.Event access$600(sun.nio.ch.KQueuePort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort sun.nio.ch.KQueuePort.Event access$800(sun.nio.ch.KQueuePort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort void access$900(sun.nio.ch.KQueuePort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueuePort.EventHandlerTask EventHandlerTask(sun.nio.ch.KQueuePort, sun.nio.ch.KQueuePort.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.KQueueSelectorImpl java.nio.channels.Selector wakeup()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueueSelectorImpl void implDereg(sun.nio.ch.SelectionKeyImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueueSelectorImpl void implRegister(sun.nio.ch.SelectionKeyImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueueSelectorImpl void putEventOps(sun.nio.ch.SelectionKeyImpl, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.KQueueSelectorProvider java.nio.channels.spi.AbstractSelector openSelector()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int, java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider sun.nio.ch.Port toPort(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.LinuxAsynchronousChannelProvider sun.nio.ch.Port toPort(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.MembershipKeyImpl MembershipKeyImpl(java.nio.channels.MulticastChannel, java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress, sun.nio.ch.MembershipKeyImpl.1) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.MembershipKeyImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.MembershipKeyImpl java.nio.channels.MembershipKey block(java.net.InetAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.MembershipKeyImpl java.nio.channels.MembershipKey unblock(java.net.InetAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.MembershipRegistry java.nio.channels.MembershipKey checkMembership(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.MembershipRegistry void add(sun.nio.ch.MembershipKeyImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.MembershipRegistry void remove(sun.nio.ch.MembershipKeyImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.NativeDispatcher int pread(java.io.FileDescriptor, long, int, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.NativeDispatcher int pwrite(java.io.FileDescriptor, long, int, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.NativeDispatcher void preClose(java.io.FileDescriptor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.NativeObject sun.nio.ch.NativeObject getObject(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.NativeObject sun.nio.ch.NativeObject subObject(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.NativeObject void putObject(int, sun.nio.ch.NativeObject) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net byte[] inet6AsByteArray(java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net int connect(java.net.ProtocolFamily, java.io.FileDescriptor, java.net.InetAddress, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Net int inet4AsInt(java.net.InetAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.io.FileDescriptor serverSocket(boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.io.FileDescriptor socket(boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.io.FileDescriptor socket(java.net.ProtocolFamily, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Net java.io.FileDescriptor socket(java.net.ProtocolFamily, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.lang.Object getSocketOption(java.io.FileDescriptor, java.net.ProtocolFamily, java.net.SocketOption&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.lang.String getRevealedLocalAddressAsString(java.net.InetSocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.net.InetAddress inet4FromInt(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.net.InetSocketAddress asInetSocketAddress(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.net.InetSocketAddress asInetSocketAddress(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.Net java.net.InetSocketAddress checkAddress(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.net.InetSocketAddress checkAddress(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.Net java.net.InetSocketAddress getLoopbackAddress(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.net.InetSocketAddress getRevealedLocalAddress(java.net.InetSocketAddress)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.Net java.net.InetSocketAddress localAddress(java.io.FileDescriptor)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net java.net.InetSocketAddress remoteAddress(java.io.FileDescriptor)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net void bind(java.net.ProtocolFamily, java.io.FileDescriptor, java.net.InetAddress, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Net void setSocketOption(java.io.FileDescriptor, java.net.ProtocolFamily, java.net.SocketOption&lt;?&gt;, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net void setSocketOption(java.io.FileDescriptor, java.net.ProtocolFamily, java.net.SocketOption&lt;?&gt;, java.lang.Object) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net void translateException(java.lang.Exception) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net void translateException(java.lang.Exception, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net void translateToSocketException(java.lang.Exception) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Net.1 java.lang.String name()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.PendingFuture void setResult(V, java.lang.Throwable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.PollArrayWrapper void addEntry(sun.nio.ch.SelChImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.PollArrayWrapper void replaceEntry(sun.nio.ch.PollArrayWrapper, int, sun.nio.ch.PollArrayWrapper, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.PollArrayWrapper void replaceEntry(sun.nio.ch.PollArrayWrapper, int, sun.nio.ch.PollArrayWrapper, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.PollSelectorImpl java.nio.channels.Selector wakeup()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.PollSelectorProvider java.nio.channels.spi.AbstractSelector openSelector()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Port Port(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Port void detachForeignChannel(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.Object get(java.lang.Object, java.lang.reflect.Field) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.Object get(java.lang.reflect.Field) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.Object invoke(java.lang.reflect.Constructor, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.Object invoke(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.Object invokeIO(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.reflect.Constructor lookupConstructor(java.lang.String, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.reflect.Field lookupField(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.reflect.Field lookupField(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.reflect.Method lookupMethod(java.lang.String, java.lang.String, java.lang.Class...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.reflect.Method lookupMethod(java.lang.String, java.lang.String, java.lang.Class...) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Reflect java.lang.reflect.Method lookupMethod(java.lang.String, java.lang.String, java.lang.Class...)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect void set(java.lang.Object, java.lang.reflect.Field, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect void setBoolean(java.lang.Object, java.lang.reflect.Field, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Reflect void setInt(java.lang.Object, java.lang.reflect.Field, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Secrets java.nio.channels.ServerSocketChannel newServerSocketChannel(java.io.FileDescriptor)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Secrets java.nio.channels.SocketChannel newSocketChannel(java.io.FileDescriptor)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SelectionKeyImpl java.nio.channels.SelectionKey nioInterestOps(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SelectorImpl java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel, int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SelectorImpl java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel, int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SelectorImpl void putEventOps(sun.nio.ch.SelectionKeyImpl, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SelectorProviderImpl java.nio.channels.DatagramChannel openDatagramChannel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SelectorProviderImpl java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SelectorProviderImpl java.nio.channels.Pipe openPipe()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SelectorProviderImpl java.nio.channels.ServerSocketChannel openServerSocketChannel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SelectorProviderImpl java.nio.channels.SocketChannel openSocketChannel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketAdaptor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketAdaptor java.net.ServerSocket create(sun.nio.ch.ServerSocketChannelImpl)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketAdaptor void bind(java.net.SocketAddress, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl T getOption(java.net.SocketOption&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption&lt;T&gt;, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ServerSocketChannelImpl.DefaultOptionsHolder java.util.Set&lt;java.net.SocketOption&lt;?&gt;&gt; defaultOptions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SharedFileLockTable void checkList(java.util.List&lt;sun.nio.ch.SharedFileLockTable.FileLockReference&gt;, long, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SharedFileLockTable void removeKeyIfEmpty(sun.nio.ch.FileKey, java.util.List&lt;sun.nio.ch.SharedFileLockTable.FileLockReference&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SharedFileLockTable void replace(java.nio.channels.FileLock, java.nio.channels.FileLock) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SharedFileLockTable.FileLockReference FileLockReference(java.nio.channels.FileLock, java.lang.ref.ReferenceQueue&lt;java.nio.channels.FileLock&gt;, sun.nio.ch.FileKey) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SimpleAsynchronousFileChannelImpl java.nio.channels.AsynchronousFileChannel open(java.io.FileDescriptor, boolean, boolean, sun.nio.ch.ThreadPool) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SimpleAsynchronousFileChannelImpl java.nio.channels.AsynchronousFileChannel open(java.io.FileDescriptor, boolean, boolean, sun.nio.ch.ThreadPool)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SimpleAsynchronousFileChannelImpl java.util.concurrent.Future&lt;java.lang.Integer&gt; implRead(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer,? super A&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SimpleAsynchronousFileChannelImpl java.util.concurrent.Future&lt;java.lang.Integer&gt; implRead(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer,? super A&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,!null-&gt;null;_,_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.SimpleAsynchronousFileChannelImpl java.util.concurrent.Future&lt;java.lang.Integer&gt; implWrite(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler&lt;java.lang.Integer,? super A&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,!null-&gt;null;_,_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.SimpleAsynchronousFileChannelImpl java.util.concurrent.Future&lt;java.nio.channels.FileLock&gt; implLock(long, long, boolean, A, java.nio.channels.CompletionHandler&lt;java.nio.channels.FileLock,? super A&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,_,!null-&gt;null;_,_,_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.SimpleAsynchronousFileChannelImpl sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SimpleAsynchronousFileChannelImpl void implRelease(sun.nio.ch.FileLockImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SinkChannelImpl boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SinkChannelImpl boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SinkChannelImpl long write(java.nio.ByteBuffer[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SinkChannelImpl long write(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SinkChannelImpl void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor int access$100(sun.nio.ch.SocketAdaptor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor java.net.Socket create(sun.nio.ch.SocketChannelImpl)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor sun.nio.ch.SocketChannelImpl access$000(sun.nio.ch.SocketAdaptor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor void connect(java.net.SocketAddress, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor.1 java.io.InputStream run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor.2 java.io.OutputStream run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor.SocketInputStream SocketInputStream(sun.nio.ch.SocketAdaptor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor.SocketInputStream SocketInputStream(sun.nio.ch.SocketAdaptor, sun.nio.ch.SocketAdaptor.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketAdaptor.SocketInputStream SocketInputStream(sun.nio.ch.SocketAdaptor, sun.nio.ch.SocketAdaptor.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl T getOption(java.net.SocketOption&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl boolean connect(java.net.SocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl int read(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl int write(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl java.nio.channels.SocketChannel bind(java.net.SocketAddress)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl java.nio.channels.SocketChannel setOption(java.net.SocketOption&lt;T&gt;, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl java.nio.channels.SocketChannel setOption(java.net.SocketOption&lt;T&gt;, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl java.nio.channels.SocketChannel shutdownInput()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl java.nio.channels.SocketChannel shutdownOutput()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl long read(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl long write(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketChannelImpl.DefaultOptionsHolder java.util.Set&lt;java.net.SocketOption&lt;?&gt;&gt; defaultOptions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketOptionRegistry.LazyInitialization java.util.Map&lt;sun.nio.ch.SocketOptionRegistry.RegistryKey,sun.nio.ch.OptionKey&gt; options()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SocketOptionRegistry.RegistryKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SocketOptionRegistry.RegistryKey boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.SolarisAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SolarisAsynchronousChannelProvider java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SolarisAsynchronousChannelProvider java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SolarisAsynchronousChannelProvider java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SolarisAsynchronousChannelProvider java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SolarisAsynchronousChannelProvider java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SolarisAsynchronousChannelProvider sun.nio.ch.SolarisEventPort toEventPort(java.nio.channels.AsynchronousChannelGroup) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SolarisAsynchronousChannelProvider sun.nio.ch.SolarisEventPort toEventPort(java.nio.channels.AsynchronousChannelGroup)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.SolarisEventPort SolarisEventPort(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SolarisEventPort int access$200(sun.nio.ch.SolarisEventPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SolarisEventPort sun.nio.ch.SolarisEventPort start()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SolarisEventPort void access$300(sun.nio.ch.SolarisEventPort) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SolarisEventPort.EventHandlerTask EventHandlerTask(sun.nio.ch.SolarisEventPort, sun.nio.ch.SolarisEventPort.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.SourceChannelImpl boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SourceChannelImpl boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SourceChannelImpl long read(java.nio.ByteBuffer[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SourceChannelImpl long read(java.nio.ByteBuffer[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.SourceChannelImpl void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ThreadPool sun.nio.ch.ThreadPool create(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ThreadPool sun.nio.ch.ThreadPool create(int, java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ThreadPool sun.nio.ch.ThreadPool createDefault()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ThreadPool sun.nio.ch.ThreadPool wrap(java.util.concurrent.ExecutorService, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ThreadPool sun.nio.ch.ThreadPool wrap(java.util.concurrent.ExecutorService, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.ThreadPool.1 java.lang.Thread newThread(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousServerSocketChannelImpl UnixAsynchronousServerSocketChannelImpl(sun.nio.ch.Port) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousServerSocketChannelImpl java.nio.channels.AsynchronousSocketChannel finishAccept(java.io.FileDescriptor, java.net.InetSocketAddress, java.security.AccessControlContext)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousServerSocketChannelImpl java.util.concurrent.Future&lt;java.nio.channels.AsynchronousSocketChannel&gt; implAccept(java.lang.Object, java.nio.channels.CompletionHandler&lt;java.nio.channels.AsynchronousSocketChannel,java.lang.Object&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;null;_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl UnixAsynchronousSocketChannelImpl(sun.nio.ch.Port) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl UnixAsynchronousSocketChannelImpl(sun.nio.ch.Port, java.io.FileDescriptor, java.net.InetSocketAddress) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl boolean access$100(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl boolean access$102(sun.nio.ch.UnixAsynchronousSocketChannelImpl, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl boolean access$102(sun.nio.ch.UnixAsynchronousSocketChannelImpl, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,false-&gt;false;_,true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl boolean access$500(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl boolean access$502(sun.nio.ch.UnixAsynchronousSocketChannelImpl, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl boolean access$502(sun.nio.ch.UnixAsynchronousSocketChannelImpl, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,false-&gt;false;_,true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl java.lang.Object access$000(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl java.lang.Object access$300(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl java.lang.Object access$700(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl java.nio.channels.CompletionHandler access$200(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl java.nio.channels.CompletionHandler access$600(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl java.util.concurrent.Future&lt;V&gt; implRead(boolean, java.nio.ByteBuffer, java.nio.ByteBuffer[], long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;V,? super A&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,_,_,_,!null-&gt;null;_,_,_,_,_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl java.util.concurrent.Future&lt;V&gt; implWrite(boolean, java.nio.ByteBuffer, java.nio.ByteBuffer[], long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler&lt;V,? super A&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,_,_,_,!null-&gt;null;_,_,_,_,_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl java.util.concurrent.Future&lt;java.lang.Void&gt; implConnect(java.net.SocketAddress, A, java.nio.channels.CompletionHandler&lt;java.lang.Void,? super A&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;null;_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl sun.nio.ch.PendingFuture access$400(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl sun.nio.ch.PendingFuture access$800(sun.nio.ch.UnixAsynchronousSocketChannelImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.UnixAsynchronousSocketChannelImpl void onCancel(sun.nio.ch.PendingFuture&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util boolean atBugLevel(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Util java.lang.reflect.Constructor access$302(java.lang.reflect.Constructor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.Util java.lang.reflect.Constructor access$402(java.lang.reflect.Constructor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.nio.ch.Util java.nio.ByteBuffer getTemporaryDirectBuffer(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util java.nio.channels.Selector getTemporarySelector(java.nio.channels.SelectableChannel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util java.util.Set&lt;E&gt; ungrowableSet(java.util.Set&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util void erase(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util void free(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util void releaseTemporarySelector(java.nio.channels.Selector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util.1 java.lang.Object initialValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util.1 sun.nio.ch.Util.BufferCache initialValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.nio.ch.Util.2 boolean add(E) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Util.2 boolean addAll(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Util.SelectorWrapper SelectorWrapper(java.nio.channels.Selector, sun.nio.ch.Util.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.nio.ch.Util.SelectorWrapper.Closer Closer(java.nio.channels.Selector, sun.nio.ch.Util.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
</root>
