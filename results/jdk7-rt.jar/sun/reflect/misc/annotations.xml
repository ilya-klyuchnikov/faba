<root>
  <item name="sun.reflect.misc.ConstructorUtil ConstructorUtil()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.misc.ConstructorUtil java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ConstructorUtil java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.ConstructorUtil java.lang.reflect.Constructor[] getConstructors(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.FieldUtil FieldUtil()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.misc.FieldUtil java.lang.reflect.Field getField(java.lang.Class, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.FieldUtil java.lang.reflect.Field getField(java.lang.Class, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.FieldUtil java.lang.reflect.Field getField(java.lang.Class, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.FieldUtil java.lang.reflect.Field[] getDeclaredFields(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.FieldUtil java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.FieldUtil java.lang.reflect.Field[] getFields(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.FieldUtil java.lang.reflect.Field[] getFields(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil byte[] getBytes(java.net.URL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil byte[] getBytes(java.net.URL)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.Class access$000()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.Class defineClass(java.lang.String, java.net.URL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.Class defineClass(java.lang.String, java.net.URL) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.Class findClass(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.Class getTrampolineClass()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.reflect.Method getMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.reflect.Method getMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.reflect.Method getMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.reflect.Method[] getMethods(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.lang.reflect.Method[] getMethods(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.security.PermissionCollection getPermissions(java.security.CodeSource) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil java.security.PermissionCollection getPermissions(java.security.CodeSource)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil void addMethod(java.util.Map&lt;sun.reflect.misc.MethodUtil.Signature,java.lang.reflect.Method&gt;, java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil void addMethod(java.util.Map&lt;sun.reflect.misc.MethodUtil.Signature,java.lang.reflect.Method&gt;, java.lang.reflect.Method) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil void getInterfaceMethods(java.lang.Class, java.util.Map&lt;sun.reflect.misc.MethodUtil.Signature,java.lang.reflect.Method&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.misc.MethodUtil.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil.1 java.lang.reflect.Method run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil.Signature Signature(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.MethodUtil.Signature boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.misc.ReflectUtil ReflectUtil()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean isAncestor(java.lang.ClassLoader, java.lang.ClassLoader) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean isAncestor(java.lang.ClassLoader, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean isNonPublicProxyClass(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean isSubclassOf(java.lang.Class, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean isSubclassOf(java.lang.Class, java.lang.Class) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean isSubclassOf(java.lang.Class, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean isSuperInterface(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean needsPackageAccessCheck(java.lang.ClassLoader, java.lang.ClassLoader) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean needsPackageAccessCheck(java.lang.ClassLoader, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil boolean needsPackageAccessCheck(java.lang.ClassLoader, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.reflect.misc.ReflectUtil java.lang.Object newInstance(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil java.lang.Object newInstance(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil void checkPackageAccess(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil void checkProxyMethod(java.lang.Object, java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil void checkProxyMethod(java.lang.Object, java.lang.reflect.Method) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil void checkProxyPackageAccess(java.lang.ClassLoader, java.lang.Class&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil void ensureMemberAccess(java.lang.Class, java.lang.Class, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.ReflectUtil void ensureMemberAccess(java.lang.Class, java.lang.Class, java.lang.Object, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.Trampoline Trampoline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.misc.Trampoline java.lang.Object invoke(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.misc.Trampoline void ensureInvocableMethod(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
