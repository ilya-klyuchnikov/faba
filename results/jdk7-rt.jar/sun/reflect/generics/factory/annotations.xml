<root>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.ClassLoader getDeclsLoader()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.GenericDeclaration getDecl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.ParameterizedType makeParameterizedType(java.lang.reflect.Type, java.lang.reflect.Type[], java.lang.reflect.Type) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.ParameterizedType makeParameterizedType(java.lang.reflect.Type, java.lang.reflect.Type[], java.lang.reflect.Type)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeBool()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeByte()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeChar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeDouble()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeFloat()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeInt()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeLong()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeShort()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.Type makeVoid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.TypeVariable&lt;?&gt; makeTypeVariable(java.lang.String, sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory java.lang.reflect.WildcardType makeWildcard(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory sun.reflect.generics.factory.CoreReflectionFactory make(java.lang.reflect.GenericDeclaration, sun.reflect.generics.scope.Scope)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.factory.CoreReflectionFactory sun.reflect.generics.scope.Scope getScope()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
</root>
