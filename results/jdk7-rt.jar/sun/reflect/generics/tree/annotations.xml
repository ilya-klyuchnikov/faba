<root>
  <item name="sun.reflect.generics.tree.ArrayTypeSignature ArrayTypeSignature(sun.reflect.generics.tree.TypeSignature)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.tree.ArrayTypeSignature sun.reflect.generics.tree.ArrayTypeSignature make(sun.reflect.generics.tree.TypeSignature)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ArrayTypeSignature sun.reflect.generics.tree.TypeSignature getComponentType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ArrayTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.BooleanSignature BooleanSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.BooleanSignature sun.reflect.generics.tree.BooleanSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.BooleanSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.BottomSignature BottomSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.BottomSignature sun.reflect.generics.tree.BottomSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.BottomSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ByteSignature ByteSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ByteSignature sun.reflect.generics.tree.ByteSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ByteSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.CharSignature CharSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.CharSignature sun.reflect.generics.tree.CharSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.CharSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature ClassSignature(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.ClassTypeSignature, sun.reflect.generics.tree.ClassTypeSignature[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature sun.reflect.generics.tree.ClassSignature make(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.ClassTypeSignature, sun.reflect.generics.tree.ClassTypeSignature[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature sun.reflect.generics.tree.ClassTypeSignature getSuperclass()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature sun.reflect.generics.tree.ClassTypeSignature[] getSuperInterfaces()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature sun.reflect.generics.tree.FormalTypeParameter[] getFormalTypeParameters()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature void accept(sun.reflect.generics.visitor.Visitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassTypeSignature ClassTypeSignature(java.util.List&lt;sun.reflect.generics.tree.SimpleClassTypeSignature&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassTypeSignature java.util.List&lt;sun.reflect.generics.tree.SimpleClassTypeSignature&gt; getPath()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassTypeSignature sun.reflect.generics.tree.ClassTypeSignature make(java.util.List&lt;sun.reflect.generics.tree.SimpleClassTypeSignature&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.DoubleSignature DoubleSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.DoubleSignature sun.reflect.generics.tree.DoubleSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.DoubleSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.FloatSignature FloatSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.FloatSignature sun.reflect.generics.tree.FloatSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.FloatSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.FormalTypeParameter FormalTypeParameter(java.lang.String, sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.tree.FormalTypeParameter java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.FormalTypeParameter sun.reflect.generics.tree.FieldTypeSignature[] getBounds()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.FormalTypeParameter sun.reflect.generics.tree.FormalTypeParameter make(java.lang.String, sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.FormalTypeParameter void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.IntSignature IntSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.IntSignature sun.reflect.generics.tree.IntSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.IntSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.LongSignature LongSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.LongSignature sun.reflect.generics.tree.LongSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.LongSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature MethodTypeSignature(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.TypeSignature[], sun.reflect.generics.tree.ReturnType, sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature sun.reflect.generics.tree.FieldTypeSignature[] getExceptionTypes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature sun.reflect.generics.tree.FormalTypeParameter[] getFormalTypeParameters()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature sun.reflect.generics.tree.MethodTypeSignature make(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.TypeSignature[], sun.reflect.generics.tree.ReturnType, sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature sun.reflect.generics.tree.ReturnType getReturnType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature sun.reflect.generics.tree.TypeSignature[] getParameterTypes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature void accept(sun.reflect.generics.visitor.Visitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ShortSignature ShortSignature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ShortSignature sun.reflect.generics.tree.ShortSignature make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.ShortSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature SimpleClassTypeSignature(java.lang.String, boolean, sun.reflect.generics.tree.TypeArgument[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature boolean getDollar()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String, boolean, sun.reflect.generics.tree.TypeArgument[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature sun.reflect.generics.tree.TypeArgument[] getTypeArguments()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.TypeVariableSignature TypeVariableSignature(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.tree.TypeVariableSignature java.lang.String getIdentifier()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.TypeVariableSignature sun.reflect.generics.tree.TypeVariableSignature make(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.TypeVariableSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.VoidDescriptor VoidDescriptor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.VoidDescriptor sun.reflect.generics.tree.VoidDescriptor make()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.VoidDescriptor void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.Wildcard Wildcard(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.tree.Wildcard sun.reflect.generics.tree.FieldTypeSignature[] getLowerBounds()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.Wildcard sun.reflect.generics.tree.FieldTypeSignature[] getUpperBounds()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.Wildcard sun.reflect.generics.tree.Wildcard make(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.generics.tree.Wildcard void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
