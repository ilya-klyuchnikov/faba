<root>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler boolean memberValueEquals(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler int memberValueHashCode(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler java.lang.Class access$000(sun.reflect.annotation.AnnotationInvocationHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler java.lang.Class access$000(sun.reflect.annotation.AnnotationInvocationHandler)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler java.lang.Object cloneArray(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler java.lang.String memberValueToString(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler java.lang.String toStringImpl()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler sun.reflect.annotation.AnnotationInvocationHandler asOneOfUs(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationInvocationHandler void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser AnnotationParser()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Class&lt;?&gt; parseSig(java.lang.String, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Class&lt;?&gt; toClass(java.lang.reflect.Type)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseArray(java.lang.Class&lt;?&gt;, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseArray(java.lang.Class&lt;?&gt;, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseClassValue(java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseClassValue(java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseConst(int, java.nio.ByteBuffer, sun.reflect.ConstantPool) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseConst(int, java.nio.ByteBuffer, sun.reflect.ConstantPool) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseEnumValue(java.lang.Class&lt;? extends java.lang.Enum&gt;, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseEnumValue(java.lang.Class&lt;? extends java.lang.Enum&gt;, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseEnumValue(java.lang.Class&lt;? extends java.lang.Enum&gt;, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.Object parseMemberValue(java.lang.Class&lt;?&gt;, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.annotation.Annotation annotationForMap(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;, java.util.Map&lt;java.lang.String,java.lang.Object&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.annotation.Annotation[] parseParameterAnnotations(byte[], sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.annotation.Annotation[] parseParameterAnnotations2(byte[], sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.lang.annotation.Annotation[] toArray(java.util.Map&lt;java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;,java.lang.annotation.Annotation&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.util.Map&lt;java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;,java.lang.annotation.Annotation&gt; parseAnnotations(byte[], sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser java.util.Map&lt;java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;,java.lang.annotation.Annotation&gt; parseAnnotations2(byte[], sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser sun.reflect.annotation.ExceptionProxy exceptionProxy(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser void skipAnnotation(java.nio.ByteBuffer, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser void skipArray(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser void skipMemberValue(int, java.nio.ByteBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser void skipMemberValue(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationType AnnotationType(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationType boolean isInherited()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.lang.Class&lt;?&gt; invocationHandlerReturnType(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.lang.annotation.RetentionPolicy retention()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.util.Map&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt; memberTypes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.util.Map&lt;java.lang.String,java.lang.Object&gt; memberDefaults()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.util.Map&lt;java.lang.String,java.lang.reflect.Method&gt; members()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy java.lang.RuntimeException generateException()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy setMember(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.EnumConstantNotPresentExceptionProxy java.lang.RuntimeException generateException()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.annotation.ExceptionProxy ExceptionProxy()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="sun.reflect.annotation.TypeNotPresentExceptionProxy java.lang.RuntimeException generateException()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
