<root>
  <item name="sun.java2d.xr.DirtyRegion int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.DirtyRegion int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.DirtyRegion java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.DirtyRegion sun.java2d.xr.DirtyRegion cloneRegion()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.DirtyRegion sun.java2d.xr.DirtyRegion combineRegion(sun.java2d.xr.DirtyRegion, sun.java2d.xr.DirtyRegion) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.DirtyRegion sun.java2d.xr.DirtyRegion combineRegion(sun.java2d.xr.DirtyRegion, sun.java2d.xr.DirtyRegion) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.DirtyRegion sun.java2d.xr.DirtyRegion combineRegion(sun.java2d.xr.DirtyRegion, sun.java2d.xr.DirtyRegion)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.GrowableByteArray byte[] getArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableByteArray byte[] getSizedArray()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.GrowableByteArray int getByte(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableByteArray int getCellIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableByteArray int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableEltArray sun.java2d.xr.GrowableIntArray getGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableIntArray int getCellIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableIntArray int getInt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableIntArray int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableIntArray int[] getArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.GrowableIntArray int[] getSizedArray()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.MaskTile sun.java2d.xr.DirtyRegion getDirtyArea()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.MaskTile sun.java2d.xr.GrowableRectArray getRects()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.MaskTileManager MaskTileManager(sun.java2d.xr.XRCompositeManager, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.MaskTileManager int uploadMask(int, int, int, int, byte[]) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.MaskTileManager void allocTiles(sun.java2d.xr.DirtyRegion) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.MaskTileManager void compositeSingleTile(sun.java2d.xr.XRSurfaceData, sun.java2d.xr.MaskTile, sun.java2d.xr.DirtyRegion, boolean, int, int, sun.java2d.xr.XRColor) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.MaskTileManager void limitRectCoords(sun.java2d.xr.GrowableRectArray, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.MutableInteger boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.MutableInteger boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.MutableInteger int getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRBackendNative XRBackendNative()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createLinearGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], int[], int, java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createLinearGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], int[], int, java.awt.geom.AffineTransform) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createLinearGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], int[], int, java.awt.geom.AffineTransform) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createLinearGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], int[], int, java.awt.geom.AffineTransform) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createLinearGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], int[], int, java.awt.geom.AffineTransform) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createRadialGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float, float, float[], int[], int, java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createRadialGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float, float, float[], int[], int, java.awt.geom.AffineTransform) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createRadialGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float, float, float[], int[], int, java.awt.geom.AffineTransform) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createRadialGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float, float, float[], int[], int, java.awt.geom.AffineTransform) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative int createRadialGradient(java.awt.geom.Point2D, java.awt.geom.Point2D, float, float, float[], int[], int, java.awt.geom.AffineTransform) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative long getFormatPtr(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRBackendNative long[] getGlyphInfoPtrs(java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative short[] getRenderColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void GCRectangles(int, long, sun.java2d.xr.GrowableRectArray) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void XRenderAddGlyphs(int, sun.font.GlyphList, java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;, byte[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void XRenderAddGlyphs(int, sun.font.GlyphList, java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;, byte[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void XRenderAddGlyphs(int, sun.font.GlyphList, java.util.List&lt;sun.font.XRGlyphCacheEntry&gt;, byte[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void XRenderCompositeText(byte, int, int, int, int, int, int, int, int, sun.java2d.xr.GrowableEltArray) 9">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void XRenderFreeGlyphs(int, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void padBlit(byte, int, int, int, java.awt.geom.AffineTransform, int, int, int, int, int, int, int, int, int, int) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void renderCompositeTrapezoids(byte, int, int, int, int, int, sun.java2d.jules.TrapezoidList) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void renderRectangle(int, byte, sun.java2d.xr.XRColor, int, int, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void renderRectangles(int, byte, sun.java2d.xr.XRColor, sun.java2d.xr.GrowableRectArray) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void renderRectangles(int, byte, sun.java2d.xr.XRColor, sun.java2d.xr.GrowableRectArray) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void setClipRectangles(int, sun.java2d.pipe.Region) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void setGCClipRectangles(long, sun.java2d.pipe.Region) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRBackendNative void setPictureTransform(int, java.awt.geom.AffineTransform) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRColor XRColor(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRColor XRColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRColor int byteToXRColorValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRColor int getAlpha()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRColor int getBlue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRColor int getGreen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRColor int getRed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRColor int[] ARGBPrePixelToXRColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRColor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRColor void setColorValues(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager XRCompositeManager(sun.java2d.xr.XRSurfaceData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager boolean isTexturePaintActive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager boolean maskRequired()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager byte getCompRule()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager float getExtraAlpha()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager int getExtraAlphaMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager sun.font.XRTextRenderer getTextRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager sun.java2d.xr.MaskTileManager getMaskBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager sun.java2d.xr.XRBackend getBackend()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager sun.java2d.xr.XRColor getAlphaColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager sun.java2d.xr.XRMaskImage getMaskImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager void XRCompositeTraps(int, int, int, sun.java2d.jules.TrapezoidList) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager void XRRenderRectangles(sun.java2d.xr.XRSurfaceData, sun.java2d.xr.GrowableRectArray) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager void compositeBlit(sun.java2d.xr.XRSurfaceData, sun.java2d.xr.XRSurfaceData, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager void compositeBlit(sun.java2d.xr.XRSurfaceData, sun.java2d.xr.XRSurfaceData, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager void initResources(sun.java2d.xr.XRSurfaceData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager void setComposite(java.awt.Composite) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager void validateCompositeState(java.awt.Composite, java.awt.geom.AffineTransform, java.awt.Paint, sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRCompositeManager void validateCompositeState(java.awt.Composite, java.awt.geom.AffineTransform, java.awt.Paint, sun.java2d.SunGraphics2D) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRDrawImage XRDrawImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRDrawImage void renderImageXform(sun.java2d.SunGraphics2D, java.awt.Image, java.awt.geom.AffineTransform, int, int, int, int, int, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRGraphicsConfig java.lang.Object getProxyKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRGraphicsConfig sun.java2d.xr.XRGraphicsConfig getConfig(sun.awt.X11GraphicsDevice, int, int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRMaskBlit XRMaskBlit(sun.java2d.loops.SurfaceType, sun.java2d.loops.CompositeType, sun.java2d.loops.SurfaceType) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRMaskBlit void MaskBlit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int, byte[], int, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRMaskFill void MaskFill(sun.java2d.SunGraphics2D, sun.java2d.SurfaceData, java.awt.Composite, int, int, int, int, byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRMaskFill void MaskFill(sun.java2d.SunGraphics2D, sun.java2d.SurfaceData, java.awt.Composite, int, int, int, int, byte[], int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRMaskImage XRMaskImage(sun.java2d.xr.XRCompositeManager, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRMaskImage int prepareBlitMask(sun.java2d.xr.XRSurfaceData, java.awt.geom.AffineTransform, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRMaskImage int prepareBlitMask(sun.java2d.xr.XRSurfaceData, java.awt.geom.AffineTransform, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMBlitLoops XRPMBlitLoops()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPMBlitLoops sun.java2d.xr.XRSurfaceData cacheToTmpSurface(sun.java2d.SurfaceData, sun.java2d.xr.XRSurfaceData, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMScaledBlit void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMScaledBlit void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMTransformedBlit boolean isMaskOmittable(java.awt.geom.AffineTransform, java.awt.Composite, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPMTransformedBlit java.awt.Rectangle getCompositeBounds(java.awt.geom.AffineTransform, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMTransformedBlit java.awt.Rectangle getCompositeBounds(java.awt.geom.AffineTransform, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMTransformedBlit void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPMTransformedBlit void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints XRPaints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints boolean isValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints int colorToIntArgbPixel(java.awt.Color, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints int getGradientLength(java.awt.geom.Point2D, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints int getGradientLength(java.awt.geom.Point2D, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints int[] convertToIntArgbPixels(java.awt.Color[], boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints sun.java2d.xr.XRPaints getXRPaint(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints sun.java2d.xr.XRPaints getXRPaint(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRPaints void register(sun.java2d.xr.XRCompositeManager) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRPaints void setPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRGradient XRGradient()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRGradient XRGradient(sun.java2d.xr.XRPaints.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRGradient XRGradient(sun.java2d.xr.XRPaints.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRGradient boolean isPaintValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRGradient boolean isPaintValid(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRGradient void setXRPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRGradient void setXRPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRLinearGradient XRLinearGradient()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRLinearGradient XRLinearGradient(sun.java2d.xr.XRPaints.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRLinearGradient XRLinearGradient(sun.java2d.xr.XRPaints.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRLinearGradient boolean isPaintValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRLinearGradient boolean isPaintValid(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRLinearGradient void setXRPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRLinearGradient void setXRPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRRadialGradient XRRadialGradient()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRRadialGradient XRRadialGradient(sun.java2d.xr.XRPaints.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRRadialGradient XRRadialGradient(sun.java2d.xr.XRPaints.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRRadialGradient boolean isPaintValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRRadialGradient void setXRPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRRadialGradient void setXRPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRTexture XRTexture()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRTexture XRTexture(sun.java2d.xr.XRPaints.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRTexture XRTexture(sun.java2d.xr.XRPaints.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRTexture boolean isPaintValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRTexture void setXRPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRPaints.XRTexture void setXRPaint(sun.java2d.SunGraphics2D, java.awt.Paint) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void access$000(sun.java2d.xr.XRRenderer, sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void access$000(sun.java2d.xr.XRRenderer, sun.java2d.SunGraphics2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void draw(sun.java2d.SunGraphics2D, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void drawLine(sun.java2d.SunGraphics2D, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void drawPath(sun.java2d.SunGraphics2D, java.awt.geom.Path2D.Float, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void drawPath(sun.java2d.SunGraphics2D, java.awt.geom.Path2D.Float, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void drawPolygon(sun.java2d.SunGraphics2D, int[], int[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void drawPolygon(sun.java2d.SunGraphics2D, int[], int[], int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fill(sun.java2d.SunGraphics2D, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fill(sun.java2d.SunGraphics2D, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fillPath(sun.java2d.SunGraphics2D, java.awt.geom.Path2D.Float, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fillPath(sun.java2d.SunGraphics2D, java.awt.geom.Path2D.Float, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fillPolygon(sun.java2d.SunGraphics2D, int[], int[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fillPolygon(sun.java2d.SunGraphics2D, int[], int[], int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fillRect(sun.java2d.SunGraphics2D, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fillSpans(sun.java2d.SunGraphics2D, sun.java2d.pipe.SpanIterator, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void fillSpans(sun.java2d.SunGraphics2D, sun.java2d.pipe.SpanIterator, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer void validateSurface(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRRenderer.XRDrawHandler void validate(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData XRSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.xr.XRGraphicsConfig, sun.java2d.loops.SurfaceType, java.awt.image.ColorModel, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData boolean copyArea(sun.java2d.SunGraphics2D, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData int getPicture()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData int getXid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData java.awt.GraphicsConfiguration getDeviceConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData long getGC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.SurfaceDataProxy makeProxyFor(sun.java2d.SurfaceData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.loops.MaskFill getMaskFill(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.loops.MaskFill getMaskFill(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.loops.RenderLoops getRenderLoops(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.loops.SurfaceType getSurfaceType(sun.java2d.xr.XRGraphicsConfig, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.loops.SurfaceType getSurfaceType(sun.java2d.xr.XRGraphicsConfig, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.xr.XRGraphicsConfig getGC(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.xr.XRGraphicsConfig getGraphicsConfig()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.xr.XRSurfaceData.XRPixmapSurfaceData createData(sun.java2d.xr.XRGraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, long, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.xr.XRSurfaceData.XRPixmapSurfaceData createData(sun.java2d.xr.XRGraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, long, int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.xr.XRSurfaceData.XRPixmapSurfaceData createData(sun.java2d.xr.XRGraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, long, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.xr.XRSurfaceData.XRWindowSurfaceData createData(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData sun.java2d.xr.XRSurfaceData.XRWindowSurfaceData createData(sun.awt.X11ComponentPeer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData void validateAsDestination(sun.java2d.SunGraphics2D, sun.java2d.pipe.Region) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData void validateAsSource(java.awt.geom.AffineTransform, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData void validatePipe(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.LazyPipe LazyPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.LazyPipe boolean validate(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRInternalSurfaceData boolean canSourceSendExposures(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRInternalSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRInternalSurfaceData java.lang.Object getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRInternalSurfaceData sun.java2d.SurfaceData getReplacement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRPixmapSurfaceData XRPixmapSurfaceData(sun.java2d.xr.XRGraphicsConfig, int, int, java.awt.Image, sun.java2d.loops.SurfaceType, java.awt.image.ColorModel, long, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRPixmapSurfaceData boolean canSourceSendExposures(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRPixmapSurfaceData int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRPixmapSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRPixmapSurfaceData java.lang.Object getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRWindowSurfaceData XRWindowSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.xr.XRGraphicsConfig, sun.java2d.loops.SurfaceType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRWindowSurfaceData XRWindowSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.xr.XRGraphicsConfig, sun.java2d.loops.SurfaceType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRWindowSurfaceData boolean canSourceSendExposures(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceData.XRWindowSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,_,_,null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRSurfaceDataProxy sun.java2d.SurfaceDataProxy createProxy(sun.java2d.SurfaceData, sun.java2d.xr.XRGraphicsConfig) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRUtils XRUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRUtils byte[] ATransOpToXRQualityName(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRUtils byte[] getFilterName(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRUtils double XFixedToDouble(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRUtils int ATransOpToXRQuality(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRUtils int XDoubleToFixed(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRUtils int getPictureFormatForTransparency(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRUtils int getRepeatForCycleMethod(java.awt.MultipleGradientPaint.CycleMethod) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRUtils int[] convertFloatsToFixed(float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRUtils long intToULong(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRUtils short clampToShort(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRUtils short clampToUShort(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRUtils sun.java2d.loops.SurfaceType getXRSurfaceTypeForTransparency(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRVolatileSurfaceManager boolean isAccelerationEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRVolatileSurfaceManager boolean isConfigValid(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XRVolatileSurfaceManager boolean isConfigValid(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XRVolatileSurfaceManager java.awt.ImageCapabilities getCapabilities(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XRVolatileSurfaceManager sun.java2d.SurfaceData initAcceleratedSurface()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.xr.XcbRequestCounter long getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.xr.XrSwToPMBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XrSwToPMScaledBlit void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.xr.XrSwToPMTransformedBlit void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
