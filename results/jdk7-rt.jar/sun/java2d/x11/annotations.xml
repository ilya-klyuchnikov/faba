<root>
  <item name="sun.java2d.x11.X11PMBlitBgLoops void BlitBg(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11PMBlitBgLoops void BlitBg(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11PMBlitBgLoops void BlitBg(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11PMBlitLoops void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11PMBlitLoops void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11PMBlitLoops void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11PMBlitLoops.DelegateBlitLoop void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer X11Renderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11Renderer long validate(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer sun.java2d.x11.X11Renderer getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void doPath(sun.java2d.SunGraphics2D, java.awt.Shape, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void doPath(sun.java2d.SunGraphics2D, java.awt.Shape, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void draw(sun.java2d.SunGraphics2D, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void drawArc(sun.java2d.SunGraphics2D, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void drawLine(sun.java2d.SunGraphics2D, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void drawOval(sun.java2d.SunGraphics2D, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void drawPolygon(sun.java2d.SunGraphics2D, int[], int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void drawPolyline(sun.java2d.SunGraphics2D, int[], int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void drawRect(sun.java2d.SunGraphics2D, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void drawRoundRect(sun.java2d.SunGraphics2D, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void fill(sun.java2d.SunGraphics2D, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void fill(sun.java2d.SunGraphics2D, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void fillArc(sun.java2d.SunGraphics2D, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void fillOval(sun.java2d.SunGraphics2D, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void fillPolygon(sun.java2d.SunGraphics2D, int[], int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void fillRect(sun.java2d.SunGraphics2D, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer void fillRoundRect(sun.java2d.SunGraphics2D, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11Renderer.X11TracingRenderer X11TracingRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData X11SurfaceData(sun.awt.X11ComponentPeer, sun.awt.X11GraphicsConfig, sun.java2d.loops.SurfaceType, java.awt.image.ColorModel) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData boolean copyArea(sun.java2d.SunGraphics2D, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData java.awt.GraphicsConfiguration getDeviceConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.awt.X11GraphicsConfig getGC(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.SurfaceDataProxy makeProxyFor(sun.java2d.SurfaceData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.loops.RenderLoops getRenderLoops(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.loops.SurfaceType getSurfaceType(sun.awt.X11GraphicsConfig, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.loops.SurfaceType getSurfaceType(sun.awt.X11GraphicsConfig, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.x11.X11SurfaceData.X11PixmapSurfaceData createData(sun.awt.X11GraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, long, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.x11.X11SurfaceData.X11PixmapSurfaceData createData(sun.awt.X11GraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, long, int) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.x11.X11SurfaceData.X11PixmapSurfaceData createData(sun.awt.X11GraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, long, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.x11.X11SurfaceData.X11WindowSurfaceData createData(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData sun.java2d.x11.X11SurfaceData.X11WindowSurfaceData createData(sun.awt.X11ComponentPeer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData void validatePipe(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.LazyPipe LazyPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.LazyPipe boolean validate(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.X11PixmapSurfaceData X11PixmapSurfaceData(sun.awt.X11GraphicsConfig, int, int, java.awt.Image, sun.java2d.loops.SurfaceType, java.awt.image.ColorModel, long, int) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.X11PixmapSurfaceData boolean canSourceSendExposures(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.X11PixmapSurfaceData int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.X11PixmapSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.X11PixmapSurfaceData java.lang.Object getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.X11WindowSurfaceData X11WindowSurfaceData(sun.awt.X11ComponentPeer, sun.awt.X11GraphicsConfig, sun.java2d.loops.SurfaceType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.X11WindowSurfaceData boolean canSourceSendExposures(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceData.X11WindowSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy sun.java2d.SurfaceDataProxy createProxy(sun.java2d.SurfaceData, sun.awt.X11GraphicsConfig) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Bitmask boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Bitmask boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Bitmask boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Bitmask int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Opaque boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Opaque boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Opaque boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Opaque boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11SurfaceDataProxy.Opaque int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11VolatileSurfaceManager boolean isAccelerationEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11VolatileSurfaceManager boolean isConfigValid(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.X11VolatileSurfaceManager boolean isConfigValid(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.x11.X11VolatileSurfaceManager java.awt.ImageCapabilities getCapabilities(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.x11.X11VolatileSurfaceManager sun.java2d.SurfaceData initAcceleratedSurface()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.x11.XSurfaceData boolean isX11SurfaceDataInitialized()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
</root>
