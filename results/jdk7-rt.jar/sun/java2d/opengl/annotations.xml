<root>
  <item name="sun.java2d.opengl.CGLGraphicsConfig boolean isCGLAvailable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig int getMaxTextureSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.awt.Image createAcceleratedImage(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.awt.ImageCapabilities access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.awt.ImageCapabilities getImageCapabilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.awt.image.BufferedImage createCompatibleImage(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.awt.image.ColorModel getColorModel(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.awt.image.VolatileImage createCompatibleVolatileImage(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.lang.Object getProxyKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig long createBackBuffer(sun.lwawt.macosx.CPlatformView, int, java.awt.BufferCapabilities) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig long createBackBuffer(sun.lwawt.macosx.CPlatformView, int, java.awt.BufferCapabilities) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig long getNativeConfigInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig sun.java2d.SurfaceData createManagedSurface(int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.java2d.opengl.CGLLayer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.java2d.opengl.CGLLayer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.lwawt.macosx.CPlatformView)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig sun.java2d.opengl.CGLGraphicsConfig getConfig(sun.awt.CGraphicsDevice, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig sun.java2d.opengl.OGLContext getContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig sun.java2d.pipe.BufferedContext getContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig sun.java2d.pipe.hw.ContextCapabilities getContextCapabilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig void destroyBackBuffer(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig void flip(sun.lwawt.macosx.CPlatformView, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig.CGLImageCaps CGLImageCaps(sun.java2d.opengl.CGLGraphicsConfig.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLGraphicsConfig.CGLImageCaps boolean isTrueVolatile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLLayer java.lang.Object getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLLayer long getPointer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLLayer sun.java2d.SurfaceData getSurfaceData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData CGLSurfaceData(sun.java2d.opengl.CGLGraphicsConfig, java.awt.image.ColorModel, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData CGLSurfaceData(sun.java2d.opengl.CGLLayer, sun.java2d.opengl.CGLGraphicsConfig, java.awt.image.ColorModel, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData CGLSurfaceData(sun.java2d.opengl.CGLLayer, sun.java2d.opengl.CGLGraphicsConfig, java.awt.image.ColorModel, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData CGLSurfaceData(sun.lwawt.macosx.CPlatformView, sun.java2d.opengl.CGLGraphicsConfig, java.awt.image.ColorModel, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData boolean copyArea(sun.java2d.SunGraphics2D, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData boolean makeOGLContextCurrentOnSurface(java.awt.Graphics, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData int getDefaultScale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData java.awt.GraphicsConfiguration getDeviceConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData long createOGLContextOnSurface(java.awt.Graphics, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLGraphicsConfig getGC(sun.java2d.opengl.CGLLayer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLGraphicsConfig getGC(sun.lwawt.macosx.CPlatformView) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLSurfaceData.CGLLayerSurfaceData createData(sun.java2d.opengl.CGLLayer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLSurfaceData.CGLLayerSurfaceData createData(sun.java2d.opengl.CGLLayer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLSurfaceData.CGLOffScreenSurfaceData createData(sun.java2d.opengl.CGLGraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLSurfaceData.CGLOffScreenSurfaceData createData(sun.java2d.opengl.CGLGraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLSurfaceData.CGLOffScreenSurfaceData createData(sun.lwawt.macosx.CPlatformView, java.awt.Image, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLSurfaceData.CGLOffScreenSurfaceData createData(sun.lwawt.macosx.CPlatformView, java.awt.Image, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData sun.java2d.opengl.CGLSurfaceData.CGLWindowSurfaceData createData(sun.lwawt.macosx.CPlatformView)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData void validate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLLayerSurfaceData CGLLayerSurfaceData(sun.java2d.opengl.CGLLayer, sun.java2d.opengl.CGLGraphicsConfig, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLLayerSurfaceData boolean isOnScreen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLLayerSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLOffScreenSurfaceData CGLOffScreenSurfaceData(sun.lwawt.macosx.CPlatformView, sun.java2d.opengl.CGLGraphicsConfig, int, int, java.awt.Image, java.awt.image.ColorModel, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLOffScreenSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLOffScreenSurfaceData java.lang.Object getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLVSyncOffScreenSurfaceData CGLVSyncOffScreenSurfaceData(sun.lwawt.macosx.CPlatformView, sun.java2d.opengl.CGLGraphicsConfig, int, int, java.awt.Image, java.awt.image.ColorModel, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLVSyncOffScreenSurfaceData CGLVSyncOffScreenSurfaceData(sun.lwawt.macosx.CPlatformView, sun.java2d.opengl.CGLGraphicsConfig, int, int, java.awt.Image, java.awt.image.ColorModel, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLVSyncOffScreenSurfaceData sun.java2d.SurfaceData getFlipSurface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLWindowSurfaceData CGLWindowSurfaceData(sun.lwawt.macosx.CPlatformView, sun.java2d.opengl.CGLGraphicsConfig) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLSurfaceData.CGLWindowSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLVolatileSurfaceManager CGLVolatileSurfaceManager(sun.awt.image.SunVolatileImage, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.CGLVolatileSurfaceManager boolean isAccelerationEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLVolatileSurfaceManager boolean isConfigValid(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.CGLVolatileSurfaceManager boolean isConfigValid(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.CGLVolatileSurfaceManager sun.java2d.SurfaceData initAcceleratedSurface()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig GLXGraphicsConfig(sun.awt.X11GraphicsDevice, int, long, sun.java2d.pipe.hw.ContextCapabilities) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.awt.Image createAcceleratedImage(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.awt.ImageCapabilities access$300()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.awt.ImageCapabilities getImageCapabilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.awt.image.BufferedImage createCompatibleImage(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.awt.image.ColorModel getColorModel(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.awt.image.VolatileImage createCompatibleVolatileImage(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.lang.Object getProxyKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig long createBackBuffer(sun.awt.X11ComponentPeer, int, java.awt.BufferCapabilities) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig long createBackBuffer(sun.awt.X11ComponentPeer, int, java.awt.BufferCapabilities) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig long getNativeConfigInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig sun.java2d.SurfaceData createManagedSurface(int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig sun.java2d.opengl.GLXGraphicsConfig getConfig(sun.awt.X11GraphicsDevice, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig sun.java2d.opengl.OGLContext getContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig sun.java2d.pipe.BufferedContext getContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig sun.java2d.pipe.hw.ContextCapabilities getContextCapabilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig void destroyBackBuffer(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig void flip(sun.awt.X11ComponentPeer, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig.GLXGetConfigInfo GLXGetConfigInfo(int, int, sun.java2d.opengl.GLXGraphicsConfig.1) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig.GLXGetConfigInfo long getConfigInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig.GLXImageCaps GLXImageCaps(sun.java2d.opengl.GLXGraphicsConfig.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXGraphicsConfig.GLXImageCaps boolean isTrueVolatile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData GLXSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.opengl.GLXGraphicsConfig, java.awt.image.ColorModel, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData java.awt.GraphicsConfiguration getDeviceConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData sun.java2d.opengl.GLXGraphicsConfig getGC(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData sun.java2d.opengl.GLXSurfaceData.GLXOffScreenSurfaceData createData(sun.awt.X11ComponentPeer, java.awt.Image, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData sun.java2d.opengl.GLXSurfaceData.GLXOffScreenSurfaceData createData(sun.awt.X11ComponentPeer, java.awt.Image, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData sun.java2d.opengl.GLXSurfaceData.GLXOffScreenSurfaceData createData(sun.java2d.opengl.GLXGraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData sun.java2d.opengl.GLXSurfaceData.GLXOffScreenSurfaceData createData(sun.java2d.opengl.GLXGraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData sun.java2d.opengl.GLXSurfaceData.GLXWindowSurfaceData createData(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData sun.java2d.opengl.GLXSurfaceData.GLXWindowSurfaceData createData(sun.awt.X11ComponentPeer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXOffScreenSurfaceData GLXOffScreenSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.opengl.GLXGraphicsConfig, int, int, java.awt.Image, java.awt.image.ColorModel, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXOffScreenSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXOffScreenSurfaceData java.lang.Object getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXVSyncOffScreenSurfaceData GLXVSyncOffScreenSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.opengl.GLXGraphicsConfig, int, int, java.awt.Image, java.awt.image.ColorModel, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXVSyncOffScreenSurfaceData GLXVSyncOffScreenSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.opengl.GLXGraphicsConfig, int, int, java.awt.Image, java.awt.image.ColorModel, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXVSyncOffScreenSurfaceData sun.java2d.SurfaceData getFlipSurface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXWindowSurfaceData GLXWindowSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.opengl.GLXGraphicsConfig) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXWindowSurfaceData GLXWindowSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.opengl.GLXGraphicsConfig) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXSurfaceData.GLXWindowSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXVolatileSurfaceManager GLXVolatileSurfaceManager(sun.awt.image.SunVolatileImage, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.GLXVolatileSurfaceManager boolean isAccelerationEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXVolatileSurfaceManager boolean isConfigValid(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.GLXVolatileSurfaceManager boolean isConfigValid(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.GLXVolatileSurfaceManager sun.java2d.SurfaceData initAcceleratedSurface()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLAnyCompositeBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLAnyCompositeBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops OGLBlitLoops()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops int createPackedParams(boolean, boolean, boolean, boolean, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, double, double, double, double, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, double, double, double, double, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops void IsoBlit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, double, double, double, double, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops void IsoBlit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, double, double, double, double, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops void enqueueBlit(sun.java2d.pipe.RenderQueue, sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int, int, int, int, double, double, double, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops void enqueueBlit(sun.java2d.pipe.RenderQueue, sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int, int, int, int, double, double, double, double) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLBlitLoops void enqueueBlit(sun.java2d.pipe.RenderQueue, sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int, int, int, int, double, double, double, double) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLBufImgOps OGLBufImgOps()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLBufImgOps boolean renderImageWithOp(sun.java2d.SunGraphics2D, java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLBufImgOps boolean renderImageWithOp(sun.java2d.SunGraphics2D, java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,null,_,_-&gt;false;_,null,_,_,_-&gt;false;null,_,_,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLContext OGLContext(sun.java2d.pipe.RenderQueue, sun.java2d.opengl.OGLGraphicsConfig) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLContext void setScratchSurface(sun.java2d.opengl.OGLGraphicsConfig) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLContext.OGLContextCaps OGLContextCaps(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLContext.OGLContextCaps java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLDrawImage OGLDrawImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLDrawImage void renderImageXform(sun.java2d.SunGraphics2D, java.awt.Image, java.awt.geom.AffineTransform, int, int, int, int, int, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLDrawImage void transformImage(sun.java2d.SunGraphics2D, java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLGeneralBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLMaskFill void validateContext(sun.java2d.SunGraphics2D, java.awt.Composite, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints OGLPaints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints boolean isValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Gradient Gradient()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Gradient Gradient(sun.java2d.opengl.OGLPaints.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Gradient Gradient(sun.java2d.opengl.OGLPaints.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Gradient boolean isPaintValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Gradient boolean isPaintValid(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.LinearGradient LinearGradient()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.LinearGradient LinearGradient(sun.java2d.opengl.OGLPaints.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.LinearGradient LinearGradient(sun.java2d.opengl.OGLPaints.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.LinearGradient boolean isPaintValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.MultiGradient MultiGradient()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.MultiGradient boolean isPaintValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.RadialGradient RadialGradient()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.RadialGradient RadialGradient(sun.java2d.opengl.OGLPaints.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.RadialGradient RadialGradient(sun.java2d.opengl.OGLPaints.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Texture Texture()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Texture Texture(sun.java2d.opengl.OGLPaints.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Texture Texture(sun.java2d.opengl.OGLPaints.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLPaints.Texture boolean isPaintValid(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRTTSurfaceToSurfaceBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRTTSurfaceToSurfaceBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRTTSurfaceToSurfaceScale void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRTTSurfaceToSurfaceScale void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRTTSurfaceToSurfaceTransform void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRTTSurfaceToSurfaceTransform void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderQueue sun.java2d.pipe.RenderBuffer access$000(sun.java2d.opengl.OGLRenderQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderQueue sun.java2d.pipe.RenderBuffer access$000(sun.java2d.opengl.OGLRenderQueue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLRenderQueue void access$100(sun.java2d.opengl.OGLRenderQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderQueue.1 sun.java2d.opengl.OGLRenderQueue.QueueFlusher run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderQueue.QueueFlusher QueueFlusher(sun.java2d.opengl.OGLRenderQueue, java.lang.ThreadGroup) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer OGLRenderer(sun.java2d.pipe.RenderQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer sun.java2d.opengl.OGLRenderer traceWrap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer sun.java2d.pipe.RenderQueue access$000(sun.java2d.opengl.OGLRenderer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer sun.java2d.pipe.RenderQueue access$000(sun.java2d.opengl.OGLRenderer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer void access$100(sun.java2d.opengl.OGLRenderer, sun.java2d.SunGraphics2D, int[], int[], int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer void access$200(sun.java2d.opengl.OGLRenderer, sun.java2d.SunGraphics2D, java.awt.geom.Path2D.Float, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer void access$300(sun.java2d.opengl.OGLRenderer, sun.java2d.SunGraphics2D, java.awt.geom.Path2D.Float, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer void access$400(sun.java2d.opengl.OGLRenderer, sun.java2d.SunGraphics2D, sun.java2d.pipe.SpanIterator, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer void copyArea(sun.java2d.SunGraphics2D, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer void validateContext(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer void validateContextAA(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer.Tracer Tracer(sun.java2d.opengl.OGLRenderer, sun.java2d.opengl.OGLRenderer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLRenderer.Tracer sun.java2d.pipe.ParallelogramPipe getAAParallelogramPipe()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData OGLSurfaceData(sun.java2d.opengl.OGLGraphicsConfig, java.awt.image.ColorModel, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData boolean canRenderLCDText(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData boolean copyArea(sun.java2d.SunGraphics2D, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData boolean isOnScreen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData int getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData java.awt.Rectangle getNativeBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData sun.java2d.SurfaceDataProxy makeProxyFor(sun.java2d.SurfaceData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData sun.java2d.loops.MaskFill getMaskFill(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData sun.java2d.loops.MaskFill getMaskFill(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData sun.java2d.loops.SurfaceType getCustomSurfaceType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData sun.java2d.opengl.OGLGraphicsConfig getOGLGraphicsConfig()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData void access$000(sun.java2d.opengl.OGLSurfaceData, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceData void validatePipe(sun.java2d.SunGraphics2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceDataProxy boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceDataProxy boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceDataProxy boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceDataProxy boolean isSupportedOperation(sun.java2d.SurfaceData, int, sun.java2d.loops.CompositeType, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceDataProxy sun.java2d.SurfaceData validateSurfaceData(sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceDataProxy sun.java2d.SurfaceDataProxy createProxy(sun.java2d.SurfaceData, sun.java2d.opengl.OGLGraphicsConfig) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSurfaceBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSurfaceBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSurfaceScale void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSurfaceScale void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSurfaceTransform void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSurfaceTransform void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSwBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSwBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSwBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLSurfaceToSwBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLSwToSurfaceBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSwToSurfaceBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSwToSurfaceScale void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSwToSurfaceScale void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSwToSurfaceTransform void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSwToSurfaceTransform void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSwToTextureBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLSwToTextureBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextRenderer sun.java2d.opengl.OGLTextRenderer traceWrap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextRenderer sun.java2d.pipe.RenderQueue access$000(sun.java2d.opengl.OGLTextRenderer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextRenderer sun.java2d.pipe.RenderQueue access$000(sun.java2d.opengl.OGLTextRenderer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLTextRenderer void validateContext(sun.java2d.SunGraphics2D, java.awt.Composite) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextRenderer.Tracer Tracer(sun.java2d.opengl.OGLTextRenderer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextureToSurfaceBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextureToSurfaceBlit void Blit(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextureToSurfaceScale void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextureToSurfaceScale void Scale(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, int, int, int, int, double, double, double, double) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextureToSurfaceTransform void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLTextureToSurfaceTransform void Transform(sun.java2d.SurfaceData, sun.java2d.SurfaceData, java.awt.Composite, sun.java2d.pipe.Region, java.awt.geom.AffineTransform, int, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities OGLUtilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities boolean invokeWithOGLContextCurrent(java.awt.Graphics, java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities boolean invokeWithOGLSharedContextCurrent(java.awt.GraphicsConfiguration, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities boolean invokeWithOGLSharedContextCurrent(java.awt.GraphicsConfiguration, java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities int getOGLSurfaceType(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities int getOGLSurfaceType(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities int getOGLTextureType(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities java.awt.Rectangle getOGLScissorBox(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities java.awt.Rectangle getOGLScissorBox(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities java.awt.Rectangle getOGLViewport(java.awt.Graphics, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities java.awt.Rectangle getOGLViewport(java.awt.Graphics, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities java.lang.Object getOGLSurfaceIdentifier(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.java2d.opengl.OGLUtilities java.lang.Object getOGLSurfaceIdentifier(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
</root>
