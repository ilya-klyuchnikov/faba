<root>
  <item name="javax.swing.AbstractAction boolean hasSelectedKey(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractAction boolean hasSelectedKey(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractAction boolean isEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractAction boolean isSelected(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractAction boolean shouldReconfigure(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractAction java.lang.Object getValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractAction java.lang.Object[] getKeys()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractAction void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractAction void setEnabledFromAction(javax.swing.JComponent, javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractAction void setEnabledFromAction(javax.swing.JComponent, javax.swing.Action) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractAction void setToolTipTextFromAction(javax.swing.JComponent, javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractAction void setToolTipTextFromAction(javax.swing.JComponent, javax.swing.Action) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractAction void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton boolean getHideActionText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton boolean isBorderPainted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton boolean isContentAreaFilled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton boolean isFocusPainted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton boolean isListener(java.lang.Class, java.awt.event.ActionListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton boolean isListener(java.lang.Class, java.awt.event.ActionListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton boolean isRolloverEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton boolean shouldUpdateSelectedStateFromAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton int getDisplayedMnemonicIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton int getHorizontalAlignment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton int getHorizontalTextPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton int getIconTextGap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton int getMnemonic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton int getVerticalAlignment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton int getVerticalTextPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton java.awt.Insets getMargin()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton java.beans.PropertyChangeListener createActionPropertyChangeListener0(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton java.lang.Object[] getSelectedObjects()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton java.lang.String getText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.AbstractButton.Handler access$000(javax.swing.AbstractButton) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.Action getAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.ButtonModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.Icon getIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.Icon getPressedIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.Icon getRolloverIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.Icon getRolloverSelectedIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.Icon getSelectedIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton javax.swing.plaf.ButtonUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton long getMultiClickThreshhold()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton void access$100(javax.swing.AbstractButton) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton void actionPropertyChanged(javax.swing.Action, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void clientPropertyChanged(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void clientPropertyChanged(java.lang.Object, java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void clientPropertyChanged(java.lang.Object, java.lang.Object, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void init(java.lang.String, javax.swing.Icon) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void init(java.lang.String, javax.swing.Icon) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void setActionCommandFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void setDisplayedMnemonicIndexFromAction(javax.swing.Action, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void setIconFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void setMnemonicFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void setSelectedFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void setUIProperty(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void smallIconChanged(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton void updateDisplayedMnemonicIndex(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton void updateUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton boolean setCurrentAccessibleValue(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton boolean setCurrentAccessibleValue(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton int getAccessibleActionCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton int getCaretPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton int getSelectionEnd()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton int getSelectionStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.awt.Rectangle getCharacterBounds(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.awt.Rectangle getTextRectangle()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.lang.String getAccessibleActionDescription(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.lang.String getAfterIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.lang.String getAtIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.lang.String getBeforeIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.lang.String getSelectedText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.lang.String getText(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton java.lang.String getTitledBorderText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleAction getAccessibleAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleExtendedComponent getAccessibleExtendedComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleIcon[] getAccessibleIcon()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleKeyBinding getAccessibleKeyBinding()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.swing.text.AttributeSet getCharacterAttribute(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractButton.AccessibleAbstractButton.ButtonKeyBinding int getAccessibleKeyBindingCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractButton.ButtonActionPropertyChangeListener void actionPropertyChanged(javax.swing.AbstractButton, javax.swing.Action, java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton.ButtonActionPropertyChangeListener void actionPropertyChanged(javax.swing.AbstractButton, javax.swing.Action, java.beans.PropertyChangeEvent) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractButton.Handler void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AbstractCellEditor boolean isCellEditable(java.util.EventObject) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractCellEditor boolean isCellEditable(java.util.EventObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AbstractCellEditor boolean shouldSelectCell(java.util.EventObject) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AbstractCellEditor boolean shouldSelectCell(java.util.EventObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ActionMap ActionMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ActionMap java.lang.Object[] keys()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ActionMap javax.swing.ActionMap getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ActionMap void put(java.lang.Object, javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ActionMap void put(java.lang.Object, javax.swing.Action) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ActionMap void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ActionMap void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ActionPropertyChangeListener T getTarget()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ActionPropertyChangeListener javax.swing.Action getAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ActionPropertyChangeListener void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ActionPropertyChangeListener void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ActionPropertyChangeListener.OwnedWeakReference OwnedWeakReference(U, java.lang.ref.ReferenceQueue&lt;? super U&gt;, javax.swing.ActionPropertyChangeListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ActionPropertyChangeListener.OwnedWeakReference javax.swing.ActionPropertyChangeListener getOwner()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AncestorNotifier void componentHidden(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AncestorNotifier void componentMoved(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AncestorNotifier void componentResized(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.AncestorNotifier void componentResized(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.AncestorNotifier void componentShown(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AncestorNotifier void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.AncestorNotifier void removeListeners(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ArrayTable boolean isArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ArrayTable java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ArrayTable java.lang.Object get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ArrayTable java.lang.Object remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ArrayTable java.lang.Object remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ArrayTable java.lang.Object[] getKeys(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ArrayTable java.lang.Object[] getKeys(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ArrayTable void writeArrayTable(java.io.ObjectOutputStream, javax.swing.ArrayTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ArrayTable void writeArrayTable(java.io.ObjectOutputStream, javax.swing.ArrayTable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Autoscroller Autoscroller()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Autoscroller boolean _isRunning(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Autoscroller boolean isRunning(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Autoscroller void _processMouseDragged(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Autoscroller void _stop(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Autoscroller void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Autoscroller void processMouseDragged(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Autoscroller void start(javax.swing.JComponent, java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Autoscroller void start(javax.swing.JComponent, java.awt.event.MouseEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Autoscroller void stop(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BorderFactory BorderFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createBevelBorder(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createBevelBorder(int, java.awt.Color, java.awt.Color) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createBevelBorder(int, java.awt.Color, java.awt.Color) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createBevelBorder(int, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createBevelBorder(int, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createEmptyBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createEmptyBorder(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createEtchedBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createEtchedBorder(int, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createEtchedBorder(java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createLineBorder(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createLineBorder(java.awt.Color, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createLineBorder(java.awt.Color, int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createLoweredBevelBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createRaisedBevelBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createSharedBevel(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createSoftBevelBorder(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createSoftBevelBorder(int, java.awt.Color, java.awt.Color) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createSoftBevelBorder(int, java.awt.Color, java.awt.Color) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createSoftBevelBorder(int, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createSoftBevelBorder(int, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createStrokeBorder(java.awt.BasicStroke) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createStrokeBorder(java.awt.BasicStroke)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createStrokeBorder(java.awt.BasicStroke, java.awt.Paint) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.Border createStrokeBorder(java.awt.BasicStroke, java.awt.Paint)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.CompoundBorder createCompoundBorder()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.CompoundBorder createCompoundBorder(javax.swing.border.Border, javax.swing.border.Border)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.MatteBorder createMatteBorder(int, int, int, int, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.MatteBorder createMatteBorder(int, int, int, int, javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border, java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border, java.lang.String, int, int, java.awt.Font)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border, java.lang.String, int, int, java.awt.Font, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box java.awt.Component createGlue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box java.awt.Component createHorizontalGlue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box java.awt.Component createHorizontalStrut(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box java.awt.Component createRigidArea(java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box java.awt.Component createVerticalGlue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box java.awt.Component createVerticalStrut(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box javax.swing.Box createHorizontalBox()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box javax.swing.Box createVerticalBox()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Box void setLayout(java.awt.LayoutManager) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Box.AccessibleBox javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Box.Filler.AccessibleBoxFiller javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BoxLayout int getAxis()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BoxLayout int resolveAxis(int, java.awt.ComponentOrientation)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BoxLayout java.awt.Container getTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BoxLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BoxLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BoxLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout void checkContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BoxLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BoxLayout void removeLayoutComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager boolean access$200(javax.swing.BufferStrategyPaintManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager boolean access$200(javax.swing.BufferStrategyPaintManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager boolean show(java.awt.Container, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager java.lang.reflect.Method access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager java.lang.reflect.Method access$002(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager java.lang.reflect.Method access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager java.lang.reflect.Method access$102(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager java.util.ArrayList access$300(javax.swing.BufferStrategyPaintManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager java.util.ArrayList access$300(javax.swing.BufferStrategyPaintManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager java.util.ArrayList access$302(javax.swing.BufferStrategyPaintManager, java.util.ArrayList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager java.util.ArrayList access$302(javax.swing.BufferStrategyPaintManager, java.util.ArrayList)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager javax.swing.BufferStrategyPaintManager.BufferInfo getBufferInfo(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager javax.swing.BufferStrategyPaintManager.BufferInfo getBufferInfo(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager sun.util.logging.PlatformLogger access$600()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager void access$400(javax.swing.BufferStrategyPaintManager, java.util.List) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager void access$400(javax.swing.BufferStrategyPaintManager, java.util.List) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager void access$500(javax.swing.BufferStrategyPaintManager, javax.swing.JRootPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager void access$500(javax.swing.BufferStrategyPaintManager, javax.swing.JRootPane) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager void dispose(java.util.List&lt;javax.swing.BufferStrategyPaintManager.BufferInfo&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager void doubleBufferingChanged(javax.swing.JRootPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager void doubleBufferingChanged0(javax.swing.JRootPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo BufferInfo(javax.swing.BufferStrategyPaintManager, java.awt.Container) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo boolean getContentsLostDuringExpose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo boolean getPaintAllOnExpose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo boolean isInSync()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo java.awt.Container getRoot()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo java.awt.image.BufferStrategy createBufferStrategy()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo java.awt.image.BufferStrategy createBufferStrategy(java.awt.Container, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void componentHidden(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowActivated(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowActivated(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowClosed(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowClosing(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowClosing(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowDeactivated(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowDeactivated(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowDeiconified(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowDeiconified(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowIconified(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowOpened(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.BufferStrategyPaintManager.BufferInfo void windowOpened(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ButtonGroup boolean isSelected(javax.swing.ButtonModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ButtonGroup boolean isSelected(javax.swing.ButtonModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ButtonGroup javax.swing.ButtonModel getSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ButtonGroup void add(javax.swing.AbstractButton) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ButtonGroup void remove(javax.swing.AbstractButton) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ButtonGroup void setSelected(javax.swing.ButtonModel, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.CellRendererPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.CellRendererPane void invalidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.CellRendererPane void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.CellRendererPane void paint(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.CellRendererPane void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.CellRendererPane void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, int, int, int, int, boolean) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.CellRendererPane void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, java.awt.Rectangle) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.CellRendererPane void update(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.CellRendererPane void update(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.CellRendererPane void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.CellRendererPane.AccessibleCellRendererPane javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ClientPropertyKey boolean getReportValueNotSerializable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ClientPropertyKey.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ClientPropertyKey.1 java.lang.Object getJComponent_TRANSFER_HANDLER()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ColorChooserDialog ColorChooserDialog(java.awt.Frame, java.lang.String, boolean, java.awt.Component, javax.swing.JColorChooser, java.awt.event.ActionListener, java.awt.event.ActionListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ColorChooserDialog javax.swing.JButton access$000(javax.swing.ColorChooserDialog) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ColorChooserDialog javax.swing.JButton access$000(javax.swing.ColorChooserDialog)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ColorChooserDialog void initColorChooserDialog(java.awt.Component, javax.swing.JColorChooser, java.awt.event.ActionListener, java.awt.event.ActionListener) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ColorChooserDialog void initColorChooserDialog(java.awt.Component, javax.swing.JColorChooser, java.awt.event.ActionListener, java.awt.event.ActionListener) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ColorChooserDialog.1 void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ColorChooserDialog.2 void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ColorChooserDialog.3 void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ColorChooserDialog.4 void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ColorChooserDialog.Closer void windowClosing(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ColorChooserDialog.DisposeOnClose DisposeOnClose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ColorChooserDialog.DisposeOnClose void componentHidden(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ColorTracker java.awt.Color getColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ColorTracker void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ComponentInputMap ComponentInputMap(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ComponentInputMap javax.swing.JComponent getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ComponentInputMap void put(javax.swing.KeyStroke, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ComponentInputMap void put(javax.swing.KeyStroke, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DebugGraphics DebugGraphics(java.awt.Graphics, javax.swing.JComponent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DebugGraphics boolean debugBuffered()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DebugGraphics boolean debugFlash()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DebugGraphics boolean debugLog()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DebugGraphics boolean isDrawingBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DebugGraphics int getDebugOptions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DebugGraphics int shouldComponentDebug(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DebugGraphics java.awt.Graphics create()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DebugGraphics java.awt.Graphics create(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DebugGraphics java.awt.Graphics debugGraphics()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DebugGraphics java.lang.String pointToString(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DebugGraphics java.lang.String toShortString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DebugGraphicsObserver DebugGraphicsObserver()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DebugGraphicsObserver boolean allBitsPresent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DebugGraphicsObserver boolean imageHasProblem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DebugGraphicsObserver boolean imageUpdate(java.awt.Image, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DebugGraphicsObserver boolean imageUpdate(java.awt.Image, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_-&gt;true;null,_,_,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultBoundedRangeModel boolean getValueIsAdjusting()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultBoundedRangeModel int getExtent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultBoundedRangeModel int getMaximum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultBoundedRangeModel int getMinimum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultBoundedRangeModel int getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultBoundedRangeModel java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultButtonModel boolean isArmed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultButtonModel boolean isEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultButtonModel boolean isMenuItem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultButtonModel boolean isPressed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultButtonModel boolean isRollover()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultButtonModel boolean isSelected()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultButtonModel int getMnemonic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultButtonModel java.lang.Object[] getSelectedObjects()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultButtonModel java.lang.String getActionCommand()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultButtonModel javax.swing.ButtonGroup getGroup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultCellEditor DefaultCellEditor(javax.swing.JCheckBox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultCellEditor DefaultCellEditor(javax.swing.JComboBox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultCellEditor DefaultCellEditor(javax.swing.JTextField) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultCellEditor int getClickCountToStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultCellEditor java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultCellEditor java.awt.Component getTreeCellEditorComponent(javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultCellEditor.1 void setValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultCellEditor.2 void setValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultCellEditor.3 boolean shouldSelectCell(java.util.EventObject) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultCellEditor.3 boolean shouldSelectCell(java.util.EventObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate boolean isCellEditable(java.util.EventObject) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate boolean isCellEditable(java.util.EventObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate boolean shouldSelectCell(java.util.EventObject) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate boolean shouldSelectCell(java.util.EventObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate boolean startCellEditing(java.util.EventObject) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate boolean startCellEditing(java.util.EventObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate java.lang.Object getCellEditorValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultCellEditor.EditorDelegate void itemStateChanged(java.awt.event.ItemEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultComboBoxModel DefaultComboBoxModel(E[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultComboBoxModel E getElementAt(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultComboBoxModel java.lang.Object getSelectedItem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultDesktopManager boolean isFloaterCollision(java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultDesktopManager boolean wasIcon(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager java.awt.Rectangle getBoundsForIconOf(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager java.awt.Rectangle getBoundsForIconOf(javax.swing.JInternalFrame)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager java.awt.Rectangle getPreviousBounds(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager java.awt.Rectangle[] findFloatingItems(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager java.awt.Rectangle[] findFloatingItems(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager javax.swing.JDesktopPane getDesktopPane(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void activateFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void beginDraggingFrame(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void beginResizingFrame(javax.swing.JComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void closeFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void deactivateFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void deiconifyFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void dragFrameFaster(javax.swing.JComponent, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void emergencyCleanup(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void iconifyFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void maximizeFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void minimizeFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void openFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void removeIconFor(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void setBoundsForFrame(javax.swing.JComponent, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void setPreviousBounds(javax.swing.JInternalFrame, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void setWasIcon(javax.swing.JInternalFrame, java.lang.Boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultDesktopManager void setupDragMode(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultFocusManager java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultFocusManager java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultFocusManager java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultFocusManager java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultFocusManager java.awt.Component getFirstComponent(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultFocusManager java.awt.Component getFirstComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultFocusManager java.awt.Component getLastComponent(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultFocusManager java.awt.Component getLastComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer java.awt.Component getListCellRendererComponent(javax.swing.JList&lt;?&gt;, java.lang.Object, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer java.awt.Component getListCellRendererComponent(javax.swing.JList&lt;?&gt;, java.lang.Object, int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer java.awt.Component getListCellRendererComponent(javax.swing.JList&lt;?&gt;, java.lang.Object, int, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, byte, byte) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, byte, byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, char, char) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, double, double) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, float, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, long, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, short, short) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, short, short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void invalidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void repaint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void repaint(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void repaint(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void repaint(long, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void revalidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListCellRenderer void validate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListModel java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultListSelectionModel boolean contains(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListSelectionModel boolean getValueIsAdjusting()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListSelectionModel boolean isLeadAnchorNotificationEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListSelectionModel boolean isSelectionEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListSelectionModel int getAnchorSelectionIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListSelectionModel int getLeadSelectionIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListSelectionModel int getMaxSelectionIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListSelectionModel int getSelectionMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultListSelectionModel java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultListSelectionModel java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter boolean getSortsOnUpdates()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultRowSorter boolean isTransformed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultRowSorter int access$100(javax.swing.DefaultRowSorter, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter int getMaxSortKeys()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultRowSorter int[] getViewToModelAsInts(javax.swing.DefaultRowSorter.Row[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultRowSorter int[] getViewToModelAsInts(javax.swing.DefaultRowSorter.Row[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultRowSorter java.util.Comparator&lt;?&gt; getComparator(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultRowSorter java.util.List&lt;? extends javax.swing.RowSorter.SortKey&gt; getSortKeys()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultRowSorter javax.swing.DefaultRowSorter.ModelWrapper&lt;M,I&gt; getModelWrapper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultRowSorter javax.swing.RowFilter&lt;? super M,? super I&gt; getRowFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultRowSorter javax.swing.RowSorter.SortKey toggle(javax.swing.RowSorter.SortKey) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter javax.swing.RowSorter.SortKey toggle(javax.swing.RowSorter.SortKey)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter void cacheSortKeys(java.util.List&lt;? extends javax.swing.RowSorter.SortKey&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter void insertInOrder(java.util.List&lt;javax.swing.DefaultRowSorter.Row&gt;, javax.swing.DefaultRowSorter.Row[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter void insertInOrder(java.util.List&lt;javax.swing.DefaultRowSorter.Row&gt;, javax.swing.DefaultRowSorter.Row[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter void setModelWrapper(javax.swing.DefaultRowSorter.ModelWrapper&lt;M,I&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter void setSortKeys(java.util.List&lt;? extends javax.swing.RowSorter.SortKey&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultRowSorter.FilterEntry FilterEntry(javax.swing.DefaultRowSorter, javax.swing.DefaultRowSorter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.DefaultRowSorter.ModelWrapper ModelWrapper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DefaultRowSorter.ModelWrapper java.lang.String getStringValueAt(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultRowSorter.Row int compareTo(javax.swing.DefaultRowSorter.Row) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.DefaultSingleSelectionModel int getSelectedIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.DelegatingDefaultFocusManager java.awt.KeyboardFocusManager getDelegate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.FocusManager boolean isFocusManagerEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GrayFilter int filterRGB(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GrayFilter java.awt.Image createDisabledImage(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout GroupLayout(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout boolean access$1000(javax.swing.GroupLayout, java.awt.Component, java.awt.Component, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout boolean access$202(javax.swing.GroupLayout, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout boolean access$302(javax.swing.GroupLayout, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout boolean access$900(javax.swing.GroupLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout boolean getAutoCreateContainerGaps()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout boolean getAutoCreateGaps()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout boolean getHonorsVisibility()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout float getLayoutAlignmentX(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout float getLayoutAlignmentY(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Container access$700(javax.swing.GroupLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Container access$700(javax.swing.GroupLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Dimension adjustSize(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ComponentInfo access$600(javax.swing.GroupLayout, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout javax.swing.GroupLayout.Group createTopLevelGroup(javax.swing.GroupLayout.Group)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createBaselineGroup(boolean, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createParallelGroup(javax.swing.GroupLayout.Alignment, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createParallelGroup(javax.swing.GroupLayout.Alignment, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout javax.swing.GroupLayout.SequentialGroup createSequentialGroup()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout javax.swing.LayoutStyle access$800(javax.swing.GroupLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout javax.swing.LayoutStyle getLayoutStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout void addLayoutComponent(java.awt.Component, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout void calculateAutopadding(javax.swing.GroupLayout.Group, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void checkParent(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout void createSpringDescription(java.lang.StringBuffer, javax.swing.GroupLayout.Spring, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void createSpringDescription(java.lang.StringBuffer, javax.swing.GroupLayout.Spring, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void createSpringDescription(java.lang.StringBuffer, javax.swing.GroupLayout.Spring, java.lang.String, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout void invalidateLayout(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void linkSize(int, java.awt.Component...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void registerComponents(javax.swing.GroupLayout.Group, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void replace(java.awt.Component, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void replace(java.awt.Component, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void setHonorsVisibility(java.awt.Component, java.lang.Boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void setHorizontalGroup(javax.swing.GroupLayout.Group) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout void setVerticalGroup(javax.swing.GroupLayout.Group) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapMatch java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapMatch java.lang.String toString(javax.swing.GroupLayout.ComponentSpring) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring AutoPreferredGapSpring(javax.swing.GroupLayout, javax.swing.GroupLayout.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring boolean getUserCreated()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring boolean willHaveZeroSize(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring int calculateMinimumSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring int calculatePadding(javax.swing.LayoutStyle, int, javax.swing.GroupLayout.ComponentSpring, javax.swing.GroupLayout.ComponentSpring) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring int calculatePadding(javax.swing.LayoutStyle, int, javax.swing.GroupLayout.ComponentSpring, javax.swing.GroupLayout.ComponentSpring) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring int calculatePreferredSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring void addTarget(javax.swing.GroupLayout.ComponentSpring, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.AutoPreferredGapSpring void setSources(java.util.List&lt;javax.swing.GroupLayout.ComponentSpring&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentInfo boolean isVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.ComponentInfo java.awt.Component access$000(javax.swing.GroupLayout.ComponentInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentInfo java.awt.Component access$000(javax.swing.GroupLayout.ComponentInfo)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.ComponentInfo java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.ComponentInfo javax.swing.GroupLayout.LinkInfo access$1100(javax.swing.GroupLayout.ComponentInfo, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentInfo void access$1200(javax.swing.GroupLayout.ComponentInfo, int, javax.swing.GroupLayout.LinkInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentInfo void removeSpring(javax.swing.GroupLayout.Spring) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentInfo void setBounds(java.awt.Insets, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring ComponentSpring(javax.swing.GroupLayout, java.awt.Component, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring ComponentSpring(javax.swing.GroupLayout, java.awt.Component, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring ComponentSpring(javax.swing.GroupLayout, java.awt.Component, int, int, int, javax.swing.GroupLayout.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring ComponentSpring(javax.swing.GroupLayout, java.awt.Component, int, int, int, javax.swing.GroupLayout.1) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring ComponentSpring(javax.swing.GroupLayout, java.awt.Component, int, int, int, javax.swing.GroupLayout.1) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring int getOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring int getSizeAlongAxis(int, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring int getSizeAlongAxis(int, java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.ComponentSpring java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.ContainerAutoPreferredGapSpring int updateSize(javax.swing.LayoutStyle, javax.swing.GroupLayout.ComponentSpring, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ContainerAutoPreferredGapSpring java.lang.String getMatchDescription()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.GapSpring boolean willHaveZeroSize(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.GapSpring int calculatePreferredSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addComponent(java.awt.Component, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addSpring(javax.swing.GroupLayout.Spring) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addSpring(javax.swing.GroupLayout.Spring)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.LinkInfo void add(javax.swing.GroupLayout.ComponentInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.LinkInfo void remove(javax.swing.GroupLayout.ComponentInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup boolean isResizable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup int operator(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addComponent(java.awt.Component, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addComponent(java.awt.Component, javax.swing.GroupLayout.Alignment, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addComponent(java.awt.Component, javax.swing.GroupLayout.Alignment, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addGroup(javax.swing.GroupLayout.Alignment, javax.swing.GroupLayout.Group) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addGroup(javax.swing.GroupLayout.Alignment, javax.swing.GroupLayout.Group) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup void checkChildAlignment(javax.swing.GroupLayout.Alignment) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup void checkChildAlignment(javax.swing.GroupLayout.Alignment, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.ParallelGroup void setChildSize(javax.swing.GroupLayout.Spring, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.PreferredGapSpring boolean willHaveZeroSize(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup java.util.List&lt;javax.swing.GroupLayout.SpringDelta&gt; buildResizableList(int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addComponent(boolean, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addComponent(boolean, java.awt.Component, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addComponent(boolean, java.awt.Component, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addComponent(java.awt.Component, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addGroup(boolean, javax.swing.GroupLayout.Group)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup void insertAutopadding(int, java.util.List&lt;javax.swing.GroupLayout.AutoPreferredGapSpring&gt;, java.util.List&lt;javax.swing.GroupLayout.AutoPreferredGapSpring&gt;, java.util.List&lt;javax.swing.GroupLayout.ComponentSpring&gt;, java.util.List&lt;javax.swing.GroupLayout.ComponentSpring&gt;, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SequentialGroup void insertAutopadding(int, java.util.List&lt;javax.swing.GroupLayout.AutoPreferredGapSpring&gt;, java.util.List&lt;javax.swing.GroupLayout.AutoPreferredGapSpring&gt;, java.util.List&lt;javax.swing.GroupLayout.ComponentSpring&gt;, java.util.List&lt;javax.swing.GroupLayout.ComponentSpring&gt;, boolean) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.Spring int constrain(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.Spring int getBaseline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.Spring int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.Spring java.awt.Component.BaselineResizeBehavior getBaselineResizeBehavior()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.Spring javax.swing.GroupLayout.Alignment getAlignment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.Spring javax.swing.GroupLayout.Spring getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.SpringDelta int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SpringDelta int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.SpringDelta int compareTo(javax.swing.GroupLayout.SpringDelta) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.GroupLayout.SpringDelta int compareTo(javax.swing.GroupLayout.SpringDelta)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.GroupLayout.SpringDelta java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon ImageIcon(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon ImageIcon(java.awt.Image, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon ImageIcon(java.net.URL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon int getImageLoadStatus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon java.awt.Image getImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon java.awt.image.ImageObserver getImageObserver()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon java.lang.String getDescription()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon void loadImage(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon void paintIcon(java.awt.Component, java.awt.Graphics, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon.1 java.awt.Component run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ImageIcon.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ImageIcon.2 2()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon.2 java.awt.Component run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon int getAccessibleChildrenCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon int getAccessibleIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon int getAccessibleIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon int getAccessibleIndexInParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon javax.accessibility.Accessible getAccessibleParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ImageIcon.AccessibleImageIcon void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.InputMap InputMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.InputMap java.lang.Object get(javax.swing.KeyStroke)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.InputMap javax.swing.InputMap getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.InputMap javax.swing.KeyStroke[] keys()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.InputMap void put(javax.swing.KeyStroke, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.InputMap void put(javax.swing.KeyStroke, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.InputMap void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.InputMap void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.InputVerifier InputVerifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.InternalFrameFocusTraversalPolicy InternalFrameFocusTraversalPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JApplet boolean isRootPaneCheckingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JApplet java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JApplet javax.swing.JRootPane createRootPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JApplet javax.swing.JRootPane getRootPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JApplet javax.swing.TransferHandler getTransferHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JButton boolean isDefaultCapable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JButton java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JButton java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JButton void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JButton.AccessibleJButton javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JCheckBox boolean isBorderPaintedFlat()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JCheckBox java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBox java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBox void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBox void setIconFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JCheckBox void setIconFromAction(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JCheckBox void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBox.AccessibleJCheckBox AccessibleJCheckBox(javax.swing.JCheckBox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBox.AccessibleJCheckBox javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JCheckBoxMenuItem boolean shouldUpdateSelectedStateFromAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JCheckBoxMenuItem java.lang.Object[] getSelectedObjects()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JCheckBoxMenuItem java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBoxMenuItem java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBoxMenuItem void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem AccessibleJCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JColorChooser boolean getDragEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JColorChooser java.awt.Color showDialog(java.awt.Component, java.lang.String, java.awt.Color) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JColorChooser java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JColorChooser java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JColorChooser javax.swing.JComponent getPreviewPanel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JColorChooser javax.swing.JDialog createDialog(java.awt.Component, java.lang.String, boolean, javax.swing.JColorChooser, java.awt.event.ActionListener, java.awt.event.ActionListener)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JColorChooser javax.swing.colorchooser.AbstractColorChooserPanel removeChooserPanel(javax.swing.colorchooser.AbstractColorChooserPanel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JColorChooser javax.swing.colorchooser.AbstractColorChooserPanel[] getChooserPanels()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JColorChooser javax.swing.colorchooser.ColorSelectionModel getSelectionModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JColorChooser javax.swing.plaf.ColorChooserUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JColorChooser void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JColorChooser.AccessibleJColorChooser javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox E getPrototypeDisplayValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox JComboBox(E[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox boolean isEditable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox boolean isLightWeightPopupEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox boolean isListener(java.lang.Class, java.awt.event.ActionListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox boolean isListener(java.lang.Class, java.awt.event.ActionListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox int getMaximumRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox java.beans.PropertyChangeListener createActionPropertyChangeListener(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox java.lang.Object[] getSelectedObjects()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox java.lang.String getActionCommand()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox javax.swing.Action getAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox javax.swing.ComboBoxEditor getEditor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox javax.swing.ComboBoxModel&lt;E&gt; getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox javax.swing.JComboBox.KeySelectionManager createDefaultKeySelectionManager()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox javax.swing.JComboBox.KeySelectionManager getKeySelectionManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox javax.swing.ListCellRenderer&lt;? super E&gt; getRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox javax.swing.plaf.ComboBoxUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox void actionPropertyChanged(javax.swing.Action, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox void actionPropertyChanged(javax.swing.Action, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox void configureEditor(javax.swing.ComboBoxEditor, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox void configurePropertiesFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox void contentsChanged(javax.swing.event.ListDataEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox void intervalAdded(javax.swing.event.ListDataEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox void processKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox void setActionCommandFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.1 void ancestorAdded(javax.swing.event.AncestorEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.1 void ancestorMoved(javax.swing.event.AncestorEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.1 void ancestorRemoved(javax.swing.event.AncestorEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox AccessibleJComboBox(javax.swing.JComboBox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox int getAccessibleActionCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox java.lang.String getAccessibleActionDescription(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.Accessible access$500(javax.swing.JComboBox.AccessibleJComboBox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.Accessible access$500(javax.swing.JComboBox.AccessibleJComboBox)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.Accessible access$502(javax.swing.JComboBox.AccessibleJComboBox, javax.accessibility.Accessible) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.Accessible access$502(javax.swing.JComboBox.AccessibleJComboBox, javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.Accessible getAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.AccessibleAction getAccessibleAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.AccessibleSelection getAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.swing.JComboBox.AccessibleJComboBox.EditorAccessibleContext access$600(javax.swing.JComboBox.AccessibleJComboBox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.swing.JComboBox.AccessibleJComboBox.EditorAccessibleContext access$600(javax.swing.JComboBox.AccessibleJComboBox)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.swing.JComboBox.AccessibleJComboBox.EditorAccessibleContext access$602(javax.swing.JComboBox.AccessibleJComboBox, javax.swing.JComboBox.AccessibleJComboBox.EditorAccessibleContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.swing.JComboBox.AccessibleJComboBox.EditorAccessibleContext access$602(javax.swing.JComboBox.AccessibleJComboBox, javax.swing.JComboBox.AccessibleJComboBox.EditorAccessibleContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.swing.JList access$400(javax.swing.JComboBox.AccessibleJComboBox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox javax.swing.JList access$400(javax.swing.JComboBox.AccessibleJComboBox)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox void access$300(javax.swing.JComboBox.AccessibleJComboBox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox void selectAllAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxListSelectionListener AccessibleJComboBoxListSelectionListener(javax.swing.JComboBox.AccessibleJComboBox, javax.swing.JComboBox.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxListSelectionListener void valueChanged(javax.swing.event.ListSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener AccessibleJComboBoxPopupMenuListener(javax.swing.JComboBox.AccessibleJComboBox, javax.swing.JComboBox.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener void popupMenuCanceled(javax.swing.event.PopupMenuEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener void popupMenuCanceled(javax.swing.event.PopupMenuEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxPropertyChangeListener AccessibleJComboBoxPropertyChangeListener(javax.swing.JComboBox.AccessibleJComboBox, javax.swing.JComboBox.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.AccessibleJComboBoxPropertyChangeListener void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.AccessibleJComboBox.EditorAccessibleContext EditorAccessibleContext(javax.swing.JComboBox.AccessibleJComboBox, javax.accessibility.Accessible) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.ComboBoxActionPropertyChangeListener void actionPropertyChanged(javax.swing.JComboBox&lt;?&gt;, javax.swing.Action, java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.ComboBoxActionPropertyChangeListener void actionPropertyChanged(javax.swing.JComboBox&lt;?&gt;, javax.swing.Action, java.beans.PropertyChangeEvent) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComboBox.DefaultKeySelectionManager int selectionForKey(char, javax.swing.ComboBoxModel) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent boolean alwaysOnTop()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean checkIfChildObscuredBySibling()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean getAutoscrolls()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean getCreatedDoubleBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean getFlag(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean getInheritsPopupMenu()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean getVerifyInputWhenFocusTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isComponentObtainingGraphicsFrom(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent boolean isComponentObtainingGraphicsFrom(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isDoubleBuffered()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isLightweightComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent boolean isManagingFocus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isOptimizedDrawingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isPaintingForPrint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isPaintingOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isPaintingTile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isRequestFocusEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean isValidateRoot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean processKeyBinding(javax.swing.KeyStroke, java.awt.event.KeyEvent, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent boolean processKeyBindings(java.awt.event.KeyEvent, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent byte getWriteObjCounter(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent byte getWriteObjCounter(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent java.awt.Container getTopLevelAncestor()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Dimension getSize(java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Dimension getSize(java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Graphics getComponentGraphics(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Graphics safelyGetGraphics(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Graphics safelyGetGraphics(java.awt.Component, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Graphics safelyGetGraphics(java.awt.Component, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Insets getInsets(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Point getLocation(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Point getLocation(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Point getPopupLocation(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Point getPopupLocation(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Point getToolTipLocation(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Point getToolTipLocation(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Rectangle getBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Rectangle getBounds(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.awt.Rectangle getVisibleRect()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.awt.event.ActionListener getActionForKeyStroke(javax.swing.KeyStroke)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.lang.Object access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent java.lang.Object getClientProperty(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.lang.Object setDropLocation(javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.lang.Object setDropLocation(javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.lang.Object setDropLocation(javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_-&gt;null;_,!null,_-&gt;null;_,null,_-&gt;null;null,_,_-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent java.util.Hashtable access$300()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent javax.swing.ActionMap getActionMap()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.ActionMap getActionMap(boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.InputMap getInputMap()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.InputMap getInputMap(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.InputMap getInputMap(int, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.JPopupMenu getComponentPopupMenu()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.JRootPane getRootPane()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.JToolTip createToolTip()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.KeyStroke[] getRegisteredKeyStrokes()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.TransferHandler.DropLocation dropLocationForPoint(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.TransferHandler.DropLocation dropLocationForPoint(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent javax.swing.border.Border getBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent void access$200(javax.swing.JComponent, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void clientPropertyChanged(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent void clientPropertyChanged(java.lang.Object, java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent void clientPropertyChanged(java.lang.Object, java.lang.Object, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent void clientPropertyChanged(java.lang.Object, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent void componentInputMapChanged(javax.swing.ComponentInputMap) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent void computeVisibleRect(java.awt.Component, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void computeVisibleRect(java.awt.Component, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void computeVisibleRect(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void dndDone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent void paintForceDoubleBuffered(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void paintImmediately(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void processComponentKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent void processComponentKeyEvent(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent void processKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void registerNextFocusableComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent void repaint(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void setUIProperty(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent void setWriteObjCounter(javax.swing.JComponent, byte) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent void updateUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.1 boolean acceptRequestFocus(java.awt.Component, java.awt.Component, boolean, boolean, sun.awt.CausedFocusEvent.Cause) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.1 boolean acceptRequestFocus(java.awt.Component, java.awt.Component, boolean, boolean, sun.awt.CausedFocusEvent.Cause) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.1 boolean acceptRequestFocus(java.awt.Component, java.awt.Component, boolean, boolean, sun.awt.CausedFocusEvent.Cause) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.1 boolean acceptRequestFocus(java.awt.Component, java.awt.Component, boolean, boolean, sun.awt.CausedFocusEvent.Cause)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_,_,_-&gt;true;null,_,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent java.lang.String getBorderTitle(javax.swing.border.Border) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent java.lang.String getBorderTitle(javax.swing.border.Border)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent java.lang.String getTitledBorderText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent javax.accessibility.AccessibleExtendedComponent getAccessibleExtendedComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent javax.accessibility.AccessibleKeyBinding getAccessibleKeyBinding()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent.AccessibleContainerHandler void componentAdded(java.awt.event.ContainerEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent.AccessibleContainerHandler void componentRemoved(java.awt.event.ContainerEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent.AccessibleFocusHandler void focusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.AccessibleJComponent.AccessibleFocusHandler void focusLost(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.ActionStandin java.awt.event.ActionListener access$000(javax.swing.JComponent.ActionStandin) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent.ActionStandin java.awt.event.ActionListener access$000(javax.swing.JComponent.ActionStandin)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.ActionStandin java.lang.Object getValue(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.ActionStandin java.lang.Object getValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.ActionStandin void addPropertyChangeListener(java.beans.PropertyChangeListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.ActionStandin void addPropertyChangeListener(java.beans.PropertyChangeListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.ActionStandin void putValue(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.ActionStandin void putValue(java.lang.String, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.ActionStandin void putValue(java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.ActionStandin void removePropertyChangeListener(java.beans.PropertyChangeListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JComponent.ActionStandin void removePropertyChangeListener(java.beans.PropertyChangeListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.ActionStandin void setEnabled(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.IntVector int elementAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.IntVector int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.KeyboardState KeyboardState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JComponent.KeyboardState boolean shouldProcess(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent.ReadObjectCallback ReadObjectCallback(javax.swing.JComponent, java.io.ObjectInputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JComponent.ReadObjectCallback void access$400(javax.swing.JComponent.ReadObjectCallback, javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane int getDragMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDesktopPane java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane java.util.Collection&lt;javax.swing.JInternalFrame&gt; getAllFrames(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane java.util.Collection&lt;javax.swing.JInternalFrame&gt; getAllFrames(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane java.util.List&lt;javax.swing.JInternalFrame&gt; getFrames()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.DesktopManager getDesktopManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.JInternalFrame getNextFrame(javax.swing.JInternalFrame) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.JInternalFrame getNextFrame(javax.swing.JInternalFrame)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.JInternalFrame getNextFrame(javax.swing.JInternalFrame, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.JInternalFrame getNextFrame(javax.swing.JInternalFrame, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.JInternalFrame getSelectedFrame()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.JInternalFrame getTopInternalFrame()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.JInternalFrame selectFrame(boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDesktopPane javax.swing.plaf.DesktopPaneUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDesktopPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane.1 java.awt.Component getDefaultComponent(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDesktopPane.1 java.awt.Component getDefaultComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDesktopPane.AccessibleJDesktopPane javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDesktopPane.ComponentPosition int compareTo(javax.swing.JDesktopPane.ComponentPosition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane.ComponentPosition int compareTo(javax.swing.JDesktopPane.ComponentPosition)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDesktopPane.ComponentPosition javax.swing.JInternalFrame access$000(javax.swing.JDesktopPane.ComponentPosition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDesktopPane.ComponentPosition javax.swing.JInternalFrame access$000(javax.swing.JDesktopPane.ComponentPosition)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDialog JDialog(java.awt.Dialog, java.lang.String, boolean, java.awt.GraphicsConfiguration) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDialog JDialog(java.awt.Frame) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDialog JDialog(java.awt.Frame, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDialog JDialog(java.awt.Frame, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDialog JDialog(java.awt.Frame, java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDialog JDialog(java.awt.Frame, java.lang.String, boolean, java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDialog JDialog(java.awt.Frame, java.lang.String, boolean, java.awt.GraphicsConfiguration) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDialog JDialog(java.awt.Window, java.lang.String, java.awt.Dialog.ModalityType, java.awt.GraphicsConfiguration) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JDialog boolean isRootPaneCheckingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDialog int getDefaultCloseOperation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDialog java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDialog javax.swing.JRootPane createRootPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JDialog javax.swing.JRootPane getRootPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDialog javax.swing.TransferHandler getTransferHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JDialog void processWindowEvent(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane JEditorPane(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane int getAsynchronousLoadPriority(javax.swing.text.Document) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane java.io.InputStream getStream(java.net.URL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane java.lang.String getContentType()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane java.lang.String getText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane javax.swing.text.Document access$100(javax.swing.JEditorPane, javax.swing.text.EditorKit, java.net.URL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane javax.swing.text.Document access$100(javax.swing.JEditorPane, javax.swing.text.EditorKit, java.net.URL) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane javax.swing.text.Document initializeModel(javax.swing.text.EditorKit, java.net.URL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane javax.swing.text.EditorKit access$000(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane javax.swing.text.EditorKit access$000(javax.swing.JEditorPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JEditorPane javax.swing.text.EditorKit createDefaultEditorKit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane javax.swing.text.EditorKit createEditorKitForContentType(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane void access$200(javax.swing.JEditorPane, java.lang.String, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void access$300(javax.swing.JEditorPane, java.net.URLConnection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void access$300(javax.swing.JEditorPane, java.net.URLConnection) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void handleConnectionProperties(java.net.URLConnection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void handlePostData(java.net.HttpURLConnection, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void handlePostData(java.net.HttpURLConnection, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void read(java.io.InputStream, javax.swing.text.Document) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void scrollToReference(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane void setContentType(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void setPage(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void setPage(java.net.URL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane void setText(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.1 java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.1 java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.1 java.awt.Component getDefaultComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.AccessibleJEditorPane AccessibleJEditorPane(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.AccessibleJEditorPane java.lang.String getAccessibleDescription()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.AccessibleJEditorPane javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.AccessibleJEditorPaneHTML AccessibleJEditorPaneHTML(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.AccessibleJEditorPaneHTML javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.AccessibleJEditorPaneHTML javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.AccessibleJEditorPaneHTML javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.AccessibleJEditorPaneHTML javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.HeaderParser java.lang.String findKey(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.HeaderParser java.lang.String findValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.HeaderParser java.lang.String findValue(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport JEditorPaneAccessibleHypertextSupport(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport java.lang.String getLinkText(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport javax.accessibility.AccessibleHyperlink getLink(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.1 void changedUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.1 void insertUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.1 void removeUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink int getAccessibleActionCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink java.lang.Object getAccessibleActionAnchor(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink java.lang.Object getAccessibleActionObject(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink java.lang.String getAccessibleActionDescription(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.LinkVector LinkVector(javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport, javax.swing.JEditorPane.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.LinkVector int baseElementIndex(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit PlainEditorKit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit javax.swing.text.View create(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit javax.swing.text.View createI18N(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit javax.swing.text.View createI18N(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit javax.swing.text.ViewFactory getViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph PlainParagraph(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView boolean isAfter(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView boolean isAfter(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,_,!null-&gt;false;_,_,null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView boolean isBefore(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView boolean isBefore(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,_,!null-&gt;false;_,_,null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_-&gt;false;_,!null,_-&gt;false;_,_,!null-&gt;false;_,_,null-&gt;false;_,null,_-&gt;false;null,_,_-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,_,!null-&gt;null;_,_,null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView void childAllocation(int, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView void childAllocation(int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView void loadChildren(javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView void paint(java.awt.Graphics, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView void paint(java.awt.Graphics, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser JFileChooser(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser JFileChooser(java.lang.String, javax.swing.filechooser.FileSystemView) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser boolean accept(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser boolean accept(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean access$100(javax.swing.JFileChooser) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser boolean access$100(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean access$102(javax.swing.JFileChooser, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser boolean getControlButtonsAreShown()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean getDragEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean isAcceptAllFileFilterUsed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean isDirectorySelectionEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean isFileHidingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean isFileSelectionEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean isMultiSelectionEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser boolean isTraversable(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser int access$002(javax.swing.JFileChooser, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser int getApproveButtonMnemonic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser int getDialogType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser int getFileSelectionMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser int showDialog(java.awt.Component, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser java.io.File getCurrentDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser java.io.File getSelectedFile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getApproveButtonText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getApproveButtonToolTipText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getDescription(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getDescription(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getDialogTitle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getName(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getName(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getTypeDescription(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getTypeDescription(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.Icon getIcon(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.Icon getIcon(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.JComponent getAccessory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.JDialog createDialog(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.filechooser.FileFilter getAcceptAllFileFilter()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.filechooser.FileFilter getFileFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.filechooser.FileFilter[] getChoosableFileFilters()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.filechooser.FileSystemView getFileSystemView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.filechooser.FileView getFileView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser javax.swing.plaf.FileChooserUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFileChooser void addChoosableFileFilter(javax.swing.filechooser.FileFilter) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser void setCurrentDirectory(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser void setSelectedFiles(java.io.File[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser void setup(javax.swing.filechooser.FileSystemView) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFileChooser.1 void windowClosing(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFileChooser.AccessibleJFileChooser javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField JFormattedTextField(java.text.Format) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField boolean access$500(javax.swing.JFormattedTextField) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField boolean access$500(javax.swing.JFormattedTextField)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField boolean isEditValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField boolean isEdited()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField int getFocusLostBehavior()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField java.lang.Object getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField javax.swing.Action[] getActions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField javax.swing.JFormattedTextField.AbstractFormatter getFormatter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField javax.swing.JFormattedTextField.AbstractFormatterFactory getDefaultFormatterFactory(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField javax.swing.JFormattedTextField.AbstractFormatterFactory getDefaultFormatterFactory(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField javax.swing.JFormattedTextField.AbstractFormatterFactory getFormatterFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField void access$100(javax.swing.JFormattedTextField, java.lang.Object, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField void access$300(javax.swing.JFormattedTextField, javax.swing.Action[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField void access$300(javax.swing.JFormattedTextField, javax.swing.Action[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField void access$400(javax.swing.JFormattedTextField, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField void access$600(javax.swing.JFormattedTextField, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField void processFocusEvent(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField void processInputMethodEvent(java.awt.event.InputMethodEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField void setDocument(javax.swing.text.Document) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField void setFormatterActions(javax.swing.Action[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField.AbstractFormatter AbstractFormatter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField.AbstractFormatter java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFormattedTextField.AbstractFormatter javax.swing.Action[] getActions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.AbstractFormatter javax.swing.JFormattedTextField getFormattedTextField()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.DocumentFilter getDocumentFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.AbstractFormatter javax.swing.text.NavigationFilter getNavigationFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.AbstractFormatterFactory AbstractFormatterFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField.CancelAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.CommitAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.DocumentHandler DocumentHandler(javax.swing.JFormattedTextField, javax.swing.JFormattedTextField.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.DocumentHandler void changedUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.DocumentHandler void changedUpdate(javax.swing.event.DocumentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFormattedTextField.DocumentHandler void insertUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.DocumentHandler void removeUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFormattedTextField.FocusLostHandler FocusLostHandler(javax.swing.JFormattedTextField, javax.swing.JFormattedTextField.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFrame JFrame(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFrame JFrame(java.lang.String, java.awt.GraphicsConfiguration) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JFrame boolean isRootPaneCheckingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFrame int getDefaultCloseOperation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFrame java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFrame javax.swing.JRootPane createRootPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFrame javax.swing.JRootPane getRootPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFrame javax.swing.TransferHandler getTransferHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JFrame void processWindowEvent(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JFrame void setIconImage(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame boolean isClosable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isClosed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isFocusCycleRoot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isIconifiable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isMaximizable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isMaximum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isResizable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isRootPaneCheckingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame boolean isSelected()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame int getDefaultCloseOperation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame java.awt.Component getFocusOwner()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame java.awt.Container getFocusCycleRootAncestor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame java.awt.Cursor getLastCursor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame java.lang.String getTitle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame java.lang.String getWarningString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame javax.swing.Icon getFrameIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame javax.swing.JInternalFrame.JDesktopIcon getDesktopIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame javax.swing.JRootPane createRootPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame javax.swing.JRootPane getRootPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame javax.swing.plaf.InternalFrameUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame void access$100(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame void setFocusCycleRoot(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame void setLayer(java.lang.Integer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame void updateLastFocusOwner(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame.AccessibleJInternalFrame boolean setCurrentAccessibleValue(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame.AccessibleJInternalFrame boolean setCurrentAccessibleValue(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame.AccessibleJInternalFrame javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame.AccessibleJInternalFrame javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame.FocusPropertyChangeListener FocusPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame.FocusPropertyChangeListener FocusPropertyChangeListener(javax.swing.JInternalFrame.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame.FocusPropertyChangeListener FocusPropertyChangeListener(javax.swing.JInternalFrame.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame.FocusPropertyChangeListener void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon javax.swing.JDesktopPane getDesktopPane()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon javax.swing.JInternalFrame getInternalFrame()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon javax.swing.plaf.DesktopIconUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon boolean setCurrentAccessibleValue(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon boolean setCurrentAccessibleValue(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon java.lang.Number getCurrentAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon java.lang.Number getMaximumAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon java.lang.Number getMinimumAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLabel int getDisplayedMnemonic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel int getDisplayedMnemonicIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel int getHorizontalAlignment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel int getHorizontalTextPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel int getIconTextGap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel int getVerticalAlignment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel int getVerticalTextPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel java.awt.Component getLabelFor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel java.lang.String getText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLabel java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLabel javax.swing.Icon getIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel javax.swing.plaf.LabelUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel int getCaretPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel int getSelectionEnd()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel int getSelectionStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel java.awt.Rectangle getCharacterBounds(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel java.awt.Rectangle getTextRectangle()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel java.lang.String getAfterIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel java.lang.String getAtIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel java.lang.String getBeforeIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel java.lang.String getSelectedText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel java.lang.String getText(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel java.lang.String getTitledBorderText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel javax.accessibility.AccessibleExtendedComponent getAccessibleExtendedComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel javax.accessibility.AccessibleIcon[] getAccessibleIcon()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel javax.accessibility.AccessibleKeyBinding getAccessibleKeyBinding()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel javax.accessibility.AccessibleRelationSet getAccessibleRelationSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel javax.swing.text.AttributeSet getCharacterAttribute(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLabel.AccessibleJLabel.LabelKeyBinding int getAccessibleKeyBindingCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer V getView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer boolean isOptimizedDrawingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer boolean isPaintingOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer javax.swing.JPanel createGlassPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayer javax.swing.JPanel getGlassPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer javax.swing.plaf.LayerUI&lt;? super V&gt; getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer long getLayerEventMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer void addImpl(java.awt.Component, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer void addImpl(java.awt.Component, java.lang.Object, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer void paintComponent(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer void paintComponent(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayer void setBorder(javax.swing.border.Border) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer void setLayout(java.awt.LayoutManager) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer.1 javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer.LayerEventController LayerEventController(javax.swing.JLayer.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer.LayerEventController boolean isEventEnabled(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer.LayerEventController long getCurrentEventMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayer.LayerEventController void access$100(javax.swing.JLayer.LayerEventController, long, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayer.LayerEventController void eventDispatched(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayer.LayerEventController.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer.LayerEventController.1 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer.LayerEventController.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayer.LayerEventController.2 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayeredPane boolean isOptimizedDrawingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JLayeredPane int getIndexOf(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayeredPane int getLayer(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayeredPane int insertIndexForLayer(java.awt.Component, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayeredPane java.awt.Component[] getComponentsInLayer(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayeredPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayeredPane javax.swing.JLayeredPane getLayeredPaneAbove(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayeredPane javax.swing.JLayeredPane getLayeredPaneAbove(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JLayeredPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayeredPane void putLayer(javax.swing.JComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayeredPane void setLayer(java.awt.Component, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JLayeredPane.AccessibleJLayeredPane javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList E getPrototypeCellValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList E getSelectedValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList JList(javax.swing.ListModel&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList boolean getDragEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList int getFixedCellHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList int getFixedCellWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList int getLayoutOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList int getNextMatch(java.lang.String, int, javax.swing.text.Position.Bias) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList int getNextMatch(java.lang.String, int, javax.swing.text.Position.Bias) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList int getVisibleRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList int[] getSelectedIndices()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList java.awt.Color getSelectionBackground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList java.awt.Color getSelectionForeground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList java.awt.Point indexToLocation(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList java.awt.Rectangle getCellBounds(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList java.lang.Object setDropLocation(javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList java.lang.Object[] getSelectedValues()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList javax.swing.DropMode getDropMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList javax.swing.JList.DropLocation dropLocationForPoint(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList javax.swing.JList.DropLocation getDropLocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList javax.swing.ListCellRenderer&lt;? super E&gt; getCellRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList javax.swing.ListModel&lt;E&gt; getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList javax.swing.ListSelectionModel access$200(javax.swing.JList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList javax.swing.ListSelectionModel access$200(javax.swing.JList)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList javax.swing.ListSelectionModel createSelectionModel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList javax.swing.ListSelectionModel getSelectionModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList javax.swing.TransferHandler.DropLocation dropLocationForPoint(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList javax.swing.plaf.ListUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList void checkScrollableParameters(java.awt.Rectangle, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList void setDropMode(javax.swing.DropMode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList void setModel(javax.swing.ListModel&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList void setSelectedIndices(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList void setSelectedValue(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList void setSelectionModel(javax.swing.ListSelectionModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.1 E getElementAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.1 int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.3 int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.4 E getElementAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.4 int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.AccessibleJList AccessibleJList(javax.swing.JList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList javax.accessibility.Accessible getAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.AccessibleJList javax.accessibility.AccessibleSelection getAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList void contentsChanged(javax.swing.event.ListDataEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList void intervalAdded(javax.swing.event.ListDataEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList void intervalRemoved(javax.swing.event.ListDataEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList void valueChanged(javax.swing.event.ListSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild int getAccessibleIndexInParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Color getBackground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Color getForeground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Component getComponentAtIndex(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Component getCurrentComponent()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Cursor getCursor()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Dimension getSize()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.FontMetrics getFontMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Point getLocation()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Point getLocationOnScreen()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.lang.String getAccessibleDescription()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.lang.String getAccessibleName()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleComponent getAccessibleComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleContext getCurrentAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleIcon[] getAccessibleIcon()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild void setVisible(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.DropLocation DropLocation(java.awt.Point, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.DropLocation DropLocation(java.awt.Point, int, boolean, javax.swing.JList.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.DropLocation DropLocation(java.awt.Point, int, boolean, javax.swing.JList.1) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.DropLocation boolean isInsert()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.DropLocation int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JList.DropLocation java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JList.ListSelectionHandler ListSelectionHandler(javax.swing.JList, javax.swing.JList.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JList.ListSelectionHandler void valueChanged(javax.swing.event.ListSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu int getDelay()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu java.awt.Component add(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu java.awt.Component add(java.awt.Component, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu java.awt.Component getMenuComponent(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenu java.awt.Point getCustomMenuLocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu java.awt.Point getPopupMenuOrigin()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu java.awt.Point translateToPopupMenu(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu java.awt.Point translateToPopupMenu(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu java.awt.Point translateToPopupMenu(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu java.beans.PropertyChangeListener createActionChangeListener(javax.swing.JMenuItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.JMenu.WinListener createWinListener(javax.swing.JPopupMenu)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.JMenuItem add(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.JMenuItem createActionComponent(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.JMenuItem createActionComponent(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.JMenuItem getItem(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.JMenuItem insert(javax.swing.Action, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.JMenuItem insert(javax.swing.JMenuItem, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu javax.swing.MenuElement[] access$000(javax.swing.JMenu, javax.swing.JMenu) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.MenuElement[] access$000(javax.swing.JMenu, javax.swing.JMenu) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.MenuElement[] access$000(javax.swing.JMenu, javax.swing.JMenu)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.MenuElement[] buildMenuElementArray(javax.swing.JMenu) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.MenuElement[] buildMenuElementArray(javax.swing.JMenu)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.MenuElement[] getSubElements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu javax.swing.event.ChangeListener createMenuChangeListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu void configureAcceleratorFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenu void configureAcceleratorFromAction(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu void initFocusability()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu void processKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu void setAccelerator(javax.swing.KeyStroke) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenu void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu.AccessibleJMenu AccessibleJMenu(javax.swing.JMenu) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu.AccessibleJMenu javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenu.AccessibleJMenu javax.accessibility.Accessible getAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenu.AccessibleJMenu javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu.AccessibleJMenu javax.accessibility.AccessibleSelection getAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu.AccessibleJMenu void selectAllAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenu.MenuChangeListener void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenu.WinListener void windowClosing(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar boolean isBorderPainted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar boolean processBindingForKeyStrokeRecursive(javax.swing.MenuElement, javax.swing.KeyStroke, java.awt.event.KeyEvent, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar boolean processBindingForKeyStrokeRecursive(javax.swing.MenuElement, javax.swing.KeyStroke, java.awt.event.KeyEvent, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar int getComponentIndex(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuBar java.awt.Component getComponentAtIndex(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuBar java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuBar javax.swing.JMenu add(javax.swing.JMenu)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar javax.swing.JMenu getMenu(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar javax.swing.MenuElement[] getSubElements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuBar javax.swing.SingleSelectionModel getSelectionModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar javax.swing.plaf.MenuBarUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar void menuSelectionChanged(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuBar void setHelpMenu(javax.swing.JMenu) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuBar.AccessibleJMenuBar javax.accessibility.Accessible getAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuBar.AccessibleJMenuBar javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuBar.AccessibleJMenuBar javax.accessibility.AccessibleSelection getAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuBar.AccessibleJMenuBar void selectAllAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuItem java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem javax.swing.KeyStroke getAccelerator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuItem javax.swing.MenuElement[] getSubElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem void actionPropertyChanged(javax.swing.Action, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem void configureAcceleratorFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem void init(java.lang.String, javax.swing.Icon) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem void init(java.lang.String, javax.swing.Icon) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem void largeIconChanged(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem void largeIconChanged(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuItem void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem void processMenuDragMouseEvent(javax.swing.event.MenuDragMouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem void processMenuKeyEvent(javax.swing.event.MenuKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem void setIconFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem.AccessibleJMenuItem AccessibleJMenuItem(javax.swing.JMenuItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JMenuItem.AccessibleJMenuItem javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuItem.AccessibleJMenuItem void fireAccessibilityFocusedEvent(javax.swing.JMenuItem) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem.AccessibleJMenuItem void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem.MenuItemFocusListener MenuItemFocusListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuItem.MenuItemFocusListener MenuItemFocusListener(javax.swing.JMenuItem.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem.MenuItemFocusListener MenuItemFocusListener(javax.swing.JMenuItem.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuItem.MenuItemFocusListener void focusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JMenuItem.MenuItemFocusListener void focusGained(java.awt.event.FocusEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JMenuItem.MenuItemFocusListener void focusLost(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane boolean getWantsInput()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane int getMaxCharactersPerLineCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane int getMessageType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane int getOptionType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane int styleFromMessageType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane java.awt.Frame getFrameForComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane java.awt.Window getWindowForComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane java.lang.Object getInitialSelectionValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane java.lang.Object getInitialValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane java.lang.Object getInputValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane java.lang.Object getMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane java.lang.Object getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane java.lang.Object showInputDialog(java.awt.Component, java.lang.Object, java.lang.String, int, javax.swing.Icon, java.lang.Object[], java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane java.lang.Object showInternalInputDialog(java.awt.Component, java.lang.Object, java.lang.String, int, javax.swing.Icon, java.lang.Object[], java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane java.lang.Object[] getSelectionValues()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.Icon getIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.JDesktopPane getDesktopPaneForComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.JDesktopPane getDesktopPaneForComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.JDialog createDialog(java.awt.Component, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.JDialog createDialog(java.awt.Component, java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.JDialog createDialog(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.JInternalFrame createInternalFrame(java.awt.Component, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.JInternalFrame createInternalFrame(java.awt.Component, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane javax.swing.plaf.OptionPaneUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JOptionPane void initDialog(javax.swing.JDialog, int, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane void setRootFrame(java.awt.Frame) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JOptionPane.2 void windowClosed(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane.2 void windowClosing(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane.2 void windowGainedFocus(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane.3 void componentShown(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane.4 void internalFrameClosing(javax.swing.event.InternalFrameEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JOptionPane.AccessibleJOptionPane javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPanel java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPanel java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPanel javax.swing.plaf.PanelUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPanel void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPanel.AccessibleJPanel javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPasswordField JPasswordField(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField JPasswordField(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField JPasswordField(javax.swing.text.Document, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField JPasswordField(javax.swing.text.Document, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField boolean customSetUIProperty(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField boolean echoCharIsSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPasswordField char getEchoChar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPasswordField char[] getPassword()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPasswordField java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPasswordField void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField AccessibleJPasswordField(javax.swing.JPasswordField) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField java.lang.String getAfterIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField java.lang.String getAtIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField java.lang.String getBeforeIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField java.lang.String getEchoString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField java.lang.String getEchoString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField java.lang.String getTextRange(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField javax.accessibility.AccessibleTextSequence getTextSequenceAfter(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField javax.accessibility.AccessibleTextSequence getTextSequenceAt(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPasswordField.AccessibleJPasswordField javax.accessibility.AccessibleTextSequence getTextSequenceBefore(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPopupMenu boolean alwaysOnTop()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu boolean isBorderPainted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu boolean isLightWeightPopupEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu boolean isPopupMenu()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu boolean isVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu int getComponentIndex(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPopupMenu java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu java.awt.Component getInvoker()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu java.awt.Frame getFrame(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu java.awt.Point adjustPopupLocationToFitScreen(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu java.beans.PropertyChangeListener createActionChangeListener(javax.swing.JMenuItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu java.lang.String getLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu javax.swing.JMenuItem add(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu javax.swing.JMenuItem add(javax.swing.JMenuItem)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu javax.swing.JMenuItem createActionComponent(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPopupMenu javax.swing.JMenuItem createActionComponent(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu javax.swing.MenuElement[] getSubElements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu javax.swing.Popup getPopup()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu javax.swing.SingleSelectionModel getSelectionModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu javax.swing.plaf.PopupMenuUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu void processKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu void processMenuKeyEvent(javax.swing.event.MenuKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPopupMenu void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPopupMenu void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JPopupMenu void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu.AccessibleJPopupMenu AccessibleJPopupMenu(javax.swing.JPopupMenu) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu.AccessibleJPopupMenu javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JPopupMenu.AccessibleJPopupMenu void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JPopupMenu.Separator java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JProgressBar boolean isBorderPainted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JProgressBar boolean isIndeterminate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JProgressBar boolean isStringPainted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JProgressBar int getOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JProgressBar java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JProgressBar java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JProgressBar javax.swing.BoundedRangeModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JProgressBar javax.swing.event.ChangeListener createChangeListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JProgressBar javax.swing.plaf.ProgressBarUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JProgressBar void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JProgressBar.AccessibleJProgressBar boolean setCurrentAccessibleValue(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JProgressBar.AccessibleJProgressBar boolean setCurrentAccessibleValue(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JProgressBar.AccessibleJProgressBar javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JProgressBar.AccessibleJProgressBar javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JProgressBar.AccessibleJProgressBar javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JProgressBar.ModelListener ModelListener(javax.swing.JProgressBar, javax.swing.JProgressBar.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JProgressBar.ModelListener void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRadioButton java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRadioButton java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRadioButton void setIconFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRadioButton void setIconFromAction(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRadioButton void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRadioButton.AccessibleJRadioButton AccessibleJRadioButton(javax.swing.JRadioButton) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRadioButton.AccessibleJRadioButton javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRadioButtonMenuItem boolean shouldUpdateSelectedStateFromAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRadioButtonMenuItem java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRadioButtonMenuItem java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRadioButtonMenuItem void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem AccessibleJRadioButtonMenuItem(javax.swing.JRadioButtonMenuItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane boolean getUseTrueDoubleBuffering()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane boolean isValidateRoot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane int getWindowDecorationStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane java.awt.Component createGlassPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane java.awt.Component getGlassPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane java.awt.Container createContentPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane java.awt.Container getContentPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane java.awt.LayoutManager createRootLayout()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane javax.swing.JButton getDefaultButton()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane javax.swing.JLayeredPane createLayeredPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane javax.swing.JLayeredPane getLayeredPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane javax.swing.JMenuBar getJMenuBar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane javax.swing.JMenuBar getMenuBar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane javax.swing.plaf.RootPaneUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane void setContentPane(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane void setGlassPane(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane void setLayeredPane(javax.swing.JLayeredPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane.1 void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane.1 void addLayoutComponent(java.awt.Component, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.AccessibleJRootPane javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane.DefaultAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout float getLayoutAlignmentX(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout float getLayoutAlignmentX(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane.RootLayout float getLayoutAlignmentY(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout float getLayoutAlignmentY(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.awt.Component, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void invalidateLayout(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void invalidateLayout(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void removeLayoutComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JRootPane.RootLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar int getBlockIncrement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar int getBlockIncrement(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar int getOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar int getUnitIncrement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar int getUnitIncrement(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar java.awt.Dimension getMaximumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar javax.swing.BoundedRangeModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar javax.swing.plaf.ScrollBarUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar void access$100(javax.swing.JScrollBar, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar.AccessibleJScrollBar boolean setCurrentAccessibleValue(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JScrollBar.AccessibleJScrollBar boolean setCurrentAccessibleValue(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar.AccessibleJScrollBar java.lang.Number getMaximumAccessibleValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar.AccessibleJScrollBar javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollBar.AccessibleJScrollBar javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar.AccessibleJScrollBar javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollBar.ModelListener ModelListener(javax.swing.JScrollBar, javax.swing.JScrollBar.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JScrollBar.ModelListener void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane JScrollPane(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JScrollPane JScrollPane(java.awt.Component, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JScrollPane boolean isValidateRoot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane boolean isWheelScrollingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane int getHorizontalScrollBarPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane int getVerticalScrollBarPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane java.awt.Component getCorner(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane java.awt.Component getCorner(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JScrollPane java.awt.Rectangle getViewportBorderBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.JScrollBar createHorizontalScrollBar()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.JScrollBar createVerticalScrollBar()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.JScrollBar getHorizontalScrollBar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.JScrollBar getVerticalScrollBar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.JViewport createViewport()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.JViewport getColumnHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.JViewport getRowHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.JViewport getViewport()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.border.Border getViewportBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane javax.swing.plaf.ScrollPaneUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane void setCorner(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane.AccessibleJScrollPane AccessibleJScrollPane(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane.AccessibleJScrollPane javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JScrollPane.AccessibleJScrollPane void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane.AccessibleJScrollPane void setScrollBarRelations(javax.swing.JScrollBar) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JScrollPane.AccessibleJScrollPane void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSeparator int getOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSeparator java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSeparator java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSeparator javax.swing.plaf.SeparatorUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSeparator void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSeparator.AccessibleJSeparator javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider boolean getInverted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider boolean getPaintLabels()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider boolean getPaintTicks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider boolean getPaintTrack()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider boolean getSnapToTicks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider boolean getSnapToValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider int getMajorTickSpacing()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider int getMinorTickSpacing()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider int getOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider java.util.Dictionary access$100(javax.swing.JSlider) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider java.util.Dictionary access$100(javax.swing.JSlider)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider java.util.Dictionary getLabelTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider java.util.Hashtable createStandardLabels(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider javax.swing.BoundedRangeModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider javax.swing.event.ChangeListener createChangeListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider javax.swing.plaf.SliderUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider.1SmartHashtable 1SmartHashtable(javax.swing.JSlider, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider.1SmartHashtable void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider.AccessibleJSlider boolean setCurrentAccessibleValue(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSlider.AccessibleJSlider boolean setCurrentAccessibleValue(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider.AccessibleJSlider javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSlider.AccessibleJSlider javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider.AccessibleJSlider javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSlider.ModelListener ModelListener(javax.swing.JSlider, javax.swing.JSlider.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSlider.ModelListener void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner JSpinner(javax.swing.SpinnerModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner javax.swing.Action access$200()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner javax.swing.JComponent access$600(javax.swing.JSpinner) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner javax.swing.JComponent access$600(javax.swing.JSpinner)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner javax.swing.JComponent createEditor(javax.swing.SpinnerModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner javax.swing.JComponent createEditor(javax.swing.SpinnerModel)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner javax.swing.JComponent getEditor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner javax.swing.SpinnerModel access$500(javax.swing.JSpinner) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner javax.swing.SpinnerModel access$500(javax.swing.JSpinner)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner javax.swing.SpinnerModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner javax.swing.plaf.SpinnerUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner void setEditor(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner void setModel(javax.swing.SpinnerModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner AccessibleJSpinner(javax.swing.JSpinner) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner boolean sameWindowAncestor(java.awt.Component, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner boolean sameWindowAncestor(java.awt.Component, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner boolean sameWindowAncestor(java.awt.Component, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner int getAccessibleActionCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.awt.Rectangle getCharacterBounds(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.Number getCurrentAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.Number getMaximumAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.Number getMinimumAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.String getAccessibleActionDescription(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.String getAfterIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.String getAtIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.String getBeforeIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.String getSelectedText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner java.lang.String getTextRange(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleAction getAccessibleAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleContext getEditorAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleEditableText getEditorAccessibleEditableText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleText getEditorAccessibleText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner javax.swing.text.AttributeSet getCharacterAttribute(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.AccessibleJSpinner void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DateEditor DateEditor(javax.swing.JSpinner) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DateEditor DateEditor(javax.swing.JSpinner, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DateEditor DateEditor(javax.swing.JSpinner, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DateEditor DateEditor(javax.swing.JSpinner, java.text.DateFormat) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor DefaultEditor(javax.swing.JSpinner) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension insetSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension insetSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor javax.swing.JSpinner getSpinner()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor void dismiss(javax.swing.JSpinner) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor void removeLayoutComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DefaultEditor void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction DisabledAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction DisabledAction(javax.swing.JSpinner.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction DisabledAction(javax.swing.JSpinner.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction boolean isEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction java.lang.Object getValue(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction java.lang.Object getValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void actionPerformed(java.awt.event.ActionEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void addPropertyChangeListener(java.beans.PropertyChangeListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void addPropertyChangeListener(java.beans.PropertyChangeListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void putValue(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void putValue(java.lang.String, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void putValue(java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void removePropertyChangeListener(java.beans.PropertyChangeListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void removePropertyChangeListener(java.beans.PropertyChangeListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.DisabledAction void setEnabled(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.ListEditor ListEditor(javax.swing.JSpinner) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.ListEditor.ListFormatter ListFormatter(javax.swing.JSpinner.ListEditor, javax.swing.JSpinner.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.ListEditor.ListFormatter java.lang.Object stringToValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.ListEditor.ListFormatter java.lang.String valueToString(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.ListEditor.ListFormatter java.lang.String valueToString(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JSpinner.ListEditor.ListFormatter.Filter Filter(javax.swing.JSpinner.ListEditor.ListFormatter, javax.swing.JSpinner.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.ListEditor.ListFormatter.Filter void replace(javax.swing.text.DocumentFilter.FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.ModelListener ModelListener(javax.swing.JSpinner, javax.swing.JSpinner.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.ModelListener void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSpinner.NumberEditor NumberEditor(javax.swing.JSpinner) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.NumberEditor NumberEditor(javax.swing.JSpinner, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.NumberEditor NumberEditor(javax.swing.JSpinner, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.NumberEditor NumberEditor(javax.swing.JSpinner, java.text.DecimalFormat) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSpinner.NumberEditorFormatter NumberEditorFormatter(javax.swing.SpinnerNumberModel, java.text.NumberFormat) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSplitPane JSplitPane(int, boolean, java.awt.Component, java.awt.Component) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSplitPane JSplitPane(int, boolean, java.awt.Component, java.awt.Component) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSplitPane JSplitPane(int, java.awt.Component, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSplitPane JSplitPane(int, java.awt.Component, java.awt.Component) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSplitPane boolean isContinuousLayout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane boolean isOneTouchExpandable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane boolean isValidateRoot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane double getResizeWeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane int getDividerLocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane int getDividerSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane int getLastDividerLocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane int getOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane java.awt.Component getBottomComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane java.awt.Component getLeftComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane java.awt.Component getRightComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane java.awt.Component getTopComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSplitPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSplitPane javax.swing.plaf.SplitPaneUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane void setLeftComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSplitPane void setRightComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSplitPane void setUIProperty(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSplitPane void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSplitPane.AccessibleJSplitPane boolean setCurrentAccessibleValue(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JSplitPane.AccessibleJSplitPane boolean setCurrentAccessibleValue(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane.AccessibleJSplitPane javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JSplitPane.AccessibleJSplitPane javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JSplitPane.AccessibleJSplitPane javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane int getTabLayoutPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane int getTabPlacement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane int indexOfTab(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane int indexOfTabComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane java.awt.Component add(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane java.awt.Component add(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane java.awt.Component add(java.awt.Component, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane java.awt.Component add(java.awt.Component, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane java.awt.Component add(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane java.awt.Component getSelectedComponent()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane java.awt.Rectangle getBoundsAt(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane java.util.List access$000(javax.swing.JTabbedPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane java.util.List access$000(javax.swing.JTabbedPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane javax.swing.SingleSelectionModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane javax.swing.event.ChangeListener createChangeListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane javax.swing.plaf.TabbedPaneUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane void access$100(javax.swing.JTabbedPane, java.lang.String, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane void changeAccessibleSelection(javax.swing.JTabbedPane.Page, java.lang.String, javax.swing.JTabbedPane.Page) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane void changeAccessibleSelection(javax.swing.JTabbedPane.Page, java.lang.String, javax.swing.JTabbedPane.Page) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane void insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane AccessibleJTabbedPane(javax.swing.JTabbedPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane int getAccessibleSelectionCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane javax.accessibility.Accessible getAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane javax.accessibility.AccessibleSelection getAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane void clearAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane void removeAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane void selectAllAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.ModelListener void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page boolean isEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page boolean isFocusTraversable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page int getAccessibleChildrenCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page int getDisplayedMnemonicIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page int getMnemonic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page java.awt.Dimension getSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page java.awt.Point getLocation()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page java.awt.Point getLocationOnScreen()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page java.lang.String getAccessibleDescription()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page java.lang.String getAccessibleName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page javax.accessibility.AccessibleComponent getAccessibleComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page javax.accessibility.AccessibleIcon[] getAccessibleIcon()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page void addFocusListener(java.awt.event.FocusListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page void addFocusListener(java.awt.event.FocusListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page void removeFocusListener(java.awt.event.FocusListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page void removeFocusListener(java.awt.event.FocusListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page void requestFocus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page void setBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page void setBounds(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page void setLocation(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page void setLocation(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTabbedPane.Page void setSize(java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTabbedPane.Page void setSize(java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable JTable(javax.swing.table.TableModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel, javax.swing.ListSelectionModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel, javax.swing.ListSelectionModel) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel, javax.swing.ListSelectionModel) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable boolean getAutoCreateColumnsFromModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getAutoCreateRowSorter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getDragEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getFillsViewportHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getRowSelectionAllowed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getScrollableTracksViewportWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getShowHorizontalLines()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getShowVerticalLines()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getSurrendersFocusOnKeystroke()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean getUpdateSelectionOnSort()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable boolean isEditing()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable int access$200(javax.swing.JTable, javax.swing.event.RowSorterEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int access$200(javax.swing.JTable, javax.swing.event.RowSorterEvent, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable int columnAtPoint(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int convertRowIndexToModel(javax.swing.event.RowSorterEvent, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable int convertRowIndexToView(int, javax.swing.JTable.ModelChange) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable int getAutoResizeMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable int getEditingColumn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable int getEditingRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable int getLeadingCol(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int getLeadingRow(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int getNextBlockIncrement(java.awt.Rectangle, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int getPreviousBlockIncrement(java.awt.Rectangle, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int getRowHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable int getRowMargin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int getTrailingCol(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int getTrailingRow(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int leadingEdge(java.awt.Rectangle, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int limit(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable int rowAtPoint(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int trailingEdge(java.awt.Rectangle, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int viewIndexForColumn(javax.swing.table.TableColumn) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable int[] access$300(javax.swing.JTable, javax.swing.event.RowSorterEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable int[] access$300(javax.swing.JTable, javax.swing.event.RowSorterEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable int[] convertSelectionToModel(javax.swing.event.RowSorterEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable int[] getSelectedRows()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.awt.Color getGridColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable java.awt.Color getSelectionBackground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable java.awt.Color getSelectionForeground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable java.awt.Component getEditorComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable java.awt.Component prepareEditor(javax.swing.table.TableCellEditor, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.awt.Dimension getIntercellSpacing()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.awt.Dimension getPreferredScrollableViewportSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable java.awt.Rectangle getCellRect(int, int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.awt.print.Printable getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.lang.Object setDropLocation(javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.lang.Throwable access$602(javax.swing.JTable, java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable java.lang.Throwable access$602(javax.swing.JTable, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.DropMode getDropMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.JScrollPane createScrollPaneForTable(javax.swing.JTable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.JScrollPane createScrollPaneForTable(javax.swing.JTable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable javax.swing.JTable.DropLocation dropLocationForPoint(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.JTable.DropLocation getDropLocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.ListSelectionModel createDefaultSelectionModel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable javax.swing.ListSelectionModel getSelectionModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.RowSorter&lt;? extends javax.swing.table.TableModel&gt; getRowSorter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.SizeSequence access$400(javax.swing.JTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable javax.swing.SizeSequence access$400(javax.swing.JTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.SizeSequence access$402(javax.swing.JTable, javax.swing.SizeSequence) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable javax.swing.SizeSequence access$402(javax.swing.JTable, javax.swing.SizeSequence)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.TransferHandler.DropLocation dropLocationForPoint(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.plaf.TableUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.table.JTableHeader createDefaultTableHeader()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable javax.swing.table.JTableHeader getTableHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableCellEditor getCellEditor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableCellEditor getDefaultEditor(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableCellEditor getDefaultEditor(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableCellRenderer getDefaultRenderer(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableCellRenderer getDefaultRenderer(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableColumn getResizingColumn()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableColumnModel createDefaultColumnModel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableColumnModel getColumnModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableModel createDefaultDataModel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable javax.swing.table.TableModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable void access$500(javax.swing.JTable, int[], int, javax.swing.JTable.ModelChange) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void access$500(javax.swing.JTable, int[], int, javax.swing.JTable.ModelChange) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void access$500(javax.swing.JTable, int[], int, javax.swing.JTable.ModelChange) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void addColumn(javax.swing.table.TableColumn) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void adjustSizes(long, javax.swing.JTable.Resizable2, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void adjustSizes(long, javax.swing.JTable.Resizable3, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void changeSelectionModel(javax.swing.ListSelectionModel, int, boolean, boolean, boolean, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void columnAdded(javax.swing.event.TableColumnModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void columnMarginChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void columnMoved(javax.swing.event.TableColumnModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void columnRemoved(javax.swing.event.TableColumnModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void columnSelectionChanged(javax.swing.event.ListSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void editingCanceled(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void editingStopped(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void notifySorter(javax.swing.JTable.ModelChange) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void repaintSortedRows(javax.swing.JTable.ModelChange) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void restoreSortingSelection(int[], int, javax.swing.JTable.ModelChange) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void restoreSortingSelection(int[], int, javax.swing.JTable.ModelChange) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void setColumnModel(javax.swing.table.TableColumnModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void setDefaultEditor(java.lang.Class&lt;?&gt;, javax.swing.table.TableCellEditor) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void setDefaultRenderer(java.lang.Class&lt;?&gt;, javax.swing.table.TableCellRenderer) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void setDropMode(javax.swing.DropMode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void setGridColor(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void setIntercellSpacing(java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void setLazyValue(java.util.Hashtable, java.lang.Class, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void setModel(javax.swing.table.TableModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void setSelectionModel(javax.swing.ListSelectionModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void setUIProperty(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void sortedTableChanged(javax.swing.event.RowSorterEvent, javax.swing.event.TableModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void sortedTableChanged(javax.swing.event.RowSorterEvent, javax.swing.event.TableModelEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable void sorterChanged(javax.swing.event.RowSorterEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void tableRowsDeleted(javax.swing.event.TableModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void tableRowsInserted(javax.swing.event.TableModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void valueChanged(javax.swing.event.ListSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.1 boolean isCellEditable(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.1 int getColumnCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.1 int getRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.1 java.lang.Object getValueAt(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.3 int getElementCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable AccessibleJTable(javax.swing.JTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable int getAccessibleColumnExtentAt(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable int getAccessibleRowExtentAt(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleAt(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleCaption()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleColumnDescription(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleRowDescription(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleSummary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.AccessibleSelection getAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.AccessibleTable getAccessibleColumnHeader()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.AccessibleTable getAccessibleRowHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.AccessibleTable getAccessibleTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void columnAdded(javax.swing.event.TableColumnModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void columnMarginChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void columnMoved(javax.swing.event.TableColumnModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void columnRemoved(javax.swing.event.TableColumnModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void columnSelectionChanged(javax.swing.event.ListSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void columnSelectionChanged(javax.swing.event.ListSelectionEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void editingCanceled(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void editingCanceled(javax.swing.event.ChangeEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void editingStopped(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void setAccessibleColumnHeader(javax.accessibility.AccessibleTable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void setAccessibleColumnHeader(javax.accessibility.AccessibleTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void setAccessibleRowHeader(javax.accessibility.AccessibleTable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void setAccessibleRowHeader(javax.accessibility.AccessibleTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void tableChanged(javax.swing.event.TableModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void tableRowsDeleted(javax.swing.event.TableModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void tableRowsInserted(javax.swing.event.TableModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable void valueChanged(javax.swing.event.ListSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell int getAccessibleIndexInParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.Color getBackground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.Color getForeground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.Cursor getCursor()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.Dimension getSize()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.FontMetrics getFontMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.Point getLocation()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.Point getLocationOnScreen()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.Accessible getAccessibleParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.AccessibleComponent getAccessibleComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.AccessibleContext getCurrentAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell void setLocation(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell void setLocation(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell int getAccessibleIndexInParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Color getBackground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Color getForeground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Component getCurrentComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Cursor getCursor()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Dimension getSize()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.FontMetrics getFontMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Point getLocation()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Point getLocationOnScreen()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.lang.String getAccessibleName()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell javax.accessibility.Accessible getAccessibleParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell javax.accessibility.AccessibleComponent getAccessibleComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell void setLocation(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableHeaderCell void setLocation(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange int getFirstColumn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange int getFirstRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange int getLastColumn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange int getLastRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange int getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader AccessibleTableHeader(javax.swing.JTable.AccessibleJTable, javax.swing.table.JTableHeader) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader boolean isAccessibleColumnSelected(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader boolean isAccessibleRowSelected(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader boolean isAccessibleSelected(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader int getAccessibleColumnExtentAt(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader int getAccessibleRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader int getAccessibleRowExtentAt(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader int[] getSelectedAccessibleColumns()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader int[] getSelectedAccessibleRows()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader javax.accessibility.Accessible getAccessibleAt(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader javax.accessibility.Accessible getAccessibleCaption()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader javax.accessibility.Accessible getAccessibleColumnDescription(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader javax.accessibility.Accessible getAccessibleRowDescription(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader javax.accessibility.Accessible getAccessibleSummary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader javax.accessibility.AccessibleTable getAccessibleColumnHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader javax.accessibility.AccessibleTable getAccessibleRowHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleCaption(javax.accessibility.Accessible) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleCaption(javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleColumnDescription(int, javax.accessibility.Accessible) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleColumnDescription(int, javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleColumnHeader(javax.accessibility.AccessibleTable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleColumnHeader(javax.accessibility.AccessibleTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleRowDescription(int, javax.accessibility.Accessible) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleRowDescription(int, javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleRowHeader(javax.accessibility.AccessibleTable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleRowHeader(javax.accessibility.AccessibleTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleSummary(javax.accessibility.Accessible) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.AccessibleJTable.AccessibleTableHeader void setAccessibleSummary(javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.BooleanRenderer java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.BooleanRenderer java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.BooleanRenderer java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.CellEditorRemover void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.DateRenderer void setValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.DoubleRenderer void setValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.DropLocation DropLocation(java.awt.Point, int, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.DropLocation DropLocation(java.awt.Point, int, int, boolean, boolean, javax.swing.JTable.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.DropLocation DropLocation(java.awt.Point, int, int, boolean, boolean, javax.swing.JTable.1) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.DropLocation boolean isInsertColumn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.DropLocation boolean isInsertRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.DropLocation int getColumn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.DropLocation int getRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.DropLocation java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.GenericEditor java.awt.Component getTableCellEditorComponent(javax.swing.JTable, java.lang.Object, boolean, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.GenericEditor java.lang.Object getCellEditorValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.IconRenderer void setValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.ModelChange ModelChange(javax.swing.JTable, javax.swing.event.TableModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.ModelChange ModelChange(javax.swing.JTable, javax.swing.event.TableModelEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.SortManager SortManager(javax.swing.RowSorter&lt;? extends javax.swing.table.TableModel&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.SortManager javax.swing.SizeSequence access$002(javax.swing.JTable.SortManager, javax.swing.SizeSequence) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.SortManager javax.swing.SizeSequence access$002(javax.swing.JTable.SortManager, javax.swing.SizeSequence)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.SortManager void cacheModelSelection(javax.swing.event.RowSorterEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.SortManager void cacheSelection(javax.swing.event.RowSorterEvent, javax.swing.JTable.ModelChange) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.SortManager void prepareForChange(javax.swing.event.RowSorterEvent, javax.swing.JTable.ModelChange) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.SortManager void processChange(javax.swing.event.RowSorterEvent, javax.swing.JTable.ModelChange, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.SortManager void processChange(javax.swing.event.RowSorterEvent, javax.swing.JTable.ModelChange, boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.SortManager void restoreSelection(javax.swing.JTable.ModelChange) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.SortManager void viewSelectionChanged(javax.swing.event.ListSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTable.ThreadSafePrintable int access$702(javax.swing.JTable.ThreadSafePrintable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.ThreadSafePrintable java.awt.print.Printable access$800(javax.swing.JTable.ThreadSafePrintable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.ThreadSafePrintable java.awt.print.Printable access$800(javax.swing.JTable.ThreadSafePrintable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTable.ThreadSafePrintable java.lang.Throwable access$902(javax.swing.JTable.ThreadSafePrintable, java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTable.ThreadSafePrintable java.lang.Throwable access$902(javax.swing.JTable.ThreadSafePrintable, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextArea boolean getLineWrap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextArea boolean getWrapStyleWord()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextArea int getColumns()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextArea int getRows()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextArea int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextArea java.awt.Dimension getPreferredScrollableViewportSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextArea java.awt.Dimension getPreferredSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextArea java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextArea java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextArea javax.swing.text.Document createDefaultModel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextArea void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextArea.AccessibleJTextArea AccessibleJTextArea(javax.swing.JTextArea) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextArea.AccessibleJTextArea javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField JTextField(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField JTextField(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField JTextField(javax.swing.text.Document, java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField JTextField(javax.swing.text.Document, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField boolean isListener(java.lang.Class, java.awt.event.ActionListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField boolean isListener(java.lang.Class, java.awt.event.ActionListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField int getColumns()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextField int getHorizontalAlignment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextField java.beans.PropertyChangeListener createActionPropertyChangeListener(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField javax.swing.Action getAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextField javax.swing.Action[] getActions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField javax.swing.BoundedRangeModel getHorizontalVisibility()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTextField javax.swing.text.Document createDefaultModel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField void actionPropertyChanged(javax.swing.Action, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField void actionPropertyChanged(javax.swing.Action, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField void configurePropertiesFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField void scrollRectToVisible(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField void setActionCommandFromAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField void setDocument(javax.swing.text.Document) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField.AccessibleJTextField AccessibleJTextField(javax.swing.JTextField) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField.AccessibleJTextField javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField.NotifyAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField.ScrollRepainter void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextField.TextFieldActionPropertyChangeListener void actionPropertyChanged(javax.swing.JTextField, javax.swing.Action, java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextField.TextFieldActionPropertyChangeListener void actionPropertyChanged(javax.swing.JTextField, javax.swing.Action, java.beans.PropertyChangeEvent) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextPane java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextPane java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextPane javax.swing.text.AttributeSet getCharacterAttributes()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextPane javax.swing.text.AttributeSet getParagraphAttributes()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTextPane javax.swing.text.EditorKit createDefaultEditorKit()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextPane void setDocument(javax.swing.text.Document) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextPane void setEditorKit(javax.swing.text.EditorKit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTextPane void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToggleButton boolean shouldUpdateSelectedStateFromAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToggleButton java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToggleButton java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToggleButton void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToggleButton.AccessibleJToggleButton AccessibleJToggleButton(javax.swing.JToggleButton) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToggleButton.AccessibleJToggleButton javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToggleButton.AccessibleJToggleButton void itemStateChanged(java.awt.event.ItemEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToggleButton.ToggleButtonModel boolean isSelected()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolBar boolean isBorderPainted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolBar boolean isFloatable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolBar int getComponentIndex(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JToolBar int getOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolBar java.awt.Component getComponentAtIndex(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JToolBar java.beans.PropertyChangeListener createActionChangeListener(javax.swing.JButton) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JToolBar java.beans.PropertyChangeListener createActionChangeListener(javax.swing.JButton)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JToolBar java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolBar java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolBar javax.swing.JButton add(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolBar javax.swing.JButton createActionComponent(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JToolBar javax.swing.JButton createActionComponent(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolBar javax.swing.plaf.ToolBarUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolBar void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolBar.AccessibleJToolBar javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolBar.DefaultToolBarLayout void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolBar.Separator java.awt.Dimension getSeparatorSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolBar.Separator java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolBar.Separator void setSeparatorSize(java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JToolTip boolean alwaysOnTop()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolTip java.lang.String getTipText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolTip java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolTip java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolTip javax.swing.JComponent getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolTip javax.swing.plaf.ToolTipUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JToolTip void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JToolTip.AccessibleJToolTip javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean getDragEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean getExpandsSelectedPaths()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean getInvokesStopCellEditing()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean getScrollsOnExpand()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean getShowsRootHandles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean hasBeenExpanded(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree boolean hasBeenExpanded(javax.swing.tree.TreePath)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean isEditable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean isExpanded(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree boolean isExpanded(javax.swing.tree.TreePath)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean isFixedRowHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean isLargeModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean isPathEditable(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree boolean isRootVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree boolean isVisible(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree boolean isVisible(javax.swing.tree.TreePath)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree int access$000(javax.swing.JTree) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree int access$000(javax.swing.JTree)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree int getRowHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree int getScrollableBlockIncrement(java.awt.Rectangle, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree int getToggleClickCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree int getVisibleRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree int[] getModelIndexsForPath(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree int[] getModelIndexsForPath(javax.swing.tree.TreePath)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.awt.Dimension getPreferredScrollableViewportSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree java.awt.Rectangle getPathBounds(javax.swing.tree.TreePath)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.awt.Rectangle getRowBounds(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.lang.Object getArchivableExpandedState()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.lang.Object getLastSelectedPathComponent()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.lang.Object setDropLocation(javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.lang.String convertValueToText(java.lang.Object, boolean, boolean, boolean, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.lang.String convertValueToText(java.lang.Object, boolean, boolean, boolean, int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree java.util.Enumeration&lt;javax.swing.tree.TreePath&gt; getDescendantToggledPaths(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.util.Enumeration&lt;javax.swing.tree.TreePath&gt; getDescendantToggledPaths(javax.swing.tree.TreePath)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.util.Enumeration&lt;javax.swing.tree.TreePath&gt; getExpandedDescendants(javax.swing.tree.TreePath)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree java.util.Hashtable access$200(javax.swing.JTree) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree java.util.Hashtable access$200(javax.swing.JTree)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.DropMode getDropMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.JTree.DropLocation dropLocationForPoint(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree javax.swing.JTree.DropLocation dropLocationForPoint(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.JTree.DropLocation getDropLocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.TransferHandler.DropLocation dropLocationForPoint(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.event.TreeModelListener createTreeModelListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree javax.swing.plaf.TreeUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreeCellEditor getCellEditor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreeCellRenderer getCellRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreeModel createTreeModel(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreeModel getDefaultTreeModel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreeModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getAnchorSelectionPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getClosestPathForLocation(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getEditingPath()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getLeadSelectionPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getNextMatch(java.lang.String, int, javax.swing.text.Position.Bias) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getNextMatch(java.lang.String, int, javax.swing.text.Position.Bias) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getNextMatch(java.lang.String, int, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getPathForIndexs(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getPathForIndexs(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getPathForLocation(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath getPathForRow(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath[] getDescendantSelectedPaths(javax.swing.tree.TreePath, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreePath[] getSelectionPaths()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree javax.swing.tree.TreeSelectionModel getSelectionModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree void addSelectionRows(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void expandPath(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void makeVisible(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree void removeDescendantSelectedPaths(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree void removeDescendantToggledPaths(java.util.Enumeration&lt;javax.swing.tree.TreePath&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void removeSelectionRows(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void scrollPathToVisible(javax.swing.tree.TreePath) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void setDropMode(javax.swing.DropMode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree void setExpandedState(javax.swing.tree.TreePath, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void setSelectionModel(javax.swing.tree.TreeSelectionModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void setSelectionRows(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void setUIProperty(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void unarchiveExpandedState(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree AccessibleJTree(javax.swing.JTree) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree java.awt.Component getCurrentComponent()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.Accessible getAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.AccessibleContext getCurrentAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.AccessibleSelection getAccessibleSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree void treeCollapsed(javax.swing.event.TreeExpansionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree void treeExpanded(javax.swing.event.TreeExpansionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree void treeNodesChanged(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree void treeNodesInserted(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree void treeNodesRemoved(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree void treeStructureChanged(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree void valueChanged(javax.swing.event.TreeSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode AccessibleJTreeNode(javax.swing.JTree.AccessibleJTree, javax.swing.JTree, javax.swing.tree.TreePath, javax.accessibility.Accessible) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode AccessibleJTreeNode(javax.swing.JTree.AccessibleJTree, javax.swing.JTree, javax.swing.tree.TreePath, javax.accessibility.Accessible) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Color getBackground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Color getForeground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Component getCurrentComponent()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Cursor getCursor()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.FontMetrics getFontMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Point getLocation()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Point getLocationInJTree()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Point getLocationOnScreen()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.lang.String getAccessibleActionDescription(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.lang.String getAccessibleName()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.Accessible getAccessibleAt(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.Accessible getAccessibleSelection(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleAction getAccessibleAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleComponent getAccessibleComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleContext getCurrentAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.swing.tree.TreePath getChildTreePath(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode void setLocation(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode void setLocation(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode void setVisible(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.DropLocation DropLocation(java.awt.Point, javax.swing.tree.TreePath, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.DropLocation DropLocation(java.awt.Point, javax.swing.tree.TreePath, int, javax.swing.JTree.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.DropLocation DropLocation(java.awt.Point, javax.swing.tree.TreePath, int, javax.swing.JTree.1) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.DropLocation int getChildIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.DropLocation java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.DropLocation javax.swing.tree.TreePath getPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.DynamicUtilTreeNode void createChildren(javax.swing.tree.DefaultMutableTreeNode, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel javax.swing.JTree.EmptySelectionModel sharedInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void addPropertyChangeListener(java.beans.PropertyChangeListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void addPropertyChangeListener(java.beans.PropertyChangeListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void addSelectionPaths(javax.swing.tree.TreePath[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void addSelectionPaths(javax.swing.tree.TreePath[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void addTreeSelectionListener(javax.swing.event.TreeSelectionListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void addTreeSelectionListener(javax.swing.event.TreeSelectionListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void removePropertyChangeListener(java.beans.PropertyChangeListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void removePropertyChangeListener(java.beans.PropertyChangeListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void removeSelectionPaths(javax.swing.tree.TreePath[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void removeSelectionPaths(javax.swing.tree.TreePath[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void removeTreeSelectionListener(javax.swing.event.TreeSelectionListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void setRowMapper(javax.swing.tree.RowMapper) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void setRowMapper(javax.swing.tree.RowMapper)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void setSelectionMode(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void setSelectionPaths(javax.swing.tree.TreePath[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.EmptySelectionModel void setSelectionPaths(javax.swing.tree.TreePath[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.TreeModelHandler void treeNodesChanged(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.TreeModelHandler void treeNodesChanged(javax.swing.event.TreeModelEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.TreeModelHandler void treeNodesInserted(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.TreeModelHandler void treeNodesInserted(javax.swing.event.TreeModelEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JTree.TreeModelHandler void treeNodesRemoved(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.TreeModelHandler void treeStructureChanged(javax.swing.event.TreeModelEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JTree.TreeSelectionRedirector void valueChanged(javax.swing.event.TreeSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JTree.TreeTimer void fireActionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JViewport boolean access$000(javax.swing.JViewport) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport boolean access$000(javax.swing.JViewport)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport boolean computeBlit(int, int, java.awt.Point, java.awt.Point, java.awt.Dimension, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,_,_,null-&gt;false;_,_,_,_,null,_-&gt;false;_,_,_,null,_,_-&gt;false;_,_,null,_,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport boolean isBackingStoreEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport boolean isOptimizedDrawingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport boolean isPaintingOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport int getScrollMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport int positionAdjustment(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport java.awt.Component getView()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Dimension toViewCoordinates(java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Dimension toViewCoordinates(java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Graphics getBackingStoreGraphics(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Graphics getBackingStoreGraphics(java.awt.Graphics)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Insets getInsets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Insets getInsets(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Insets getInsets(java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport java.awt.LayoutManager createLayoutManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport java.awt.Point getViewPosition()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Point toViewCoordinates(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Point toViewCoordinates(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.awt.Rectangle getViewRect()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.lang.String getUIClassID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport javax.swing.JViewport.ViewListener createViewListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport javax.swing.Timer createRepaintTimer()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport javax.swing.plaf.ViewportUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport void addImpl(java.awt.Component, java.lang.Object, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JViewport void blitDoubleBuffered(javax.swing.JComponent, java.awt.Graphics, int, int, int, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport void blitDoubleBuffered(javax.swing.JComponent, java.awt.Graphics, int, int, int, int, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport void flushViewDirtyRegion(java.awt.Graphics, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JViewport void paintViaBackingStore(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport void paintViaBackingStore(java.awt.Graphics, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport void paintView(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport void remove(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport void setBorder(javax.swing.border.Border) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JViewport void setExtentSize(java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JViewport void setView(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JViewport.1 void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JViewport.AccessibleJViewport javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JViewport.ViewListener void componentResized(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JWindow JWindow(java.awt.Frame) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JWindow JWindow(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JWindow JWindow(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JWindow JWindow(java.awt.Window, java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JWindow JWindow(java.awt.Window, java.awt.GraphicsConfiguration) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.JWindow boolean isRootPaneCheckingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JWindow java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JWindow javax.swing.JRootPane createRootPane()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.JWindow javax.swing.JRootPane getRootPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.JWindow javax.swing.TransferHandler getTransferHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.KeyStroke javax.swing.KeyStroke getKeyStroke(char, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.KeyStroke javax.swing.KeyStroke getKeyStroke(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.KeyStroke javax.swing.KeyStroke getKeyStroke(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.KeyboardManager boolean fireKeyboardAction(java.awt.event.KeyEvent, boolean, java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.KeyboardManager java.awt.Container getTopAncestor(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.KeyboardManager java.awt.Container getTopAncestor(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.KeyboardManager java.util.Hashtable registerNewTopContainer(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.KeyboardManager javax.swing.KeyboardManager getCurrentManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.KeyboardManager void fireBinding(javax.swing.JComponent, javax.swing.KeyStroke, java.awt.event.KeyEvent, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.KeyboardManager void registerKeyStroke(javax.swing.KeyStroke, javax.swing.JComponent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.KeyboardManager void registerMenuBar(javax.swing.JMenuBar) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.KeyboardManager void setCurrentManager(javax.swing.KeyboardManager) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.KeyboardManager void unregisterMenuBar(javax.swing.JMenuBar) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.KeyboardManager.ComponentKeyStrokePair boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.KeyboardManager.ComponentKeyStrokePair boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.LayoutComparator void setComponentOrientation(java.awt.ComponentOrientation) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutFocusTraversalPolicy void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LayoutStyle LayoutStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.LegacyGlueFocusTraversalPolicy boolean accept(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LegacyGlueFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LegacyGlueFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LegacyGlueFocusTraversalPolicy java.awt.Component getDefaultComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LegacyGlueFocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LegacyGlueFocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LegacyGlueFocusTraversalPolicy void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LegacyGlueFocusTraversalPolicy void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel LookAndFeel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.LookAndFeel boolean getSupportsWindowDecorations()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.LookAndFeel java.lang.Object getDesktopPropertyValue(java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.LookAndFeel java.lang.Object makeIcon(java.lang.Class&lt;?&gt;, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.ComponentInputMap makeComponentInputMap(javax.swing.JComponent, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.ComponentInputMap makeComponentInputMap(javax.swing.JComponent, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.ComponentInputMap makeComponentInputMap(javax.swing.JComponent, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.Icon getDisabledIcon(javax.swing.JComponent, javax.swing.Icon) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.Icon getDisabledIcon(javax.swing.JComponent, javax.swing.Icon) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.Icon getDisabledIcon(javax.swing.JComponent, javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.Icon getDisabledSelectedIcon(javax.swing.JComponent, javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.InputMap makeInputMap(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.InputMap makeInputMap(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.LayoutStyle getLayoutStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.UIDefaults getDefaults()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.text.JTextComponent.KeyBinding[] makeKeyBindings(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel javax.swing.text.JTextComponent.KeyBinding[] makeKeyBindings(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel void initialize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.LookAndFeel void installBorder(javax.swing.JComponent, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel void installColors(javax.swing.JComponent, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel void installColorsAndFont(javax.swing.JComponent, java.lang.String, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel void installProperty(javax.swing.JComponent, java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.LookAndFeel void loadKeyBindings(javax.swing.InputMap, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel void provideErrorFeedback(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.LookAndFeel void uninitialize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.LookAndFeel void uninstallBorder(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MenuSelectionManager boolean isComponentPartOfCurrentMenu(javax.swing.MenuElement, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.MenuSelectionManager boolean isComponentPartOfCurrentMenu(javax.swing.MenuElement, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.MenuSelectionManager java.awt.Component componentForPoint(java.awt.Component, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MenuSelectionManager java.awt.Component componentForPoint(java.awt.Component, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MenuSelectionManager java.awt.Component componentForPoint(java.awt.Component, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.MenuSelectionManager javax.swing.MenuElement[] getSelectedPath()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MenuSelectionManager void printMenuElementArray(javax.swing.MenuElement[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MenuSelectionManager void printMenuElementArray(javax.swing.MenuElement[], boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MenuSelectionManager void processMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MenuSelectionManager void setSelectedPath(javax.swing.MenuElement[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.lang.Object get(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.lang.Object get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.lang.Object get(java.lang.Object, java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.lang.Object get(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.lang.Object remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.util.Enumeration&lt;java.lang.Object&gt; elements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.util.Enumeration&lt;java.lang.Object&gt; keys()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MultiUIDefaults java.util.Set&lt;java.util.Map.Entry&lt;java.lang.Object,java.lang.Object&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MultiUIDefaults.MultiUIDefaultsEnumerator MultiUIDefaultsEnumerator(javax.swing.MultiUIDefaults.MultiUIDefaultsEnumerator.Type, java.util.Set&lt;java.util.Map.Entry&lt;java.lang.Object,java.lang.Object&gt;&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.MultiUIDefaults.MultiUIDefaultsEnumerator java.lang.Object nextElement()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.OverlayLayout java.awt.Container getTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.OverlayLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.OverlayLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.OverlayLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout void checkContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.OverlayLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.OverlayLayout void removeLayoutComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Popup Popup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Popup Popup(java.awt.Component, java.awt.Component, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Popup java.awt.Component createComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Popup java.awt.Component createComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Popup java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Popup java.awt.Window getParentWindow(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Popup java.awt.Window getParentWindow(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.Popup.HeavyWeightWindow HeavyWeightWindow(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory boolean invokerInHeavyWeightPopup(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory boolean invokerInHeavyWeightPopup(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory int getPopupType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory int getPopupType(java.awt.Component, java.awt.Component, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory int getPopupType(java.awt.Component, java.awt.Component, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory javax.swing.Popup getHeadlessPopup(java.awt.Component, java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory javax.swing.Popup getHeavyWeightPopup(java.awt.Component, java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory javax.swing.Popup getLightWeightPopup(java.awt.Component, java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory javax.swing.Popup getMediumWeightPopup(java.awt.Component, java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory javax.swing.Popup getPopup(java.awt.Component, java.awt.Component, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory javax.swing.Popup getPopup(java.awt.Component, java.awt.Component, int, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory void setSharedInstance(javax.swing.PopupFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory.ContainerPopup ContainerPopup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.ContainerPopup ContainerPopup(javax.swing.PopupFactory.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.ContainerPopup ContainerPopup(javax.swing.PopupFactory.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.ContainerPopup java.awt.Rectangle getContainerPopupArea(java.awt.GraphicsConfiguration) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.ContainerPopup java.awt.Rectangle getContainerPopupArea(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory.HeadlessPopup HeadlessPopup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.HeadlessPopup java.awt.Component createComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.HeadlessPopup java.awt.Component createComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory.HeadlessPopup javax.swing.Popup getHeadlessPopup(java.awt.Component, java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory.HeadlessPopup void hide()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.HeadlessPopup void show()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.HeavyWeightPopup HeavyWeightPopup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.HeavyWeightPopup javax.swing.PopupFactory.HeavyWeightPopup getRecycledHeavyWeightPopup(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.HeavyWeightPopup void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.HeavyWeightPopup void recycleHeavyWeightPopup(javax.swing.PopupFactory.HeavyWeightPopup) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory.HeavyWeightPopup.1 void windowClosed(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.LightWeightPopup LightWeightPopup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.LightWeightPopup java.awt.Component createComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.LightWeightPopup java.awt.Component createComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory.LightWeightPopup javax.swing.Popup getLightWeightPopup(java.awt.Component, java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.LightWeightPopup javax.swing.PopupFactory.LightWeightPopup getRecycledLightWeightPopup()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.LightWeightPopup void reset(java.awt.Component, java.awt.Component, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory.MediumWeightPopup MediumWeightPopup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.PopupFactory.MediumWeightPopup java.awt.Component createComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.MediumWeightPopup java.awt.Component createComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.PopupFactory.MediumWeightPopup javax.swing.Popup getMediumWeightPopup(java.awt.Component, java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.MediumWeightPopup javax.swing.PopupFactory.MediumWeightPopup getRecycledMediumWeightPopup()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.PopupFactory.MediumWeightPopup void reset(java.awt.Component, java.awt.Component, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor ProgressMonitor(java.awt.Component, java.lang.Object, java.lang.String, int, int, javax.swing.ProgressMonitor) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor int getMaximum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor int getMillisToDecideToPopup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor int getMillisToPopup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor int getMinimum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor java.lang.Object[] access$000(javax.swing.ProgressMonitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor java.lang.Object[] access$000(javax.swing.ProgressMonitor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor java.lang.String getNote()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor javax.accessibility.AccessibleContext access$200(javax.swing.ProgressMonitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor javax.accessibility.AccessibleContext access$200(javax.swing.ProgressMonitor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor javax.accessibility.AccessibleContext access$202(javax.swing.ProgressMonitor, javax.accessibility.AccessibleContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor javax.accessibility.AccessibleContext access$202(javax.swing.ProgressMonitor, javax.accessibility.AccessibleContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor javax.swing.JDialog access$700(javax.swing.ProgressMonitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor javax.swing.JDialog access$700(javax.swing.ProgressMonitor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor javax.swing.JLabel access$600(javax.swing.ProgressMonitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor javax.swing.JLabel access$600(javax.swing.ProgressMonitor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor javax.swing.JOptionPane access$300(javax.swing.ProgressMonitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor javax.swing.JOptionPane access$300(javax.swing.ProgressMonitor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor javax.swing.JProgressBar access$500(javax.swing.ProgressMonitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor javax.swing.JProgressBar access$500(javax.swing.ProgressMonitor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor boolean sameWindowAncestor(java.awt.Component, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor boolean sameWindowAncestor(java.awt.Component, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor boolean sameWindowAncestor(java.awt.Component, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor java.awt.Rectangle getCharacterBounds(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor java.lang.String getAccessibleDescription()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor java.lang.String getAccessibleName()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor java.lang.String getAfterIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor java.lang.String getAtIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor java.lang.String getBeforeIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor java.lang.String getSelectedText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.Accessible getAccessibleChild(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.Accessible getAccessibleParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleComponent getAccessibleComponent()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleContext getPanelAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleContext getParentAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleText getNoteLabelAccessibleText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleValue getAccessibleValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.swing.text.AttributeSet getCharacterAttribute(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor void access$100(javax.swing.ProgressMonitor.AccessibleProgressMonitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.ProgressOptionPane ProgressOptionPane(javax.swing.ProgressMonitor, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor.ProgressOptionPane int getMaxCharactersPerLineCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ProgressMonitor.ProgressOptionPane javax.accessibility.AccessibleContext access$400(javax.swing.ProgressMonitor.ProgressOptionPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor.ProgressOptionPane javax.swing.JDialog createDialog(java.awt.Component, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ProgressMonitor.ProgressOptionPane.1 void windowActivated(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitor.ProgressOptionPane.1 void windowClosing(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ProgressMonitorInputStream javax.swing.ProgressMonitor getProgressMonitor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager boolean access$800(javax.swing.RepaintManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager boolean access$800(javax.swing.RepaintManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager boolean isDoubleBufferingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager boolean isPainting()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager boolean useVolatileDoubleBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager int access$700()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager java.awt.Image _getOffscreenBuffer(java.awt.Component, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager java.awt.Image _getOffscreenBuffer(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager java.awt.Image getOffscreenBuffer(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager java.awt.Image getVolatileOffscreenBuffer(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.JComponent access$300(javax.swing.RepaintManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.JComponent access$300(javax.swing.RepaintManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.JComponent access$302(javax.swing.RepaintManager, javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.JComponent access$302(javax.swing.RepaintManager, javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.RepaintManager currentManager(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.RepaintManager currentManager(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.RepaintManager currentManager(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.RepaintManager getDelegate(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.RepaintManager getDelegate(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.RepaintManager.PaintManager access$500(javax.swing.RepaintManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager javax.swing.RepaintManager.PaintManager access$500(javax.swing.RepaintManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager sun.misc.JavaSecurityAccess access$200()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager void access$1000(javax.swing.RepaintManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager void access$1100(javax.swing.RepaintManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager void access$400(javax.swing.RepaintManager, javax.swing.JComponent, java.util.List, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager void access$400(javax.swing.RepaintManager, javax.swing.JComponent, java.util.List, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager void access$400(javax.swing.RepaintManager, javax.swing.JComponent, java.util.List, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager void addDirtyRegion(java.applet.Applet, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager void addDirtyRegion(java.awt.Window, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager void addDirtyRegion0(java.awt.Container, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager void adjustRoots(javax.swing.JComponent, java.util.List&lt;java.awt.Component&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager void adjustRoots(javax.swing.JComponent, java.util.List&lt;java.awt.Component&gt;, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager void collectDirtyComponents(java.util.Map&lt;java.awt.Component,java.awt.Rectangle&gt;, java.awt.Component, java.util.List&lt;java.awt.Component&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager void collectDirtyComponents(java.util.Map&lt;java.awt.Component,java.awt.Rectangle&gt;, java.awt.Component, java.util.List&lt;java.awt.Component&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager void paintDirtyRegions(java.util.Map&lt;java.awt.Component,java.awt.Rectangle&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager void setCurrentManager(javax.swing.RepaintManager) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.1.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.1.1 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.2 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.3 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.3 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.DisplayChangedHandler DisplayChangedHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.DisplayChangedHandler DisplayChangedHandler(javax.swing.RepaintManager.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.DisplayChangedHandler DisplayChangedHandler(javax.swing.RepaintManager.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.DisplayChangedHandler void paletteChanged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.DisplayChangedRunnable DisplayChangedRunnable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.DisplayChangedRunnable DisplayChangedRunnable(javax.swing.RepaintManager.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.DisplayChangedRunnable DisplayChangedRunnable(javax.swing.RepaintManager.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.DoubleBufferInfo DoubleBufferInfo(javax.swing.RepaintManager, javax.swing.RepaintManager.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager PaintManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager boolean isRepaintingRoot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager boolean show(java.awt.Container, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager boolean show(java.awt.Container, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_,_,_-&gt;false;null,_,_,_,_-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager java.awt.Image getValidImage(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager java.awt.Image getValidImage(java.awt.Image)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager void beginPaint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager void copyArea(javax.swing.JComponent, java.awt.Graphics, int, int, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager void copyArea(javax.swing.JComponent, java.awt.Graphics, int, int, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager void doubleBufferingChanged(javax.swing.JRootPane) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager void doubleBufferingChanged(javax.swing.JRootPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager void endPaint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RepaintManager.PaintManager void paintDoubleBuffered(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RepaintManager.ProcessingRunnable ProcessingRunnable(javax.swing.RepaintManager, javax.swing.RepaintManager.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RowFilter RowFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; andFilter(java.lang.Iterable&lt;? extends javax.swing.RowFilter&lt;? super M,? super I&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; andFilter(java.lang.Iterable&lt;? extends javax.swing.RowFilter&lt;? super M,? super I&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; dateFilter(javax.swing.RowFilter.ComparisonType, java.util.Date, int...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; dateFilter(javax.swing.RowFilter.ComparisonType, java.util.Date, int...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; dateFilter(javax.swing.RowFilter.ComparisonType, java.util.Date, int...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; dateFilter(javax.swing.RowFilter.ComparisonType, java.util.Date, int...)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; notFilter(javax.swing.RowFilter&lt;M,I&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; notFilter(javax.swing.RowFilter&lt;M,I&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; numberFilter(javax.swing.RowFilter.ComparisonType, java.lang.Number, int...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; numberFilter(javax.swing.RowFilter.ComparisonType, java.lang.Number, int...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; numberFilter(javax.swing.RowFilter.ComparisonType, java.lang.Number, int...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; numberFilter(javax.swing.RowFilter.ComparisonType, java.lang.Number, int...)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; orFilter(java.lang.Iterable&lt;? extends javax.swing.RowFilter&lt;? super M,? super I&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; orFilter(java.lang.Iterable&lt;? extends javax.swing.RowFilter&lt;? super M,? super I&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; regexFilter(java.lang.String, int...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; regexFilter(java.lang.String, int...)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter void access$000(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter void checkIndices(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.AndFilter AndFilter(java.lang.Iterable&lt;? extends javax.swing.RowFilter&lt;? super M,? super I&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.DateFilter DateFilter(javax.swing.RowFilter.ComparisonType, long, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.DateFilter DateFilter(javax.swing.RowFilter.ComparisonType, long, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.DateFilter boolean include(javax.swing.RowFilter.Entry&lt;? extends java.lang.Object,? extends java.lang.Object&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.Entry Entry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RowFilter.GeneralFilter GeneralFilter(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.GeneralFilter boolean include(javax.swing.RowFilter.Entry&lt;? extends java.lang.Object,? extends java.lang.Object&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.NotFilter NotFilter(javax.swing.RowFilter&lt;M,I&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.NumberFilter NumberFilter(javax.swing.RowFilter.ComparisonType, java.lang.Number, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.NumberFilter NumberFilter(javax.swing.RowFilter.ComparisonType, java.lang.Number, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.NumberFilter NumberFilter(javax.swing.RowFilter.ComparisonType, java.lang.Number, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.NumberFilter boolean include(javax.swing.RowFilter.Entry&lt;? extends java.lang.Object,? extends java.lang.Object&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.NumberFilter int longCompare(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.OrFilter OrFilter(java.lang.Iterable&lt;? extends javax.swing.RowFilter&lt;? super M,? super I&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.RegexFilter RegexFilter(java.util.regex.Pattern, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.RegexFilter RegexFilter(java.util.regex.Pattern, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowFilter.RegexFilter boolean include(javax.swing.RowFilter.Entry&lt;? extends java.lang.Object,? extends java.lang.Object&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowSorter.SortKey SortKey(int, javax.swing.SortOrder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.RowSorter.SortKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.RowSorter.SortKey boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RowSorter.SortKey int getColumn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.RowSorter.SortKey javax.swing.SortOrder getSortOrder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout int getHorizontalScrollBarPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout int getVerticalScrollBarPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Component addSingletonComponent(java.awt.Component, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Component addSingletonComponent(java.awt.Component, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Component getCorner(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Component getCorner(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout java.awt.Rectangle getViewportBorderBounds(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout javax.swing.JScrollBar getHorizontalScrollBar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout javax.swing.JScrollBar getVerticalScrollBar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout javax.swing.JViewport getColumnHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout javax.swing.JViewport getRowHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout javax.swing.JViewport getViewport()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ScrollPaneLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout void adjustForHSB(boolean, java.awt.Rectangle, java.awt.Rectangle, java.awt.Insets) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout void adjustForHSB(boolean, java.awt.Rectangle, java.awt.Rectangle, java.awt.Insets) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout void adjustForVSB(boolean, java.awt.Rectangle, java.awt.Rectangle, java.awt.Insets, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout void adjustForVSB(boolean, java.awt.Rectangle, java.awt.Rectangle, java.awt.Insets, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout void removeLayoutComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ScrollPaneLayout void syncWithScrollPane(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements int[] adjustSizes(int, javax.swing.SizeRequirements[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SizeRequirements int[] adjustSizes(int, javax.swing.SizeRequirements[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements javax.swing.SizeRequirements getAlignedSizeRequirements(javax.swing.SizeRequirements[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements javax.swing.SizeRequirements getAlignedSizeRequirements(javax.swing.SizeRequirements[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements javax.swing.SizeRequirements getTiledSizeRequirements(javax.swing.SizeRequirements[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements javax.swing.SizeRequirements getTiledSizeRequirements(javax.swing.SizeRequirements[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateAlignedPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateAlignedPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateAlignedPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateAlignedPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void compressedTile(int, long, long, long, javax.swing.SizeRequirements[], int[], int[], boolean) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeRequirements void expandedTile(int, long, long, long, javax.swing.SizeRequirements[], int[], int[], boolean) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeSequence int[] getSizes()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SizeSequence void setSizes(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy boolean getImplicitDownCycleTraversal()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentDownCycle(java.awt.Component, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentDownCycle(java.awt.Component, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getDefaultComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Container getTopmostProvider(java.awt.Container, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Container getTopmostProvider(java.awt.Container, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Container getTopmostProvider(java.awt.Container, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.util.Comparator&lt;? super java.awt.Component&gt; getComparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.util.List&lt;java.awt.Component&gt; getFocusTraversalCycle(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy java.util.List&lt;java.awt.Component&gt; getFocusTraversalCycle(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy void enumerateAndSortCycle(java.awt.Container, java.util.List&lt;java.awt.Component&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SortingFocusTraversalPolicy void enumerateCycle(java.awt.Container, java.util.List&lt;java.awt.Component&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerDateModel SpinnerDateModel(java.util.Date, java.lang.Comparable, java.lang.Comparable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerDateModel boolean calendarFieldOK(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerDateModel int getCalendarField()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerDateModel java.lang.Comparable getEnd()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerDateModel java.lang.Comparable getStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerDateModel java.lang.Object getNextValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpinnerDateModel java.lang.Object getPreviousValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpinnerDateModel java.lang.Object getValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerDateModel java.util.Date getDate()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerDateModel void setValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerListModel SpinnerListModel(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerListModel SpinnerListModel(java.util.List&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerListModel java.lang.Object findNextMatch(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpinnerListModel java.lang.Object getNextValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpinnerListModel java.lang.Object getPreviousValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpinnerListModel java.util.List&lt;?&gt; getList()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerListModel void setList(java.util.List&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerNumberModel SpinnerNumberModel(java.lang.Number, java.lang.Comparable, java.lang.Comparable, java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerNumberModel SpinnerNumberModel(java.lang.Number, java.lang.Comparable, java.lang.Comparable, java.lang.Number) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerNumberModel java.lang.Comparable getMaximum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerNumberModel java.lang.Comparable getMinimum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerNumberModel java.lang.Number getNumber()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerNumberModel java.lang.Number getStepSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerNumberModel java.lang.Number incrValue(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpinnerNumberModel java.lang.Object getNextValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpinnerNumberModel java.lang.Object getPreviousValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpinnerNumberModel java.lang.Object getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpinnerNumberModel void setStepSize(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpinnerNumberModel void setValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring Spring()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Spring boolean isCyclic(javax.swing.SpringLayout) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Spring boolean isCyclic(javax.swing.SpringLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring constant(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring constant(int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring difference(javax.swing.Spring, javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring height(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring height(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring max(javax.swing.Spring, javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring minus(javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring scale(javax.swing.Spring, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring scale(javax.swing.Spring, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring sum(javax.swing.Spring, javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring width(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring javax.swing.Spring width(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring void checkArg(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring.CompoundSpring boolean isCyclic(javax.swing.SpringLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring.CompoundSpring java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring.MaxSpring int op(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Spring.ScaleSpring ScaleSpring(javax.swing.Spring, float, javax.swing.Spring.1) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Spring.StaticSpring int getMaximumValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Spring.StaticSpring int getMinimumValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Spring.StaticSpring int getPreferredValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Spring.StaticSpring java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Spring.SumSpring int op(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout boolean isCyclic(javax.swing.Spring) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout boolean isCyclic(javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout float getLayoutAlignmentX(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout float getLayoutAlignmentX(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout float getLayoutAlignmentY(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout float getLayoutAlignmentY(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout java.awt.Dimension addInsets(int, int, java.awt.Container) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout java.awt.Dimension addInsets(int, int, java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout java.lang.String[] access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout java.lang.String[] access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout javax.swing.Spring getConstraint(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout javax.swing.Spring getConstraint(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout javax.swing.SpringLayout.Constraints applyDefaults(java.awt.Component, javax.swing.SpringLayout.Constraints) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout javax.swing.SpringLayout.Constraints applyDefaults(java.awt.Component, javax.swing.SpringLayout.Constraints)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout void applyDefaults(javax.swing.SpringLayout.Constraints, java.lang.String, javax.swing.Spring, java.lang.String, javax.swing.Spring, java.util.List&lt;java.lang.String&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout void applyDefaults(javax.swing.SpringLayout.Constraints, java.lang.String, javax.swing.Spring, java.lang.String, javax.swing.Spring, java.util.List&lt;java.lang.String&gt;) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout void invalidateLayout(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout void invalidateLayout(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout void putConstraint(java.lang.String, java.awt.Component, javax.swing.Spring) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout void putConstraints(java.awt.Component, javax.swing.SpringLayout.Constraints) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints Constraints(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints boolean defined(java.util.List, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints int access$200(javax.swing.SpringLayout.Constraints, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints int access$300(javax.swing.SpringLayout.Constraints, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints java.awt.Component access$400(javax.swing.SpringLayout.Constraints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints java.awt.Component access$400(javax.swing.SpringLayout.Constraints)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout.Constraints java.awt.Component access$402(javax.swing.SpringLayout.Constraints, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints java.awt.Component access$402(javax.swing.SpringLayout.Constraints, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout.Constraints java.util.List access$500(javax.swing.SpringLayout.Constraints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints java.util.List access$500(javax.swing.SpringLayout.Constraints)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout.Constraints java.util.List access$600(javax.swing.SpringLayout.Constraints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints java.util.List access$600(javax.swing.SpringLayout.Constraints)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring difference(javax.swing.Spring, javax.swing.Spring) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring difference(javax.swing.Spring, javax.swing.Spring) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring difference(javax.swing.Spring, javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring getConstraint(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring getConstraint(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring heightToRelativeBaseline(javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring relativeBaselineToHeight(javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring scale(javax.swing.Spring, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring scale(javax.swing.Spring, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring sum(javax.swing.Spring, javax.swing.Spring) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring sum(javax.swing.Spring, javax.swing.Spring) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring sum(javax.swing.Spring, javax.swing.Spring)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints void pushConstraint(java.lang.String, javax.swing.Spring, boolean) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SpringLayout.Constraints void setConstraint(java.lang.String, javax.swing.Spring) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.SpringProxy boolean isCyclic(javax.swing.SpringLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SpringLayout.SpringProxy java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingContainerOrderFocusTraversalPolicy boolean accept(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingDefaultFocusTraversalPolicy boolean accept(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingPaintEventDispatcher SwingPaintEventDispatcher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingPaintEventDispatcher boolean queueSurfaceDataReplacing(java.awt.Component, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingPaintEventDispatcher boolean queueSurfaceDataReplacing(java.awt.Component, java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingPaintEventDispatcher boolean shouldDoNativeBackgroundErase(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingPaintEventDispatcher boolean shouldDoNativeBackgroundErase(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingPaintEventDispatcher java.awt.event.PaintEvent createPaintEvent(java.awt.Component, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingPaintEventDispatcher java.awt.event.PaintEvent createPaintEvent(java.awt.Component, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean doesIconReferenceImage(javax.swing.Icon, java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean doesIconReferenceImage(javax.swing.Icon, java.awt.Image) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isDescendingFrom(java.awt.Component, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isDescendingFrom(java.awt.Component, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities boolean isLeftMouseButton(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isLeftToRight(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isMiddleMouseButton(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isRectangleContainingRectangle(java.awt.Rectangle, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isRectangleContainingRectangle(java.awt.Rectangle, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isRectangleContainingRectangle(java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities boolean isRightMouseButton(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isValidKeyEventForKeyBindings(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean isValidKeyEventForKeyBindings(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities boolean notifyAction(javax.swing.Action, javax.swing.KeyStroke, java.awt.event.KeyEvent, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean notifyAction(javax.swing.Action, javax.swing.KeyStroke, java.awt.event.KeyEvent, java.lang.Object, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean notifyAction(javax.swing.Action, javax.swing.KeyStroke, java.awt.event.KeyEvent, java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,null,_,_-&gt;false;null,_,_,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities boolean processKeyBindings(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities boolean processKeyBindings(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities int computeStringWidth(java.awt.FontMetrics, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities int findDisplayedMnemonicIndex(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities int getAccessibleChildrenCount(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities int getAccessibleIndexInParent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Component findFocusOwner(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Component findFocusOwner(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Component getDeepestComponentAt(java.awt.Component, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Component getDeepestComponentAt(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Component getRoot(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Component getRoot(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Component getUnwrappedView(javax.swing.JViewport) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getAncestorNamed(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getAncestorNamed(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getAncestorNamed(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getAncestorOfClass(java.lang.Class&lt;?&gt;, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getAncestorOfClass(java.lang.Class&lt;?&gt;, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getAncestorOfClass(java.lang.Class&lt;?&gt;, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getUnwrappedParent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getValidateRoot(java.awt.Container, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Container getValidateRoot(java.awt.Container, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Point convertPoint(java.awt.Component, int, int, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,_,_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Point convertPoint(java.awt.Component, java.awt.Point, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null;_,!null,_-&gt;!null;_,_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Point convertScreenLocationToParent(java.awt.Container, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Point convertScreenLocationToParent(java.awt.Container, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle calculateInnerArea(javax.swing.JComponent, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle calculateInnerArea(javax.swing.JComponent, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle calculateInnerArea(javax.swing.JComponent, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle computeIntersection(int, int, int, int, java.awt.Rectangle) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle computeIntersection(int, int, int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle computeUnion(int, int, int, int, java.awt.Rectangle) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle computeUnion(int, int, int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle convertRectangle(java.awt.Component, java.awt.Rectangle, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle convertRectangle(java.awt.Component, java.awt.Rectangle, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle getLocalBounds(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle getLocalBounds(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle[] computeDifference(java.awt.Rectangle, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Rectangle[] computeDifference(java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Window getWindowAncestor(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Window getWindowAncestor(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Window windowForComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.Window windowForComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.event.MouseEvent convertMouseEvent(java.awt.Component, java.awt.event.MouseEvent, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.awt.event.MouseEvent convertMouseEvent(java.awt.Component, java.awt.event.MouseEvent, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 8">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 9">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_,_,_,_,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 10">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 8">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 9">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null,_,_,_,_,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabelImpl(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 10">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabelImpl(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabelImpl(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 8">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabelImpl(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 9">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabelImpl(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null,_,_,_,_,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities javax.accessibility.Accessible getAccessibleAt(java.awt.Component, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.accessibility.Accessible getAccessibleAt(java.awt.Component, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.accessibility.Accessible getAccessibleChild(java.awt.Component, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.accessibility.AccessibleStateSet getAccessibleStateSet(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.ActionMap getUIActionMap(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.ActionMap getUIActionMap(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.CellRendererPane getCellRendererPane(java.awt.Component, java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.InputMap getUIInputMap(javax.swing.JComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.InputMap getUIInputMap(javax.swing.JComponent, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.JComponent getPaintingOrigin(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.JComponent getPaintingOrigin(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.JRootPane getRootPane(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities javax.swing.JRootPane getRootPane(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities void convertPointFromScreen(java.awt.Point, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void convertPointFromScreen(java.awt.Point, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void convertPointToScreen(java.awt.Point, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void convertPointToScreen(java.awt.Point, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void installSwingDropTargetAsNecessary(java.awt.Component, javax.swing.TransferHandler) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, java.awt.Rectangle) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void replaceUIActionMap(javax.swing.JComponent, javax.swing.ActionMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void replaceUIInputMap(javax.swing.JComponent, int, javax.swing.InputMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void updateComponentTreeUI(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingUtilities void updateComponentTreeUI0(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities void updateRendererOrEditorUI(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void show()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowActivated(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowActivated(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowClosed(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowClosing(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowClosing(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowDeactivated(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowDeactivated(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowDeiconified(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowDeiconified(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowIconified(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowIconified(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowOpened(java.awt.event.WindowEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingUtilities.SharedOwnerFrame void windowOpened(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingWorker int getProgress()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingWorker java.beans.PropertyChangeSupport getPropertyChangeSupport()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingWorker sun.swing.AccumulativeRunnable access$200(javax.swing.SwingWorker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker sun.swing.AccumulativeRunnable access$200(javax.swing.SwingWorker)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingWorker void access$000(javax.swing.SwingWorker, javax.swing.SwingWorker.StateValue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker void access$100(javax.swing.SwingWorker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker void done()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingWorker void process(java.util.List&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingWorker void process(java.util.List&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.SwingWorker void publish(V...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker.2 2(javax.swing.SwingWorker, java.util.concurrent.Callable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker.4 void run(java.util.List&lt;java.lang.Integer&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker.6 java.lang.Thread newThread(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker.7 void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker.7.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingWorker.7.1 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingWorker.DoSubmitAccumulativeRunnable DoSubmitAccumulativeRunnable(javax.swing.SwingWorker.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingWorker.DoSubmitAccumulativeRunnable void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.SwingWorker.DoSubmitAccumulativeRunnable void run(java.util.List&lt;java.lang.Runnable&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.SwingWorker.SwingWorkerPropertyChangeSupport SwingWorkerPropertyChangeSupport(javax.swing.SwingWorker, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TablePrintable TablePrintable(javax.swing.JTable, javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TablePrintable int print(java.awt.Graphics, java.awt.print.PageFormat, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TablePrintable void printText(java.awt.Graphics2D, java.lang.String, java.awt.geom.Rectangle2D, java.awt.Font, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TablePrintable void printText(java.awt.Graphics2D, java.lang.String, java.awt.geom.Rectangle2D, java.awt.Font, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Timer Timer(int, java.awt.event.ActionListener) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Timer boolean access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer boolean access$200(javax.swing.Timer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Timer boolean access$200(javax.swing.Timer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer boolean getLogTimers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer boolean isCoalesce()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer boolean isRepeats()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer int getDelay()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer int getInitialDelay()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer java.lang.Object readResolve()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Timer java.lang.Runnable access$300(javax.swing.Timer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Timer java.lang.Runnable access$300(javax.swing.Timer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer java.lang.String getActionCommand()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer java.util.concurrent.atomic.AtomicBoolean access$100(javax.swing.Timer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Timer java.util.concurrent.atomic.AtomicBoolean access$100(javax.swing.Timer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer java.util.concurrent.locks.Lock getLock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.Timer void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.Timer.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Timer.1 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.Timer.DoPostEvent javax.swing.Timer getTimer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TimerQueue boolean containsTimer(javax.swing.Timer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TimerQueue java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TimerQueue void addTimer(javax.swing.Timer, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TimerQueue void addTimer(javax.swing.TimerQueue.DelayedTimer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TimerQueue void removeTimer(javax.swing.Timer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TimerQueue.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TimerQueue.DelayedTimer javax.swing.Timer getTimer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TimerQueue.DelayedTimer long getDelay(java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager boolean isEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ToolTipManager boolean isLightWeightPopupEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ToolTipManager int getHeightAdjust(java.awt.Rectangle, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager int getHeightAdjust(java.awt.Rectangle, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager int getHeightAdjust(java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ToolTipManager int getPopupFitHeight(java.awt.Rectangle, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager int getPopupFitWidth(java.awt.Rectangle, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager int getWidthAdjust(java.awt.Rectangle, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager int getWidthAdjust(java.awt.Rectangle, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager int getWidthAdjust(java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ToolTipManager java.awt.Frame frameForComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager java.awt.GraphicsConfiguration getDrawingGC(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager java.awt.event.FocusListener access$300(javax.swing.ToolTipManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager java.awt.event.FocusListener access$300(javax.swing.ToolTipManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ToolTipManager java.awt.event.FocusListener createFocusChangeListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager javax.swing.KeyStroke access$400(javax.swing.ToolTipManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager javax.swing.KeyStroke access$400(javax.swing.ToolTipManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ToolTipManager javax.swing.KeyStroke access$600(javax.swing.ToolTipManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager javax.swing.KeyStroke access$600(javax.swing.ToolTipManager)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ToolTipManager void access$200(javax.swing.ToolTipManager, java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void access$200(javax.swing.ToolTipManager, java.awt.event.MouseEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void access$500(javax.swing.ToolTipManager, javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void access$500(javax.swing.ToolTipManager, javax.swing.JComponent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void access$700(javax.swing.ToolTipManager, javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void checkForTipChange(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void hide(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void initiateToolTip(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void mouseDragged(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager void mouseDragged(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ToolTipManager void mouseEntered(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void mouseExited(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void mouseMoved(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager void registerComponent(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager void unregisterComponent(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager.1 void focusLost(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager.AccessibilityKeyListener AccessibilityKeyListener(javax.swing.ToolTipManager, javax.swing.ToolTipManager.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager.AccessibilityKeyListener void keyPressed(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager.MoveBeforeEnterListener MoveBeforeEnterListener(javax.swing.ToolTipManager, javax.swing.ToolTipManager.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager.MoveBeforeEnterListener void mouseMoved(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ToolTipManager.insideTimerAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager.outsideTimerAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ToolTipManager.stillInsideTimerAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler boolean canImport(javax.swing.TransferHandler.TransferSupport) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler boolean importData(javax.swing.JComponent, java.awt.datatransfer.Transferable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler boolean importData(javax.swing.TransferHandler.TransferSupport) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler java.awt.Image getDragImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler java.awt.Point getDragImageOffset()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler java.awt.datatransfer.DataFlavor getPropertyDataFlavor(java.lang.Class&lt;?&gt;, java.awt.datatransfer.DataFlavor[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler java.awt.datatransfer.DataFlavor getPropertyDataFlavor(java.lang.Class&lt;?&gt;, java.awt.datatransfer.DataFlavor[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler java.awt.datatransfer.Transferable createTransferable(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler java.beans.PropertyDescriptor getPropertyDescriptor(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler javax.swing.Action getCopyAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler javax.swing.Action getCutAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler javax.swing.Action getPasteAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler javax.swing.Icon getVisualRepresentation(java.awt.datatransfer.Transferable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler javax.swing.Icon getVisualRepresentation(java.awt.datatransfer.Transferable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler void exportDone(javax.swing.JComponent, java.awt.datatransfer.Transferable, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler void exportDone(javax.swing.JComponent, java.awt.datatransfer.Transferable, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler void exportDone(javax.swing.JComponent, java.awt.datatransfer.Transferable, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler void setDragImageOffset(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler DragHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler DragHandler(javax.swing.TransferHandler.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler DragHandler(javax.swing.TransferHandler.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dragDropEnd(java.awt.dnd.DragSourceDropEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dragEnter(java.awt.dnd.DragSourceDragEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dragEnter(java.awt.dnd.DragSourceDragEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dragExit(java.awt.dnd.DragSourceEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dragExit(java.awt.dnd.DragSourceEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dragGestureRecognized(java.awt.dnd.DragGestureEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dragOver(java.awt.dnd.DragSourceDragEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dragOver(java.awt.dnd.DragSourceDragEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dropActionChanged(java.awt.dnd.DragSourceDragEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DragHandler void dropActionChanged(java.awt.dnd.DragSourceDragEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler DropHandler(javax.swing.TransferHandler.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void autoscroll(javax.swing.JComponent, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void dragEnter(java.awt.dnd.DropTargetDragEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void dragExit(java.awt.dnd.DropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void dragOver(java.awt.dnd.DropTargetDragEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void drop(java.awt.dnd.DropTargetDropEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void handleDrag(java.awt.dnd.DropTargetDragEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void setComponentDropLocation(javax.swing.TransferHandler.TransferSupport, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.DropHandler void updateAutoscrollRegion(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DropLocation DropLocation(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DropLocation java.awt.Point getDropPoint()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.DropLocation java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.PropertyTransferable boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.PropertyTransferable java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.SwingDragGestureRecognizer SwingDragGestureRecognizer(java.awt.dnd.DragGestureListener) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.SwingDragGestureRecognizer void gestured(javax.swing.JComponent, java.awt.event.MouseEvent, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.SwingDragGestureRecognizer void registerListeners()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.SwingDragGestureRecognizer void unregisterListeners()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction boolean isEnabled(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction boolean isEnabled(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction sun.misc.JavaSecurityAccess access$800()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction void access$700(javax.swing.TransferHandler.TransferAction, java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction void access$700(javax.swing.TransferHandler.TransferAction, java.awt.event.ActionEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction void actionPerformedImpl(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction.1 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction.2 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferAction.2 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport TransferSupport(java.awt.Component, java.awt.datatransfer.Transferable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport TransferSupport(java.awt.Component, java.awt.datatransfer.Transferable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport TransferSupport(java.awt.Component, java.awt.dnd.DropTargetEvent, javax.swing.TransferHandler.1) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport boolean access$500(javax.swing.TransferHandler.TransferSupport) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport boolean access$500(javax.swing.TransferHandler.TransferSupport)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport boolean access$600(javax.swing.TransferHandler.TransferSupport) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport boolean access$600(javax.swing.TransferHandler.TransferSupport)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport boolean isDrop()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.TransferHandler.TransferSupport void access$400(javax.swing.TransferHandler.TransferSupport, java.awt.Component, java.awt.dnd.DropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults UIDefaults(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults java.awt.Color getColor(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.awt.Color getColor(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.awt.Dimension getDimension(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.awt.Dimension getDimension(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.awt.Font getFont(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.awt.Font getFont(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.awt.Insets getInsets(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.awt.Insets getInsets(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Class&lt;? extends javax.swing.plaf.ComponentUI&gt; getUIClass(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Class&lt;? extends javax.swing.plaf.ComponentUI&gt; getUIClass(java.lang.String, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Class&lt;? extends javax.swing.plaf.ComponentUI&gt; getUIClass(java.lang.String, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object get(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object get(java.lang.Object, java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object get(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object getFromHashtable(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object getFromHashtable(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object getFromResourceBundle(java.lang.Object, java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object getFromResourceBundle(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object put(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.Object put(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.String getString(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.lang.String getString(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults java.util.Locale getDefaultLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIDefaults javax.swing.Icon getIcon(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults javax.swing.Icon getIcon(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults javax.swing.border.Border getBorder(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults javax.swing.border.Border getBorder(java.lang.Object, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults void addResourceBundle(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults void getUIError(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults void putDefaults(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.LazyInputMap java.lang.Object createValue(javax.swing.UIDefaults) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.LazyInputMap java.lang.Object createValue(javax.swing.UIDefaults)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue ProxyLazyValue(java.lang.String, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue ProxyLazyValue(java.lang.String, java.lang.String, java.lang.Object[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.Class[] access$400(javax.swing.UIDefaults.ProxyLazyValue, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.Class[] access$400(javax.swing.UIDefaults.ProxyLazyValue, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.Class[] access$400(javax.swing.UIDefaults.ProxyLazyValue, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.Class[] getClassArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.Class[] getClassArray(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.Object[] access$300(javax.swing.UIDefaults.ProxyLazyValue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.Object[] access$300(javax.swing.UIDefaults.ProxyLazyValue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.String access$100(javax.swing.UIDefaults.ProxyLazyValue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.String access$100(javax.swing.UIDefaults.ProxyLazyValue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.String access$200(javax.swing.UIDefaults.ProxyLazyValue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.String access$200(javax.swing.UIDefaults.ProxyLazyValue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.String printArgs(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.String printArgs(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.ProxyLazyValue.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap TextAndMnemonicHashMap(javax.swing.UIDefaults.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.Object get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.String composeKey(java.lang.String, int, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.String composeKey(java.lang.String, int, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.String composeKey(java.lang.String, int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.String getIndexFromProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.String getIndexFromProperty(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.String getMnemonicFromProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.String getMnemonicFromProperty(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIDefaults.TextAndMnemonicHashMap java.lang.String getTextFromProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager UIManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIManager boolean removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.UIManager java.lang.String access$100()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager java.lang.String getString(java.lang.Object, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIManager java.lang.String makeInstalledLAFKey(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIManager java.lang.String makeInstalledLAFKey(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIManager java.lang.String makeInstalledLAFKey(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager java.lang.String makeSwingPropertiesFilename()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager java.util.Properties loadSwingProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager javax.swing.LookAndFeel[] getAuxiliaryLookAndFeels()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIManager javax.swing.UIManager.LookAndFeelInfo[] getInstalledLookAndFeels()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager void access$200(java.util.Properties, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager void addAuxiliaryLookAndFeel(javax.swing.LookAndFeel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager void checkProperty(java.util.Properties, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager void initializeAuxiliaryLAFs(java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager void initializeInstalledLAFs(java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager void maybeInitializeFocusPolicy(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIManager void setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIManager.2 2()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIManager.2 boolean postProcessKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.UIManager.LAFState LAFState(javax.swing.UIManager.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.UIManager.LAFState javax.swing.UIDefaults getLookAndFeelDefaults()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIManager.LAFState javax.swing.UIDefaults getSystemDefaults()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIManager.LookAndFeelInfo java.lang.String getClassName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIManager.LookAndFeelInfo java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.UIManager.LookAndFeelInfo java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ViewportLayout ViewportLayout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ViewportLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ViewportLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ViewportLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ViewportLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ViewportLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ViewportLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.ViewportLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.ViewportLayout void removeLayoutComponent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.ViewportLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
</root>
