<root>
  <item name="javax.swing.text.AbstractDocument byte[] calculateBidiLevels(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument java.lang.Thread getCurrentWriter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.AbstractDocument.AttributeContext getAttributeContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.AbstractDocument.Content getContent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.DocumentFilter getDocumentFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.Element createBranchElement(javax.swing.text.Element, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.Element createBranchElement(javax.swing.text.Element, javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.Element createLeafElement(javax.swing.text.Element, javax.swing.text.AttributeSet, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.Element createLeafElement(javax.swing.text.Element, javax.swing.text.AttributeSet, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.Element getBidiRootElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.Element[] getRootElements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.Position getEndPosition()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument javax.swing.text.Position getStartPosition()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument void handleInsertString(int, java.lang.String, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument void insertString(int, java.lang.String, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument void render(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument void updateBidi(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement AbstractElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement AbstractElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement int getIndex(javax.swing.tree.TreeNode) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement javax.swing.text.Document getDocument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement javax.swing.text.Element getParentElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement void dump(java.io.PrintStream, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement void setResolveParent(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.AbstractElement void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BidiElement BidiElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BidiElement java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BidiRootElement BidiRootElement(javax.swing.text.AbstractDocument) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BidiRootElement java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement BranchElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement BranchElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement boolean getAllowsChildren()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement boolean isLeaf()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement int getElementCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement java.util.Enumeration children()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement javax.swing.text.Element getElement(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement javax.swing.text.Element positionToElement(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.BranchElement void replace(int, int, javax.swing.text.Element[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent boolean isSignificant()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent java.lang.String getRedoPresentationName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent java.lang.String getUndoPresentationName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent javax.swing.event.DocumentEvent.ElementChange getChange(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent javax.swing.event.DocumentEvent.EventType access$100(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent javax.swing.event.DocumentEvent.EventType access$100(javax.swing.text.AbstractDocument.DefaultDocumentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent javax.swing.event.DocumentEvent.EventType getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent javax.swing.text.Document getDocument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultFilterBypass DefaultFilterBypass(javax.swing.text.AbstractDocument, javax.swing.text.AbstractDocument.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.DefaultFilterBypass javax.swing.text.Document getDocument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.ElementEdit int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.ElementEdit javax.swing.text.Element getElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.ElementEdit javax.swing.text.Element[] getChildrenAdded()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.ElementEdit javax.swing.text.Element[] getChildrenRemoved()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement LeafElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement LeafElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet, int, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement boolean getAllowsChildren()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement boolean isLeaf()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement int getElementCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement int getElementIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement java.util.Enumeration children()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement javax.swing.text.Element getElement(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.LeafElement void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.UndoRedoDocumentEvent UndoRedoDocumentEvent(javax.swing.text.AbstractDocument, javax.swing.text.AbstractDocument.DefaultDocumentEvent, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractDocument.UndoRedoDocumentEvent javax.swing.event.DocumentEvent.EventType getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractDocument.UndoRedoDocumentEvent javax.swing.text.AbstractDocument.DefaultDocumentEvent getSource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Document) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Document, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Element) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Element, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractWriter boolean getCanWrapLines()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter boolean inRange(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractWriter boolean isLineEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter int getCurrentLineLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter int getEndOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter int getIndentLevel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter int getIndentSpace()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter int getLineLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter int getStartOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter int indexOf(char[], char, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter java.io.Writer getWriter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter java.lang.String getLineSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter java.lang.String getText(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractWriter javax.swing.text.Document getDocument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter javax.swing.text.ElementIterator getElementIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AbstractWriter void text(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AbstractWriter void write(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AbstractWriter void writeAttributes(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView boolean getEstimatedMajorSpan()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView float getBottomInset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView float getLeftInset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView float getRightInset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView float getTopInset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView int getMajorAxis()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView int getMinorAxis()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView int getViewIndexAtPosition(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView javax.swing.text.AsyncBoxView.ChildState createChildState(javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView javax.swing.text.AsyncBoxView.ChildState getChildState(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView javax.swing.text.View getView(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView void majorRequirementChange(javax.swing.text.AsyncBoxView.ChildState, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView void minorRequirementChange(javax.swing.text.AsyncBoxView.ChildState) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView void preferenceChanged(javax.swing.text.View, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView void updateLayout(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView void updateLayout(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView void updateLayout(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildLocator boolean intersectsClip(java.awt.Shape, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildLocator java.awt.Shape getChildAllocation(int, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildLocator java.awt.Shape getChildAllocation(int, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildLocator void paintChildren(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildLocator void setAllocation(java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState boolean access$202(javax.swing.text.AsyncBoxView.ChildState, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState boolean isLayoutValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState float access$000(javax.swing.text.AsyncBoxView.ChildState) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState float access$000(javax.swing.text.AsyncBoxView.ChildState)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState float access$100(javax.swing.text.AsyncBoxView.ChildState) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState float access$100(javax.swing.text.AsyncBoxView.ChildState)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState float getMajorOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState float getMajorSpan()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.AsyncBoxView.ChildState javax.swing.text.View getChildView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BadLocationException int offsetRequested()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView boolean isAfter(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView boolean isAfter(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView boolean isAllocationValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView boolean isBefore(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView boolean isBefore(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView boolean isLayoutValid(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView float getSpanOnAxis(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView int getAxis()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView int getOffset(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView int getSpan(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.BoxView int[] updateLayoutArray(int[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView java.awt.Shape getChildAllocation(int, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.BoxView java.awt.Shape getChildAllocation(int, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.BoxView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.BoxView javax.swing.SizeRequirements baselineRequirements(int, javax.swing.SizeRequirements) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.BoxView javax.swing.SizeRequirements baselineRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView javax.swing.SizeRequirements calculateMajorAxisRequirements(int, javax.swing.SizeRequirements) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.BoxView javax.swing.SizeRequirements calculateMajorAxisRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.BoxView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView void childAllocation(int, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView void paint(java.awt.Graphics, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.BoxView void replace(int, int, javax.swing.text.View[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ChangedCharSetException boolean keyEqualsCharSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ChangedCharSetException java.lang.String getCharSetSpec()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ComponentView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ComponentView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ComponentView java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ComponentView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ComponentView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ComponentView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ComponentView void paint(java.awt.Graphics, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ComponentView.Invalidator boolean isShowing()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ComponentView.Invalidator void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.CompositeView boolean flipEastAndWestAtEnds(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView boolean flipEastAndWestAtEnds(int, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,!null-&gt;false;_,null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.CompositeView int getViewCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.CompositeView int getViewIndex(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView java.awt.Rectangle getInsideAllocation(java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView java.awt.Rectangle getInsideAllocation(java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView java.awt.Shape getChildAllocation(int, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView javax.swing.text.View getView(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.CompositeView javax.swing.text.View getViewAtPosition(int, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView javax.swing.text.View getViewAtPosition(int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView short getBottomInset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.CompositeView short getLeftInset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.CompositeView short getRightInset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.CompositeView short getTopInset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.CompositeView void loadChildren(javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView void replace(int, int, javax.swing.text.View[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.CompositeView void setParagraphInsets(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DateFormatter boolean getSupportsIncrement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DateFormatter java.lang.Object adjustValue(java.lang.Object, java.util.Map, java.lang.Object, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DateFormatter java.lang.Object adjustValue(java.lang.Object, java.util.Map, java.lang.Object, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DateFormatter java.lang.Object adjustValue(java.lang.Object, java.util.Map, java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DateFormatter java.lang.Object getAdjustField(int, java.util.Map) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DateFormatter java.lang.Object getAdjustField(int, java.util.Map)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean _contains(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean access$202(javax.swing.text.DefaultCaret, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean access$500(javax.swing.text.DefaultCaret) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean access$500(javax.swing.text.DefaultCaret)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean access$502(javax.swing.text.DefaultCaret, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean isActive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean isDotLeftToRight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean isMarkLeftToRight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean isPositionLTR(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean isSelectionVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret boolean isVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret float access$402(javax.swing.text.DefaultCaret, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret int access$302(javax.swing.text.DefaultCaret, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret int getDot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret int getMark()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret int getUpdatePolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret java.awt.Point getMagicCaretPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret java.awt.datatransfer.Clipboard getSystemSelection()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret java.awt.datatransfer.ClipboardOwner getClipboardOwner()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret javax.swing.text.Highlighter.HighlightPainter getSelectionPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret javax.swing.text.JTextComponent getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret javax.swing.text.Position.Bias getDotBias()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret javax.swing.text.Position.Bias getMarkBias()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret void access$100(javax.swing.text.DefaultCaret) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void adjustCaret(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void adjustCaretAndFocus(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void damage(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void deinstall(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void focusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void install(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void mouseDragged(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void mouseEntered(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret void mouseExited(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret void mouseMoved(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void mouseReleased(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void moveCaret(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void moveDot(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void positionCaret(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void selectWord(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void setDot(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret.DefaultFilterBypass DefaultFilterBypass(javax.swing.text.DefaultCaret, javax.swing.text.DefaultCaret.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret.DefaultFilterBypass javax.swing.text.Caret getCaret()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultCaret.Handler void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret.Handler void changedUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret.Handler void insertUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret.Handler void lostOwnership(java.awt.datatransfer.Clipboard, java.awt.datatransfer.Transferable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret.Handler void lostOwnership(java.awt.datatransfer.Clipboard, java.awt.datatransfer.Transferable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultCaret.Handler void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultCaret.Handler void removeUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit DefaultEditorKit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultEditorKit java.lang.String getContentType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit javax.swing.Action[] getActions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultEditorKit javax.swing.text.Caret createCaret()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit javax.swing.text.Document createDefaultDocument()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit javax.swing.text.MutableAttributeSet getInputAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit javax.swing.text.ViewFactory getViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit void read(java.io.InputStream, javax.swing.text.Document, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit void read(java.io.Reader, javax.swing.text.Document, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit void read(java.io.Reader, javax.swing.text.Document, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit void write(java.io.OutputStream, javax.swing.text.Document, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit void write(java.io.Writer, javax.swing.text.Document, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit void write(java.io.Writer, javax.swing.text.Document, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit.VerticalPageAction int constrainOffset(javax.swing.text.JTextComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultEditorKit.VerticalPageAction int getAdjustedY(javax.swing.text.JTextComponent, java.awt.Rectangle, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter boolean getAllowsInvalid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatter boolean getCommitsOnValidEdit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatter boolean getOverwriteMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatter boolean isLegalInsertText(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter boolean isLegalInsertText(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;true;null-&gt;true&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatter boolean isNavigatable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatter boolean replace(javax.swing.text.DefaultFormatter.ReplaceHolder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter int getNextVisualPositionFrom(javax.swing.text.JTextComponent, int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter java.lang.Class&lt;?&gt; getValueClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatter java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter java.lang.String getReplaceString(int, int, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter java.lang.String getReplaceString(int, int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter java.lang.String valueToString(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter java.lang.String valueToString(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$200(javax.swing.text.DefaultFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$300(javax.swing.text.DefaultFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$400(javax.swing.text.DefaultFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$500(javax.swing.text.DefaultFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$600(javax.swing.text.DefaultFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter void moveDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter void setDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter void updateValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter.DefaultDocumentFilter DefaultDocumentFilter(javax.swing.text.DefaultFormatter, javax.swing.text.DefaultFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter.DefaultNavigationFilter DefaultNavigationFilter(javax.swing.text.DefaultFormatter, javax.swing.text.DefaultFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter.DefaultNavigationFilter int getNextVisualPositionFrom(javax.swing.text.JTextComponent, int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultFormatter.ReplaceHolder ReplaceHolder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatterFactory DefaultFormatterFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatterFactory javax.swing.JFormattedTextField.AbstractFormatter getDefaultFormatter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatterFactory javax.swing.JFormattedTextField.AbstractFormatter getDisplayFormatter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatterFactory javax.swing.JFormattedTextField.AbstractFormatter getEditFormatter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultFormatterFactory javax.swing.JFormattedTextField.AbstractFormatter getFormatter(javax.swing.JFormattedTextField) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultFormatterFactory javax.swing.JFormattedTextField.AbstractFormatter getFormatter(javax.swing.JFormattedTextField)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultFormatterFactory javax.swing.JFormattedTextField.AbstractFormatter getNullFormatter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultHighlighter boolean getDrawsLayeredHighlights()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultHighlighter java.lang.Object addHighlight(int, int, javax.swing.text.Highlighter.HighlightPainter)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultHighlighter javax.swing.text.JTextComponent access$000(javax.swing.text.DefaultHighlighter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultHighlighter javax.swing.text.JTextComponent access$000(javax.swing.text.DefaultHighlighter)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultHighlighter void changeHighlight(java.lang.Object, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultHighlighter void deinstall(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultHighlighter void removeHighlight(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultHighlighter.DefaultHighlightPainter java.awt.Color getColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultHighlighter.DefaultHighlightPainter java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultHighlighter.DefaultHighlightPainter java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultHighlighter.DefaultHighlightPainter void paint(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultHighlighter.HighlightInfo javax.swing.text.Highlighter.HighlightPainter getPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultHighlighter.LayeredHighlightInfo void union(java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument DefaultStyledDocument(javax.swing.text.AbstractDocument.Content, javax.swing.text.StyleContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument DefaultStyledDocument(javax.swing.text.StyleContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument javax.swing.event.ChangeListener createStyleChangeListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument javax.swing.event.ChangeListener createStyleContextChangeListener()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument javax.swing.text.AbstractDocument.AbstractElement createDefaultRoot()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument javax.swing.text.Element getCharacterElement(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument javax.swing.text.Style getLogicalStyle(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument short createSpecsForInsertAfterNewline(javax.swing.text.Element, javax.swing.text.Element, javax.swing.text.AttributeSet, java.util.Vector&lt;javax.swing.text.DefaultStyledDocument.ElementSpec&gt;, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument short createSpecsForInsertAfterNewline(javax.swing.text.Element, javax.swing.text.Element, javax.swing.text.AttributeSet, java.util.Vector&lt;javax.swing.text.DefaultStyledDocument.ElementSpec&gt;, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void create(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void insert(int, javax.swing.text.DefaultStyledDocument.ElementSpec[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void removeElement(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void removeElementImpl(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void setParagraphAttributes(int, int, javax.swing.text.AttributeSet, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument void styleChanged(javax.swing.text.Style) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.AbstractChangeHandler java.util.List&lt;javax.swing.event.ChangeListener&gt; getStaleListeners(javax.swing.event.ChangeListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.AbstractChangeHandler java.util.List&lt;javax.swing.event.ChangeListener&gt; getStaleListeners(javax.swing.event.ChangeListener)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.AbstractChangeHandler.DocReference DocReference(javax.swing.text.DefaultStyledDocument, java.lang.ref.ReferenceQueue&lt;javax.swing.text.DefaultStyledDocument&gt;) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.AbstractChangeHandler.DocReference javax.swing.event.ChangeListener getListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit AttributeUndoableEdit(javax.swing.text.Element, javax.swing.text.AttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer boolean canJoin(javax.swing.text.Element, javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer boolean canJoin(javax.swing.text.Element, javax.swing.text.Element) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer boolean canJoin(javax.swing.text.Element, javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer boolean removeElements(javax.swing.text.Element, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element clone(javax.swing.text.Element, javax.swing.text.Element) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element cloneAsNecessary(javax.swing.text.Element, javax.swing.text.Element, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element getRootElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element join(javax.swing.text.Element, javax.swing.text.Element, javax.swing.text.Element, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element join(javax.swing.text.Element, javax.swing.text.Element, javax.swing.text.Element, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element recreateFracturedElement(javax.swing.text.Element, javax.swing.text.Element) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer void create(int, javax.swing.text.DefaultStyledDocument.ElementSpec[], javax.swing.text.AbstractDocument.DefaultDocumentEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer void create(int, javax.swing.text.DefaultStyledDocument.ElementSpec[], javax.swing.text.AbstractDocument.DefaultDocumentEvent) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer void fractureDeepestLeaf(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer void fractureFrom(javax.swing.text.DefaultStyledDocument.ElementBuffer.ElemChanges[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer void insertElement(javax.swing.text.DefaultStyledDocument.ElementSpec) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer void insertFirstContent(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer void insertUpdate(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer.ElemChanges java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementSpec char[] getArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementSpec int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementSpec int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementSpec java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementSpec javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementSpec short getDirection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.ElementSpec short getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.SectionElement SectionElement(javax.swing.text.DefaultStyledDocument) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.SectionElement java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.StyleChangeHandler void fireStateChanged(javax.swing.text.DefaultStyledDocument, javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.StyleChangeHandler void fireStateChanged(javax.swing.text.DefaultStyledDocument, javax.swing.event.ChangeEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.StyleChangeUndoableEdit StyleChangeUndoableEdit(javax.swing.text.AbstractDocument.AbstractElement, javax.swing.text.Style) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.StyleContextChangeHandler void fireStateChanged(javax.swing.text.DefaultStyledDocument, javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DefaultStyledDocument.StyleContextChangeHandler void fireStateChanged(javax.swing.text.DefaultStyledDocument, javax.swing.event.ChangeEvent) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.DocumentFilter DocumentFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.DocumentFilter void insertString(javax.swing.text.DocumentFilter.FilterBypass, int, java.lang.String, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DocumentFilter void remove(javax.swing.text.DocumentFilter.FilterBypass, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DocumentFilter void replace(javax.swing.text.DocumentFilter.FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.DocumentFilter.FilterBypass FilterBypass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.EditorKit EditorKit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.EditorKit java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.EditorKit void deinstall(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.EditorKit void deinstall(javax.swing.JEditorPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.EditorKit void install(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.EditorKit void install(javax.swing.JEditorPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ElementIterator ElementIterator(javax.swing.text.Document) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ElementIterator java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ElementIterator javax.swing.text.Element current()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ElementIterator javax.swing.text.Element first()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ElementIterator javax.swing.text.Element getDeepestLeaf(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ElementIterator javax.swing.text.Element next()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ElementIterator javax.swing.text.Element previous()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ElementIterator.StackItem StackItem(javax.swing.text.ElementIterator, javax.swing.text.Element, javax.swing.text.ElementIterator.1) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ElementIterator.StackItem int access$200(javax.swing.text.ElementIterator.StackItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ElementIterator.StackItem int access$200(javax.swing.text.ElementIterator.StackItem)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ElementIterator.StackItem int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ElementIterator.StackItem javax.swing.text.Element access$100(javax.swing.text.ElementIterator.StackItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ElementIterator.StackItem javax.swing.text.Element access$100(javax.swing.text.ElementIterator.StackItem)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ElementIterator.StackItem javax.swing.text.Element getElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ElementIterator.StackItem void access$300(javax.swing.text.ElementIterator.StackItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FieldView int getResizeWeight(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.FieldView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FieldView java.awt.Shape adjustAllocation(java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FieldView java.awt.Shape adjustAllocation(java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FieldView java.awt.Shape adjustPaintRegion(java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FieldView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FieldView void paint(java.awt.Graphics, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FieldView void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView int getFlowSpan(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.FlowView int getFlowStart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.FlowView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView void loadChildren(javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy int layoutRow(javax.swing.text.FlowView, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy javax.swing.text.View getLogicalView(javax.swing.text.FlowView) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy javax.swing.text.View getLogicalView(javax.swing.text.FlowView)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void addDamage(javax.swing.text.FlowView, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void adjustRow(javax.swing.text.FlowView, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void layout(javax.swing.text.FlowView) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.FlowStrategy void reparentViews(javax.swing.text.View, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView boolean isAfter(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView boolean isAfter(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,_,!null-&gt;false;_,_,null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView boolean isBefore(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView boolean isBefore(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,_,!null-&gt;false;_,_,null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,_,!null-&gt;null;_,_,null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView void childAllocation(int, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView void childAllocation(int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView void loadChildren(javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView void paint(java.awt.Graphics, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.FlowView.LogicalView void paint(java.awt.Graphics, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GapContent int compare(javax.swing.text.GapContent.MarkData, javax.swing.text.GapContent.MarkData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent int compare(javax.swing.text.GapContent.MarkData, javax.swing.text.GapContent.MarkData) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent int compare(javax.swing.text.GapContent.MarkData, javax.swing.text.GapContent.MarkData)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GapContent int getNewArraySize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GapContent java.lang.Object allocateArray(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent java.lang.String getString(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent java.util.Vector getPositionsInRange(java.util.Vector, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GapContent java.util.Vector getPositionsInRange(java.util.Vector, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent javax.swing.text.Position createPosition(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent javax.swing.undo.UndoableEdit remove(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent void getChars(int, int, javax.swing.text.Segment) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent void updateUndoPositions(java.util.Vector, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent.MarkData MarkData(int, javax.swing.text.GapContent.StickyPosition, java.lang.ref.ReferenceQueue&lt;? super javax.swing.text.GapContent.StickyPosition&gt;) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GapContent.MarkVector java.lang.Object allocateArray(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent.RemoveUndo RemoveUndo(javax.swing.text.GapContent, int, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent.RemoveUndo RemoveUndo(javax.swing.text.GapContent, int, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent.StickyPosition java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapContent.UndoPosRef UndoPosRef(javax.swing.text.GapContent, javax.swing.text.GapContent.MarkData) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GapVector int getGapEnd()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GapVector int getGapStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GapVector int getNewArraySize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GapVector java.lang.Object getArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GlyphPainter1 GlyphPainter1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GlyphPainter1 float getSpan(javax.swing.text.GlyphView, int, int, javax.swing.text.TabExpander, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 float getSpan(javax.swing.text.GlyphView, int, int, javax.swing.text.TabExpander, float) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 int getBoundedPosition(javax.swing.text.GlyphView, int, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 int[] getJustificationData(javax.swing.text.GlyphView) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 int[] getJustificationData(javax.swing.text.GlyphView)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter1 void sync(javax.swing.text.GlyphView) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 float getAscent(javax.swing.text.GlyphView) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 float getDescent(javax.swing.text.GlyphView) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 float getHeight(javax.swing.text.GlyphView) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 float getSpan(javax.swing.text.GlyphView, int, int, javax.swing.text.TabExpander, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 float getSpan(javax.swing.text.GlyphView, int, int, javax.swing.text.TabExpander, float) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 int getBoundedPosition(javax.swing.text.GlyphView, int, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 int getNextVisualPositionFrom(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 int getNextVisualPositionFrom(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 int getNextVisualPositionFrom(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 javax.swing.text.GlyphView.GlyphPainter getPainter(javax.swing.text.GlyphView, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 javax.swing.text.GlyphView.GlyphPainter getPainter(javax.swing.text.GlyphView, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_-&gt;null;null,_,_-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphPainter2 void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView GlyphView(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphView java.awt.Color getBackground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView java.awt.Color getForeground()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView javax.swing.text.GlyphView.GlyphPainter getGlyphPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GlyphView javax.swing.text.TabExpander getTabExpander()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GlyphView javax.swing.text.View createFragment(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphView void paintTextUsingColor(java.awt.Graphics, java.awt.Shape, java.awt.Color, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView.GlyphPainter GlyphPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.GlyphView.GlyphPainter int getNextVisualPositionFrom(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.GlyphView.GlyphPainter int getNextVisualPositionFrom(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView.GlyphPainter javax.swing.text.GlyphView.GlyphPainter getPainter(javax.swing.text.GlyphView, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.GlyphView.GlyphPainter javax.swing.text.GlyphView.GlyphPainter getPainter(javax.swing.text.GlyphView, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.IconView IconView(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.IconView float getAlignment(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.IconView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.IconView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.IconView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.IconView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.IconView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.IconView void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter boolean canIncrement(java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter boolean canIncrement(java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_-&gt;true;null,_-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter boolean canReplace(javax.swing.text.DefaultFormatter.ReplaceHolder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter boolean getSupportsIncrement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter boolean isLiteral(java.util.Map) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter boolean isLiteral(java.util.Map)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter boolean isValidMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter boolean replace(javax.swing.text.DefaultFormatter.ReplaceHolder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter int access$300(javax.swing.text.InternationalFormatter, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter int access$300(javax.swing.text.InternationalFormatter, java.lang.Object, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter int getFieldTypeCountTo(java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Comparable getMaximum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Comparable getMinimum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Object adjustValue(java.lang.Object, java.util.Map, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Object adjustValue(java.lang.Object, java.util.Map, java.lang.Object, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Object adjustValue(java.lang.Object, java.util.Map, java.lang.Object, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Object adjustValue(java.lang.Object, java.util.Map, java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_,_-&gt;null;_,!null,_,_-&gt;null;_,_,!null,_-&gt;null;_,_,null,_-&gt;null;_,null,_,_-&gt;null;null,_,_,_-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Object getAdjustField(int, java.util.Map) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Object getAdjustField(int, java.util.Map)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,!null-&gt;null;_,null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.Object stringToValue(java.lang.String, java.text.Format) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.String valueToString(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.lang.String valueToString(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.text.AttributedCharacterIterator getIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.text.Format getFormat()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter java.util.Map&lt;java.text.AttributedCharacterIterator.Attribute,java.lang.Object&gt; getAttributes(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter javax.swing.Action[] getActions()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter javax.swing.JFormattedTextField access$000(javax.swing.text.InternationalFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter javax.swing.JFormattedTextField access$100(javax.swing.text.InternationalFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter javax.swing.JFormattedTextField access$200(javax.swing.text.InternationalFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter void access$400(javax.swing.text.InternationalFormatter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter void selectField(java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter void updateMask(java.text.AttributedCharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter void updateValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.InternationalFormatter.ExtendedReplaceHolder ExtendedReplaceHolder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.InternationalFormatter.IncrementAction void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent boolean composedTextExists()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent boolean getDragEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent boolean isEditable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent char getFocusAccelerator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent int access$300(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent java.awt.Color getCaretColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent java.awt.Color getDisabledTextColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent java.awt.Color getSelectedTextColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent java.awt.Color getSelectionColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent java.awt.Insets getMargin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent java.awt.print.Printable getPrintable(java.text.MessageFormat, java.text.MessageFormat)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent java.lang.Object access$400()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent java.lang.Object setDropLocation(javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent java.lang.String access$900(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent java.lang.String access$900(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent java.lang.String getSelectedText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent java.lang.String getText()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent java.lang.String paramString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.DropMode getDropMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.plaf.TextUI getUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Caret getCaret()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Document access$100(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Document access$100(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Document getDocument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Highlighter getHighlighter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.JTextComponent.DropLocation dropLocationForPoint(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.JTextComponent.DropLocation dropLocationForPoint(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.JTextComponent.DropLocation getDropLocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Keymap addKeymap(java.lang.String, javax.swing.text.Keymap)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Keymap getKeymap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.NavigationFilter getNavigationFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$500(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$500(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$502(javax.swing.text.JTextComponent, javax.swing.text.Position) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$502(javax.swing.text.JTextComponent, javax.swing.text.Position)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$600(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$600(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$602(javax.swing.text.JTextComponent, javax.swing.text.Position) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$602(javax.swing.text.JTextComponent, javax.swing.text.Position)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$700(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$700(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$800(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.Position access$800(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.SimpleAttributeSet access$1000(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent javax.swing.text.SimpleAttributeSet access$1000(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent void createComposedTextAttribute(int, java.text.AttributedCharacterIterator) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void exchangeCaret(javax.swing.text.Caret, javax.swing.text.Caret) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void loadKeymap(javax.swing.text.Keymap, javax.swing.text.JTextComponent.KeyBinding[], javax.swing.Action[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void loadKeymap(javax.swing.text.Keymap, javax.swing.text.JTextComponent.KeyBinding[], javax.swing.Action[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void processInputMethodEvent(java.awt.event.InputMethodEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void replaceInputMethodText(java.awt.event.InputMethodEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void setDocument(javax.swing.text.Document) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void setDropMode(javax.swing.DropMode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent void updateInputMap(javax.swing.text.Keymap, javax.swing.text.Keymap) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent void updateInputMap(javax.swing.text.Keymap, javax.swing.text.Keymap) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.1 java.lang.Object setDropLocation(javax.swing.text.JTextComponent, javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.1 javax.swing.TransferHandler.DropLocation dropLocationForPoint(javax.swing.text.JTextComponent, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.2 java.lang.Object call()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent AccessibleJTextComponent(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent int getIndexAtPoint(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.awt.Rectangle getCharacterBounds(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.awt.Rectangle getRootEditorRect()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.awt.Rectangle getTextBounds(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.lang.String getAccessibleActionDescription(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.lang.String getAfterIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.lang.String getAtIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.lang.String getAtIndex(int, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.lang.String getBeforeIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent java.lang.String getTextRange(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleAction getAccessibleAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleEditableText getAccessibleEditableText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleTextSequence getSequenceAtIndex(int, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleTextSequence getTextSequenceAfter(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleTextSequence getTextSequenceAt(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleTextSequence getTextSequenceBefore(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.swing.text.Element getParagraphElement(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.swing.text.JTextComponent.AccessibleJTextComponent.IndexedSegment getParagraphElementText(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.swing.text.JTextComponent.AccessibleJTextComponent.IndexedSegment getSegmentAt(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void caretUpdate(javax.swing.event.CaretEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void changedUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void insertTextAtIndex(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void insertUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void removeUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent.1 void componentMoved(java.awt.event.ComponentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent.IndexedSegment IndexedSegment(javax.swing.text.JTextComponent.AccessibleJTextComponent, javax.swing.text.JTextComponent.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.ComposedTextCaret void install(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.ComposedTextCaret void positionCaret(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultKeymap java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultKeymap java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultKeymap javax.swing.Action getDefaultAction()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultKeymap javax.swing.Action[] getBoundActions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultKeymap javax.swing.KeyStroke[] getBoundKeyStrokes()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultKeymap javax.swing.KeyStroke[] getKeyStrokesForAction(javax.swing.Action) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultKeymap javax.swing.KeyStroke[] getKeyStrokesForAction(javax.swing.Action)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultKeymap javax.swing.text.Keymap getResolveParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler boolean canImport(javax.swing.JComponent, java.awt.datatransfer.DataFlavor[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler boolean canImport(javax.swing.JComponent, java.awt.datatransfer.DataFlavor[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler boolean importData(javax.swing.JComponent, java.awt.datatransfer.Transferable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler boolean importData(javax.swing.JComponent, java.awt.datatransfer.Transferable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler int getSourceActions(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler int getSourceActions(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler java.awt.datatransfer.DataFlavor getFlavor(java.awt.datatransfer.DataFlavor[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler java.awt.datatransfer.DataFlavor getFlavor(java.awt.datatransfer.DataFlavor[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DefaultTransferHandler void exportToClipboard(javax.swing.JComponent, java.awt.datatransfer.Clipboard, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DropLocation DropLocation(java.awt.Point, int, javax.swing.text.Position.Bias) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DropLocation DropLocation(java.awt.Point, int, javax.swing.text.Position.Bias, javax.swing.text.JTextComponent.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DropLocation DropLocation(java.awt.Point, int, javax.swing.text.Position.Bias, javax.swing.text.JTextComponent.1) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DropLocation int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.DropLocation java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.DropLocation javax.swing.text.Position.Bias getBias()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler java.awt.Rectangle getTextLocation(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler java.awt.Rectangle getTextLocation(java.awt.font.TextHitInfo)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler java.awt.font.TextHitInfo getLocationOffset(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler java.text.AttributedCharacterIterator cancelLatestCommittedText(java.text.AttributedCharacterIterator.Attribute[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler java.text.AttributedCharacterIterator cancelLatestCommittedText(java.text.AttributedCharacterIterator.Attribute[])">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler java.text.AttributedCharacterIterator getCommittedText(int, int, java.text.AttributedCharacterIterator.Attribute[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler java.text.AttributedCharacterIterator getSelectedText(java.text.AttributedCharacterIterator.Attribute[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler java.text.AttributedCharacterIterator getSelectedText(java.text.AttributedCharacterIterator.Attribute[])">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler void changedUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler void insertUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.InputMethodRequestsHandler void removeUpdate(javax.swing.event.DocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.KeymapWrapper java.lang.Object get(javax.swing.KeyStroke)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent MutableCaretEvent(javax.swing.text.JTextComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent int getDot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent int getMark()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void focusGained(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void focusLost(java.awt.event.FocusEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void focusLost(java.awt.event.FocusEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void mouseClicked(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void mouseEntered(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void mouseExited(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void mouseReleased(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.JTextComponent.MutableCaretEvent void stateChanged(javax.swing.event.ChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.LabelView LabelView(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.LabelView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.LabelView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.LabelView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.LayeredHighlighter LayeredHighlighter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.LayeredHighlighter.LayerPainter LayerPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.LayoutQueue java.lang.Runnable waitForWork()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter boolean getValueContainsLiteralCharacters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter char getPlaceholderCharacter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter int getInvalidOffset(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter int getMaxLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.Object stringToValue(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.Object stringToValue(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.String getInvalidCharacters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.String getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.String getPlaceholder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.String getValidCharacters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.String stripLiteralChars(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.String stripLiteralChars(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.String valueToString(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter java.lang.String valueToString(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter javax.swing.text.MaskFormatter.MaskCharacter getMaskCharacter(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String, javax.swing.text.MaskFormatter.MaskCharacter[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.AlphaNumericCharacter AlphaNumericCharacter(javax.swing.text.MaskFormatter, javax.swing.text.MaskFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.CharCharacter CharCharacter(javax.swing.text.MaskFormatter, javax.swing.text.MaskFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.DigitMaskCharacter DigitMaskCharacter(javax.swing.text.MaskFormatter, javax.swing.text.MaskFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.HexCharacter HexCharacter(javax.swing.text.MaskFormatter, javax.swing.text.MaskFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.LiteralCharacter boolean isLiteral()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter.LiteralCharacter char getChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter.LowerCaseCharacter LowerCaseCharacter(javax.swing.text.MaskFormatter, javax.swing.text.MaskFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.MaskCharacter MaskCharacter(javax.swing.text.MaskFormatter, javax.swing.text.MaskFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.MaskCharacter boolean isLiteral()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter.MaskCharacter char getChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.MaskFormatter.MaskCharacter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.MaskCharacter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.MaskCharacter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.MaskCharacter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.MaskFormatter.UpperCaseCharacter UpperCaseCharacter(javax.swing.text.MaskFormatter, javax.swing.text.MaskFormatter.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.NavigationFilter NavigationFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.NavigationFilter int getNextVisualPositionFrom(javax.swing.text.JTextComponent, int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.NavigationFilter void moveDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.NavigationFilter void setDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.NavigationFilter.FilterBypass FilterBypass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.NumberFormatter boolean isLiteral(java.util.Map) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.NumberFormatter char getPositiveSign()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.NumberFormatter java.lang.Object convertValueToValueClass(java.lang.Object, java.lang.Class) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.NumberFormatter java.lang.Object convertValueToValueClass(java.lang.Object, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.NumberFormatter java.lang.Object stringToValue(java.lang.String, java.text.Format) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.NumberFormatter java.lang.Object toggleSign(boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.NumberFormatter java.text.DecimalFormatSymbols getDecimalFormatSymbols()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.NumberFormatter java.text.NumberFormat.Field getFieldFrom(int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView ParagraphView(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView boolean flipEastAndWestAtEnds(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView float access$100(javax.swing.text.ParagraphView) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView float access$100(javax.swing.text.ParagraphView)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ParagraphView float findEdgeSpan(javax.swing.text.View, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView float getTabBase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ParagraphView int access$000(javax.swing.text.ParagraphView) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView int access$000(javax.swing.text.ParagraphView)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ParagraphView int findOffsetToCharactersInString(char[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView int getBreakWeight(int, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ParagraphView int getClosestPositionTo(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[], int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView int getClosestPositionTo(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[], int, int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView int getClosestPositionTo(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[], int, int) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView javax.swing.text.View breakView(int, float, java.awt.Shape) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView javax.swing.text.View breakView(int, float, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView javax.swing.text.View createRow()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView.Row java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView.Row java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView.Row javax.swing.SizeRequirements calculateMajorAxisRequirements(int, javax.swing.SizeRequirements) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView.Row javax.swing.SizeRequirements calculateMajorAxisRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ParagraphView.Row javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView.Row void loadChildren(javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ParagraphView.Row void loadChildren(javax.swing.text.ViewFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.PasswordView int drawEchoCharacter(java.awt.Graphics, int, int, char) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PasswordView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PasswordView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PasswordView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.PasswordView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.PlainDocument javax.swing.text.AbstractDocument.AbstractElement createDefaultRoot()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainDocument javax.swing.text.Element getDefaultRootElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.PlainDocument void insertComposedTextUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainDocument void insertString(int, java.lang.String, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.PlainDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainView float nextTabStop(float, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.PlainView int drawElement(int, javax.swing.text.Element, java.awt.Graphics, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainView int drawUnselectedText(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainView int getLineWidth(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.PlainView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainView java.awt.Rectangle lineToRect(java.awt.Shape, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.PlainView java.awt.Shape adjustPaintRegion(java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.PlainView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.PlainView void damageLineRange(int, int, java.awt.Shape, java.awt.Component) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.PlainView void paint(java.awt.Graphics, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainView void updateDamage(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.PlainView void updateDamage(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Position.Bias java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Segment boolean isPartialReturn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Segment char current()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Segment int getBeginIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Segment int getEndIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Segment int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Segment int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Segment java.lang.CharSequence subSequence(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Segment java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Segment java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SegmentCache javax.swing.text.SegmentCache getSharedInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.SegmentCache void releaseSegment(javax.swing.text.Segment) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SegmentCache.CachedSegment CachedSegment(javax.swing.text.SegmentCache.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet boolean isEqual(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet void addAttributes(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet void removeAttributes(java.util.Enumeration&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet EmptyAttributeSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_-&gt;false;_,!null-&gt;false;_,null-&gt;false;null,_-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean isDefined(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean isDefined(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean isEqual(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet int getAttributeCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet java.lang.Object getAttribute(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet java.lang.Object getAttribute(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet java.util.Enumeration getAttributeNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet javax.swing.text.AttributeSet copyAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.SimpleAttributeSet.EmptyAttributeSet javax.swing.text.AttributeSet getResolveParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StringContent int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StringContent java.lang.String getString(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent java.util.Vector getPositionsInRange(java.util.Vector, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StringContent java.util.Vector getPositionsInRange(java.util.Vector, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent javax.swing.text.Position createPosition(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent javax.swing.undo.UndoableEdit remove(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent void getChars(int, int, javax.swing.text.Segment) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent void updateUndoPositions(java.util.Vector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent.RemoveUndo RemoveUndo(javax.swing.text.StringContent, int, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent.RemoveUndo RemoveUndo(javax.swing.text.StringContent, int, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent.StickyPosition StickyPosition(javax.swing.text.StringContent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent.StickyPosition int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StringContent.StickyPosition java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StringContent.UndoPosRef UndoPosRef(javax.swing.text.StringContent, javax.swing.text.StringContent.PosRec) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants boolean isBold(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants boolean isItalic(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants boolean isStrikeThrough(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants boolean isSubscript(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants boolean isSuperscript(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants boolean isUnderline(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants float getFirstLineIndent(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants float getLeftIndent(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants float getLineSpacing(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants float getRightIndent(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants float getSpaceAbove(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants float getSpaceBelow(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants int getAlignment(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants int getBidiLevel(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants int getFontSize(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants java.awt.Color getBackground(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants java.awt.Color getForeground(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants java.awt.Component getComponent(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants java.lang.String getFontFamily(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyleConstants javax.swing.Icon getIcon(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants javax.swing.text.TabSet getTabSet(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setAlignment(javax.swing.text.MutableAttributeSet, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setBackground(javax.swing.text.MutableAttributeSet, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setBidiLevel(javax.swing.text.MutableAttributeSet, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setBold(javax.swing.text.MutableAttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setComponent(javax.swing.text.MutableAttributeSet, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setFirstLineIndent(javax.swing.text.MutableAttributeSet, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setFontFamily(javax.swing.text.MutableAttributeSet, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setFontSize(javax.swing.text.MutableAttributeSet, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setForeground(javax.swing.text.MutableAttributeSet, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setIcon(javax.swing.text.MutableAttributeSet, javax.swing.Icon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setItalic(javax.swing.text.MutableAttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setLeftIndent(javax.swing.text.MutableAttributeSet, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setLineSpacing(javax.swing.text.MutableAttributeSet, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setRightIndent(javax.swing.text.MutableAttributeSet, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setSpaceAbove(javax.swing.text.MutableAttributeSet, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setSpaceBelow(javax.swing.text.MutableAttributeSet, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setStrikeThrough(javax.swing.text.MutableAttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setSubscript(javax.swing.text.MutableAttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setSuperscript(javax.swing.text.MutableAttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setTabSet(javax.swing.text.MutableAttributeSet, javax.swing.text.TabSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants void setUnderline(javax.swing.text.MutableAttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleConstants.CharacterConstants CharacterConstants(java.lang.String, javax.swing.text.StyleConstants.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleConstants.ColorConstants ColorConstants(java.lang.String, javax.swing.text.StyleConstants.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleConstants.FontConstants FontConstants(java.lang.String, javax.swing.text.StyleConstants.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleConstants.ParagraphConstants ParagraphConstants(java.lang.String, javax.swing.text.StyleConstants.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext int getCompressionThreshold()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyleContext java.awt.Color getBackground(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext java.awt.Color getForeground(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext java.awt.Font getFont(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext java.lang.Object getStaticAttribute(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext java.lang.Object getStaticAttribute(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext java.lang.Object getStaticAttributeKey(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext java.lang.Object getStaticAttributeKey(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttribute(javax.swing.text.AttributeSet, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet getEmptySet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttribute(javax.swing.text.AttributeSet, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, java.util.Enumeration&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.MutableAttributeSet createLargeAttributeSet(javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.Style addStyle(java.lang.String, javax.swing.text.Style) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.Style addStyle(java.lang.String, javax.swing.text.Style) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.Style addStyle(java.lang.String, javax.swing.text.Style)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.StyleContext.SmallAttributeSet createSmallAttributeSet(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext javax.swing.text.StyleContext.SmallAttributeSet createSmallAttributeSet(javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void readAttributeSet(java.io.ObjectInputStream, javax.swing.text.MutableAttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void readAttributes(java.io.ObjectInputStream, javax.swing.text.MutableAttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void reclaim(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext void registerStaticAttributeKey(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void writeAttributeSet(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void writeAttributeSet(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void writeAttributes(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void writeAttributes(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.FontKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.FontKey boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyleContext.FontKey void setValue(java.lang.String, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.KeyBuilder java.lang.Object[] createTable()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.KeyBuilder void addAttributes(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.KeyBuilder void initialize(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.KeyBuilder void initialize(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.KeyBuilder void removeAttributes(java.util.Enumeration) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.KeyBuilder void removeAttributes(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.KeyEnumeration boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext, java.lang.String, javax.swing.text.Style) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext, java.lang.String, javax.swing.text.Style) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext, java.lang.String, javax.swing.text.Style) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext, javax.swing.text.Style) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext, javax.swing.text.Style) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle javax.swing.text.AttributeSet copyAttributes()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle void setName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle void setResolveParent(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.NamedStyle void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet SmallAttributeSet(javax.swing.text.StyleContext, javax.swing.text.AttributeSet) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet boolean isEqual(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet int getAttributeCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet java.lang.Object getLocalAttribute(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet java.util.Enumeration&lt;?&gt; getAttributeNames()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet javax.swing.text.AttributeSet copyAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyleContext.SmallAttributeSet javax.swing.text.AttributeSet getResolveParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyledEditorKit java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit javax.swing.Action[] getActions()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit javax.swing.text.Document createDefaultDocument()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit javax.swing.text.Element getCharacterAttributeRun()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyledEditorKit javax.swing.text.MutableAttributeSet getInputAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyledEditorKit javax.swing.text.ViewFactory getViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyledEditorKit void createInputAttributes(javax.swing.text.Element, javax.swing.text.MutableAttributeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit void deinstall(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit void install(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.1 java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.1 javax.swing.text.AttributeSet getResolveParent()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.AttributeTracker void caretUpdate(javax.swing.event.CaretEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.AttributeTracker void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.AttributeTracker void updateInputAttributes(int, int, javax.swing.text.JTextComponent) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.JEditorPane getEditor(java.awt.event.ActionEvent)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.text.StyledDocument getStyledDocument(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.text.StyledEditorKit getStyledEditorKit(javax.swing.JEditorPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.StyledTextAction void setCharacterAttributes(javax.swing.JEditorPane, javax.swing.text.AttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.StyledTextAction void setParagraphAttributes(javax.swing.JEditorPane, javax.swing.text.AttributeSet, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.StyledViewFactory StyledViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.StyledEditorKit.StyledViewFactory javax.swing.text.View create(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.StyledEditorKit.StyledViewFactory javax.swing.text.View create(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TabSet TabSet(javax.swing.text.TabStop[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TabSet boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TabSet int getTabCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TabSet int getTabIndex(javax.swing.text.TabStop) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TabSet java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TabSet javax.swing.text.TabStop getTabAfter(float)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TabStop boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TabStop boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TabStop float getPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TabStop int getAlignment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TabStop int getLeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TabStop java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView int getColumnCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView int getColumnSpan(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView int getColumnsOccupied(javax.swing.text.View) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView int getRowsOccupied(javax.swing.text.View) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView java.util.BitSet access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TableView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView javax.swing.text.TableView.TableCell createTableCell(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView javax.swing.text.TableView.TableRow createTableRow(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView javax.swing.text.TableView.TableRow getRow(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TableView javax.swing.text.View getViewAtPosition(int, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TableView javax.swing.text.View getViewAtPosition(int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TableView void checkMultiColumnCell(int, int, int, javax.swing.text.View) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView void checkSingleColumnCell(int, int, javax.swing.text.View) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView void layoutColumns(int, int[], int[], javax.swing.SizeRequirements[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView void layoutColumns(int, int[], int[], javax.swing.SizeRequirements[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TableView void replace(int, int, javax.swing.text.View[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TableView.TableCell int getColumnCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView.TableCell int getGridColumn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView.TableCell int getGridRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView.TableCell int getRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView.TableRow int getResizeWeight(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView.TableRow int getRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TableView.TableRow javax.swing.text.View getViewAtPosition(int, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TableView.TableRow javax.swing.text.View getViewAtPosition(int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TableView.TableRow void replace(int, int, javax.swing.text.View[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextAction javax.swing.Action[] augmentList(javax.swing.Action[], javax.swing.Action[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextAction javax.swing.Action[] augmentList(javax.swing.Action[], javax.swing.Action[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextAction javax.swing.Action[] augmentList(javax.swing.Action[], javax.swing.Action[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextAction javax.swing.text.JTextComponent getTextComponent(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy int getLimitingOffset(javax.swing.text.View, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy int layoutRow(javax.swing.text.FlowView, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy javax.swing.text.View createView(javax.swing.text.FlowView, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy javax.swing.text.View createView(javax.swing.text.FlowView, int, int, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void adjustRow(javax.swing.text.FlowView, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void adjustRow(javax.swing.text.FlowView, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void layout(javax.swing.text.FlowView) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy void sync(javax.swing.text.FlowView) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment int getRunLimit(java.text.AttributedCharacterIterator.Attribute) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment int getRunLimit(java.util.Set&lt;? extends java.text.AttributedCharacterIterator.Attribute&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment int getRunStart(java.text.AttributedCharacterIterator.Attribute) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment int getRunStart(java.util.Set&lt;? extends java.text.AttributedCharacterIterator.Attribute&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment java.awt.Font getFont(int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment java.lang.Object getAttribute(java.text.AttributedCharacterIterator.Attribute) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment java.lang.Object getAttribute(java.text.AttributedCharacterIterator.Attribute)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment java.util.Map&lt;java.text.AttributedCharacterIterator.Attribute,java.lang.Object&gt; getAttributes()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment java.util.Set&lt;java.text.AttributedCharacterIterator.Attribute&gt; getAllAttributeKeys()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment javax.swing.text.View getView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment void access$000(javax.swing.text.TextLayoutStrategy.AttributedSegment, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.TextLayoutStrategy.AttributedSegment void setView(javax.swing.text.View) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities Utilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Utilities boolean isComposedTextAttributeDefined(javax.swing.text.AttributeSet) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities boolean isComposedTextAttributeDefined(javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.Utilities boolean isComposedTextElement(javax.swing.text.Document, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities boolean isComposedTextElement(javax.swing.text.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities boolean isLeftToRight(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawComposedText(javax.swing.text.View, javax.swing.text.AttributeSet, java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int drawComposedText(javax.swing.text.View, javax.swing.text.AttributeSet, java.awt.Graphics, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawComposedText(javax.swing.text.View, javax.swing.text.AttributeSet, java.awt.Graphics, int, int, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int, int[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int, int[]) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int, int[]) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getBreakLocation(javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getBreakLocation(javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getNextVisualPositionFrom(javax.swing.text.View, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getNextWord(javax.swing.text.JTextComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getNextWordInParagraph(javax.swing.text.JTextComponent, javax.swing.text.Element, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getNextWordInParagraph(javax.swing.text.JTextComponent, javax.swing.text.Element, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getPositionAbove(javax.swing.text.JTextComponent, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getPositionBelow(javax.swing.text.JTextComponent, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getPrevWordInParagraph(javax.swing.text.JTextComponent, javax.swing.text.Element, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getPrevWordInParagraph(javax.swing.text.JTextComponent, javax.swing.text.Element, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getPreviousWord(javax.swing.text.JTextComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getRowEnd(javax.swing.text.JTextComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getRowStart(javax.swing.text.JTextComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int, boolean) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int, boolean, int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int, boolean, int[]) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int, boolean, int[]) 8">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int, int[]) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int, int[]) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int, int[]) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int, int[]) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities int getWordEnd(javax.swing.text.JTextComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities int getWordStart(javax.swing.text.JTextComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities javax.swing.JComponent getJComponent(javax.swing.text.View) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities javax.swing.JComponent getJComponent(javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities javax.swing.text.Element getParagraphElement(javax.swing.text.JTextComponent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.Utilities javax.swing.text.Element getParagraphElement(javax.swing.text.JTextComponent, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.Utilities void paintComposedText(java.awt.Graphics, java.awt.Rectangle, javax.swing.text.GlyphView) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View boolean isVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.View boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;true;_,!null,_-&gt;true;_,_,!null-&gt;true;_,null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View float getAlignment(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View int getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View int getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View int getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.View int getResizeWeight(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View int getViewCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View int getViewIndex(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View int getViewIndex(int, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View java.awt.Container getContainer()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View java.awt.Shape getChildAllocation(int, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View java.awt.Shape getChildAllocation(int, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,!null-&gt;null;_,null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View java.awt.Shape modelToView(int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.View java.lang.String getToolTipText(float, float, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View javax.swing.text.Element getElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View javax.swing.text.View breakView(int, int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.View javax.swing.text.View createFragment(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.View javax.swing.text.View getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View javax.swing.text.View getView(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View javax.swing.text.ViewFactory getViewFactory()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View void forwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.View void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.View void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.View void preferenceChanged(javax.swing.text.View, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View void replace(int, int, javax.swing.text.View[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View void replace(int, int, javax.swing.text.View[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View void setSize(float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.View void updateLayout(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View void updateLayout(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.View void updateLayout(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WhitespaceBasedBreakIterator int current()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.WhitespaceBasedBreakIterator java.text.CharacterIterator getText()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WhitespaceBasedBreakIterator void setText(java.text.CharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView float nextTabStop(float, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.WrappedPlainView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView int drawText(javax.swing.text.Element, int, int, java.awt.Graphics, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView int drawUnselectedText(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView void loadChildren(javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView void paint(java.awt.Graphics, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView void updateChildren(javax.swing.event.DocumentEvent, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView void updateChildren(javax.swing.event.DocumentEvent, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine int[] getLineEnds()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void paint(java.awt.Graphics, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void update(javax.swing.event.DocumentEvent, java.awt.Shape) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.WrappedPlainView.WrappedLine void update(javax.swing.event.DocumentEvent, java.awt.Shape) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ZoneView boolean isZoneLoaded(javax.swing.text.View) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ZoneView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ZoneView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ZoneView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ZoneView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null,_,_-&gt;false;_,!null,_-&gt;false;_,_,!null-&gt;false;_,_,null-&gt;false;_,null,_-&gt;false;null,_,_-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ZoneView int getMaxZonesLoaded()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ZoneView int getMaximumZoneSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ZoneView javax.swing.text.View createZone(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ZoneView void handleRemove(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ZoneView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ZoneView void loadChildren(javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ZoneView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ZoneView void unloadZone(javax.swing.text.View) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ZoneView.Zone Zone(javax.swing.text.ZoneView, javax.swing.text.Element, javax.swing.text.Position, javax.swing.text.Position) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ZoneView.Zone boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.swing.text.ZoneView.Zone boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ZoneView.Zone boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;true;_,!null,_-&gt;true;_,_,!null-&gt;true;_,null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="javax.swing.text.ZoneView.Zone int getViewIndex(int, javax.swing.text.Position.Bias) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="javax.swing.text.ZoneView.Zone void loadChildren(javax.swing.text.ViewFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
