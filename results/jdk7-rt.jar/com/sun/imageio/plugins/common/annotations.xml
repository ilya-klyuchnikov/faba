<root>
  <item name="com.sun.imageio.plugins.common.BogusColorSpace float[] fromCIEXYZ(float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.BogusColorSpace float[] fromCIEXYZ(float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.BogusColorSpace float[] fromRGB(float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.BogusColorSpace float[] fromRGB(float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.BogusColorSpace float[] toCIEXYZ(float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.BogusColorSpace float[] toCIEXYZ(float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.BogusColorSpace float[] toRGB(float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.BogusColorSpace float[] toRGB(float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil boolean imageIsContiguous(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil boolean isBinary(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil boolean isBinary(java.awt.image.SampleModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil boolean isIndicesForGrayscale(byte[], byte[], byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil boolean isIndicesForGrayscale(byte[], byte[], byte[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil boolean isIndicesForGrayscale(byte[], byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil byte[] getPackedBinaryData(java.awt.image.Raster, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil byte[] getPackedBinaryData(java.awt.image.Raster, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil byte[] getUnpackedBinaryData(java.awt.image.Raster, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil byte[] getUnpackedBinaryData(java.awt.image.Raster, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil int getElementSize(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil java.awt.image.ColorModel createColorModel(java.awt.color.ColorSpace, java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil java.awt.image.ColorModel createColorModel(java.awt.color.ColorSpace, java.awt.image.SampleModel) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil java.awt.image.ColorModel createColorModel(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil java.lang.String convertObjectToString(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil java.lang.String convertObjectToString(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil long getBandSize(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil long getTileSize(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void canEncodeImage(javax.imageio.ImageWriter, java.awt.image.ColorModel, java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void canEncodeImage(javax.imageio.ImageWriter, java.awt.image.ColorModel, java.awt.image.SampleModel) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void canEncodeImage(javax.imageio.ImageWriter, java.awt.image.ColorModel, java.awt.image.SampleModel) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void canEncodeImage(javax.imageio.ImageWriter, javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void canEncodeImage(javax.imageio.ImageWriter, javax.imageio.ImageTypeSpecifier) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void setPackedBinaryData(byte[], java.awt.image.WritableRaster, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void setPackedBinaryData(byte[], java.awt.image.WritableRaster, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void setUnpackedBinaryData(byte[], java.awt.image.WritableRaster, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ImageUtil void setUnpackedBinaryData(byte[], java.awt.image.WritableRaster, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder PaletteBuilder(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder PaletteBuilder(java.awt.image.RenderedImage, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder boolean canCreatePalette(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder boolean canCreatePalette(javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder boolean canCreatePalette(javax.imageio.ImageTypeSpecifier)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder com.sun.imageio.plugins.common.PaletteBuilder.ColorNode freeTree(com.sun.imageio.plugins.common.PaletteBuilder.ColorNode) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder com.sun.imageio.plugins.common.PaletteBuilder.ColorNode freeTree(com.sun.imageio.plugins.common.PaletteBuilder.ColorNode)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder com.sun.imageio.plugins.common.PaletteBuilder.ColorNode insertNode(com.sun.imageio.plugins.common.PaletteBuilder.ColorNode, java.awt.Color, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder com.sun.imageio.plugins.common.PaletteBuilder.ColorNode insertNode(com.sun.imageio.plugins.common.PaletteBuilder.ColorNode, java.awt.Color, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder com.sun.imageio.plugins.common.PaletteBuilder.ColorNode insertNode(com.sun.imageio.plugins.common.PaletteBuilder.ColorNode, java.awt.Color, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder int findPaletteEntry(com.sun.imageio.plugins.common.PaletteBuilder.ColorNode, int, byte[], byte[], byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder int getBranchIndex(java.awt.Color, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder java.awt.Color getSrcColor(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder java.awt.image.IndexColorModel createIndexColorModel(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder java.awt.image.IndexColorModel getIndexColorModel()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.PaletteBuilder java.awt.image.RenderedImage createIndexedImage(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ReaderUtil int readMultiByteInteger(javax.imageio.stream.ImageInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ReaderUtil int[] computeUpdatedPixels(java.awt.Rectangle, java.awt.Point, int, int, int, int, int, int, int, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ReaderUtil int[] computeUpdatedPixels(java.awt.Rectangle, java.awt.Point, int, int, int, int, int, int, int, int, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ReaderUtil int[] computeUpdatedPixels(java.awt.Rectangle, java.awt.Point, int, int, int, int, int, int, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.ReaderUtil void computeUpdatedPixels(int, int, int, int, int, int, int, int, int, int[], int) 9">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.StandardMetadataFormat boolean canNodeAppear(java.lang.String, javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.StandardMetadataFormat boolean canNodeAppear(java.lang.String, javax.imageio.ImageTypeSpecifier) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.common.StandardMetadataFormat boolean canNodeAppear(java.lang.String, javax.imageio.ImageTypeSpecifier)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.common.StandardMetadataFormatResources java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.common.SubImageInputStream SubImageInputStream(javax.imageio.stream.ImageInputStream, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
