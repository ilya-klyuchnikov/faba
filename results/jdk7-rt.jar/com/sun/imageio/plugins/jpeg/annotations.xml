<root>
  <item name="com.sun.imageio.plugins.jpeg.AdobeMarkerSegment AdobeMarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.AdobeMarkerSegment AdobeMarkerSegment(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.AdobeMarkerSegment javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.AdobeMarkerSegment void updateFromNativeNode(org.w3c.dom.Node, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.AdobeMarkerSegment void write(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.COMMarkerSegment COMMarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.COMMarkerSegment COMMarkerSegment(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.COMMarkerSegment javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.COMMarkerSegment void write(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment DHTMarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment DHTMarkerSegment(javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment DHTMarkerSegment(javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment DHTMarkerSegment(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable getHtableFromNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable getHtableFromNode(org.w3c.dom.Node)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment void addHtable(javax.imageio.plugins.jpeg.JPEGHuffmanTable, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment void write(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable Htable(com.sun.imageio.plugins.jpeg.DHTMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable Htable(com.sun.imageio.plugins.jpeg.DHTMarkerSegment, javax.imageio.plugins.jpeg.JPEGHuffmanTable, boolean, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable Htable(com.sun.imageio.plugins.jpeg.DHTMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment DQTMarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment DQTMarkerSegment(javax.imageio.plugins.jpeg.JPEGQTable[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment DQTMarkerSegment(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable getChromaForLuma(com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable getQtableFromNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable getQtableFromNode(org.w3c.dom.Node)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment void write(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable Qtable(com.sun.imageio.plugins.jpeg.DQTMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable Qtable(com.sun.imageio.plugins.jpeg.DQTMarkerSegment, javax.imageio.plugins.jpeg.JPEGQTable, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable Qtable(com.sun.imageio.plugins.jpeg.DQTMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DRIMarkerSegment DRIMarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DRIMarkerSegment javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DRIMarkerSegment void write(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DRIMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.ImageTypeIterator ImageTypeIterator(java.util.Iterator&lt;com.sun.imageio.plugins.jpeg.ImageTypeProducer&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.ImageTypeProducer ImageTypeProducer()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.ImageTypeProducer ImageTypeProducer(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment JFIFMarkerSegment()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment JFIFMarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment boolean access$102(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment boolean access$102(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,false-&gt;false;_,true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment java.awt.image.BufferedImage expandGrayThumb(java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment java.awt.image.BufferedImage expandGrayThumb(java.awt.image.BufferedImage)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment java.awt.image.BufferedImage getThumbnail(javax.imageio.stream.ImageInputStream, int, com.sun.imageio.plugins.jpeg.JPEGImageReader) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void addICC(java.awt.color.ICC_ColorSpace) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void addJFXX(com.sun.imageio.plugins.jpeg.JPEGBuffer, com.sun.imageio.plugins.jpeg.JPEGImageReader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void updateFromNativeNode(org.w3c.dom.Node, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void write(javax.imageio.stream.ImageOutputStream, java.awt.image.BufferedImage, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void write(javax.imageio.stream.ImageOutputStream, java.awt.image.BufferedImage, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void writeDefaultJFIF(javax.imageio.stream.ImageOutputStream, java.util.List, java.awt.color.ICC_Profile, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void writeICC(java.awt.color.ICC_Profile, javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void writeJFXXSegment(int, java.awt.image.BufferedImage, javax.imageio.stream.ImageOutputStream, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void writeThumb(javax.imageio.stream.ImageOutputStream, java.awt.image.BufferedImage, com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment, int, boolean, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void writeThumb(javax.imageio.stream.ImageOutputStream, java.awt.image.BufferedImage, com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment, int, boolean, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void writeThumbnailData(javax.imageio.stream.ImageOutputStream, int[], com.sun.imageio.plugins.jpeg.JPEGImageWriter) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment void writeWithThumbs(javax.imageio.stream.ImageOutputStream, java.util.List, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment ICCMarkerSegment(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment ICCMarkerSegment(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment ICCMarkerSegment(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, java.awt.color.ICC_ColorSpace) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment ICCMarkerSegment(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment boolean addData(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment void write(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.IllegalThumbException IllegalThumbException(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment JFIFExtensionMarkerSegment(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer, com.sun.imageio.plugins.jpeg.JPEGImageReader) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment JFIFExtensionMarkerSegment(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, java.awt.image.BufferedImage) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment JFIFExtensionMarkerSegment(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment void write(javax.imageio.stream.ImageOutputStream, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb JFIFThumb(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb JFIFThumb(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG JFIFThumbJPEG(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer, int, com.sun.imageio.plugins.jpeg.JPEGImageReader) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG JFIFThumbJPEG(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, java.awt.image.BufferedImage) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG JFIFThumbJPEG(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG int getLength()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG java.awt.image.BufferedImage getThumbnail(javax.imageio.stream.ImageInputStream, com.sun.imageio.plugins.jpeg.JPEGImageReader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener ThumbnailReadListener(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG, com.sun.imageio.plugins.jpeg.JPEGImageReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void imageComplete(javax.imageio.ImageReader) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void imageComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void imageProgress(javax.imageio.ImageReader, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void imageStarted(javax.imageio.ImageReader, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void imageStarted(javax.imageio.ImageReader, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void readAborted(javax.imageio.ImageReader) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void readAborted(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void sequenceComplete(javax.imageio.ImageReader) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void sequenceComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void sequenceStarted(javax.imageio.ImageReader, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void sequenceStarted(javax.imageio.ImageReader, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailComplete(javax.imageio.ImageReader) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailProgress(javax.imageio.ImageReader, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailProgress(javax.imageio.ImageReader, float)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailStarted(javax.imageio.ImageReader, int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailStarted(javax.imageio.ImageReader, int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette JFIFThumbPalette(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette JFIFThumbPalette(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, java.awt.image.BufferedImage) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette JFIFThumbPalette(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette int getLength()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette java.awt.image.BufferedImage getThumbnail(javax.imageio.stream.ImageInputStream, com.sun.imageio.plugins.jpeg.JPEGImageReader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette java.awt.image.BufferedImage getThumbnail(javax.imageio.stream.ImageInputStream, com.sun.imageio.plugins.jpeg.JPEGImageReader)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette void write(javax.imageio.stream.ImageOutputStream, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB JFIFThumbRGB(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB JFIFThumbRGB(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, java.awt.image.BufferedImage) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB JFIFThumbRGB(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB int getLength()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB java.awt.image.BufferedImage getThumbnail(javax.imageio.stream.ImageInputStream, com.sun.imageio.plugins.jpeg.JPEGImageReader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB java.awt.image.BufferedImage getThumbnail(javax.imageio.stream.ImageInputStream, com.sun.imageio.plugins.jpeg.JPEGImageReader)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB void write(javax.imageio.stream.ImageOutputStream, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed JFIFThumbUncompressed(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer, int, int, int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed JFIFThumbUncompressed(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, java.awt.image.BufferedImage) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed JFIFThumbUncompressed(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, org.w3c.dom.Node, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed int getHeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed int getWidth()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed void readByteBuffer(javax.imageio.stream.ImageInputStream, byte[], com.sun.imageio.plugins.jpeg.JPEGImageReader, float, float) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed void write(javax.imageio.stream.ImageOutputStream, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG JPEG()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG boolean isJFIFcompliant(javax.imageio.ImageTypeSpecifier, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG boolean isNonStandardICC(java.awt.color.ColorSpace) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG boolean isNonStandardICC(java.awt.color.ColorSpace)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG float convertToLinearQuality(float)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG int transformForType(javax.imageio.ImageTypeSpecifier, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG javax.imageio.plugins.jpeg.JPEGHuffmanTable[] getDefaultHuffmanTables(boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG javax.imageio.plugins.jpeg.JPEGQTable[] getDefaultQTables()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG.JCS JCS()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGBuffer JPEGBuffer(javax.imageio.stream.ImageInputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGBuffer boolean scanForFF(com.sun.imageio.plugins.jpeg.JPEGImageReader) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGBuffer void readData(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageMetadataFormat boolean canNodeAppear(java.lang.String, javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageMetadataFormatResources JPEGImageMetadataFormatResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader boolean canReadRaster()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader boolean readerSupportsThumbnails()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader java.awt.color.ColorSpace access$200(com.sun.imageio.plugins.jpeg.JPEGImageReader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader java.awt.color.ColorSpace access$200(com.sun.imageio.plugins.jpeg.JPEGImageReader)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader java.util.Iterator getImageTypes(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader java.util.Iterator getImageTypesOnThread(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader javax.imageio.ImageReadParam getDefaultReadParam()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader void initProgressData()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader void setImageData(int, int, int, int, int, byte[]) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.1 1(com.sun.imageio.plugins.jpeg.JPEGImageReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.1 javax.imageio.ImageTypeSpecifier produce()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock CallBackLock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock void access$000(com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock void access$100(com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock void lock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock void unlock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock.State State(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.JPEGReaderDisposerRecord JPEGReaderDisposerRecord(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderResources JPEGImageReaderResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderResources java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi boolean canDecodeInput(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi boolean canDecodeInput(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi java.lang.String getDescription(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi java.lang.String getDescription(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi javax.imageio.ImageReader createReaderInstance(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi javax.imageio.ImageReader createReaderInstance(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter boolean canWriteRasters()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter boolean isSubsampled(com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter boolean isSubsampled(com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter boolean jfifOK(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter boolean jfifOK(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getDefaultDestCSType(java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getDefaultDestCSType(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getDefaultDestCSType(javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getDestCSType(javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getNumThumbnailsSupported(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getNumThumbnailsSupported(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getSrcCSType(java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getSrcCSType(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int getSrcCSType(javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter int[] collectScans(com.sun.imageio.plugins.jpeg.JPEGMetadata, com.sun.imageio.plugins.jpeg.SOFMarkerSegment) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter java.awt.Dimension[] getPreferredThumbnailSizes(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter java.awt.Dimension[] getPreferredThumbnailSizes(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.ImageWriteParam getDefaultWriteParam()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.metadata.IIOMetadata convertImageMetadataOnThread(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageWriteParam) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageWriteParam) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.plugins.jpeg.JPEGHuffmanTable[] collectHTablesFromMetadata(com.sun.imageio.plugins.jpeg.JPEGMetadata, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.plugins.jpeg.JPEGQTable[] collectQTablesFromMetadata(com.sun.imageio.plugins.jpeg.JPEGMetadata) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter void checkAdobe(com.sun.imageio.plugins.jpeg.AdobeMarkerSegment, javax.imageio.ImageTypeSpecifier, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter void checkJFIF(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment, javax.imageio.ImageTypeSpecifier, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter void checkSOFBands(com.sun.imageio.plugins.jpeg.SOFMarkerSegment, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter void prepareWriteSequence(javax.imageio.metadata.IIOMetadata) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter void prepareWriteSequenceOnThread(javax.imageio.metadata.IIOMetadata) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter void write(javax.imageio.metadata.IIOMetadata, javax.imageio.IIOImage, javax.imageio.ImageWriteParam) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter void writeOnThread(javax.imageio.metadata.IIOMetadata, javax.imageio.IIOImage, javax.imageio.ImageWriteParam) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock CallBackLock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock void access$000(com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock void access$100(com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock void lock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock void unlock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock.State State(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.JPEGWriterDisposerRecord JPEGWriterDisposerRecord(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterResources JPEGImageWriterResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterResources java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi boolean isFormatLossless()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi java.lang.String getDescription(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi java.lang.String getDescription(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi javax.imageio.ImageWriter createWriterInstance(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi javax.imageio.ImageWriter createWriterInstance(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata JPEGMetadata(javax.imageio.ImageWriteParam, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata boolean isReadOnly()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata boolean wantAlpha(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata com.sun.imageio.plugins.jpeg.MarkerSegment findMarkerSegment(java.lang.Class, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata java.awt.Point findIntegerRatio(float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata javax.imageio.metadata.IIOMetadataNode getStandardDimensionNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata org.w3c.dom.Node getAsTree(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeDHTNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeDQTNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeJFIFsubtree(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeNativeTree(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeSequenceSubtree(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardChromaNode(org.w3c.dom.Node, org.w3c.dom.NodeList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardCompressionNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardCompressionNode(org.w3c.dom.Node)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardDataNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardDataNode(org.w3c.dom.Node)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardDocumentNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardDocumentNode(org.w3c.dom.Node)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardTextNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardTree(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeTree(java.lang.String, org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeTree(java.lang.String, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeUnknownNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void setFromMarkerSequenceNode(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void setFromNativeTree(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void setFromTree(java.lang.String, org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void setFromTree(java.lang.String, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void writeToStream(javax.imageio.stream.ImageOutputStream, boolean, boolean, java.util.List, java.awt.color.ICC_Profile, boolean, int, com.sun.imageio.plugins.jpeg.JPEGImageWriter) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadataFormat JPEGMetadataFormat(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadataFormat boolean canNodeAppear(java.lang.String, javax.imageio.ImageTypeSpecifier) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadataFormat boolean isInSubtree(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadataFormat boolean isInSubtree(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadataFormatResources JPEGMetadataFormatResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGStreamMetadataFormat boolean canNodeAppear(java.lang.String, javax.imageio.ImageTypeSpecifier) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGStreamMetadataFormatResources JPEGStreamMetadataFormatResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment MarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment MarkerSegment(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment MarkerSegment(org.w3c.dom.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment void loadData(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment void printTag(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment void write2bytes(javax.imageio.stream.ImageOutputStream, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment void writeTag(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment SOFMarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec getComponentSpec(byte, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment int getIDencodedCSType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment void updateFromNativeNode(org.w3c.dom.Node, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment void write(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec ComponentSpec(com.sun.imageio.plugins.jpeg.SOFMarkerSegment, byte, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec ComponentSpec(com.sun.imageio.plugins.jpeg.SOFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec ComponentSpec(com.sun.imageio.plugins.jpeg.SOFMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment SOSMarkerSegment(com.sun.imageio.plugins.jpeg.JPEGBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec getScanComponentSpec(byte, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment void updateFromNativeNode(org.w3c.dom.Node, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment void write(javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec ScanComponentSpec(com.sun.imageio.plugins.jpeg.SOSMarkerSegment, byte, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec ScanComponentSpec(com.sun.imageio.plugins.jpeg.SOSMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec ScanComponentSpec(com.sun.imageio.plugins.jpeg.SOSMarkerSegment, org.w3c.dom.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec javax.imageio.metadata.IIOMetadataNode getNativeNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
