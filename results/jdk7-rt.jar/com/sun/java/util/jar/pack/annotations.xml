<root>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding boolean isCodableLength(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding boolean isTrivial()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding int getKBOf(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding int getKXOf(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding int parseMetaCoding(byte[], int, com.sun.java.util.jar.pack.Coding, com.sun.java.util.jar.pack.CodingMethod[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding java.lang.String keyString(com.sun.java.util.jar.pack.CodingMethod) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding void makeMetaCoding(com.sun.java.util.jar.pack.AdaptiveCoding, com.sun.java.util.jar.pack.Coding, java.io.ByteArrayOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding void makeMetaCoding(com.sun.java.util.jar.pack.AdaptiveCoding, com.sun.java.util.jar.pack.Coding, java.io.ByteArrayOutputStream) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding void readArray(com.sun.java.util.jar.pack.AdaptiveCoding, java.io.InputStream, int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding void writeArray(com.sun.java.util.jar.pack.AdaptiveCoding, java.io.OutputStream, int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute Attribute(com.sun.java.util.jar.pack.Attribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute boolean isCanonical()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute boolean isDigit(char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute byte[] bytes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute addContent(byte[], java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute addContent(byte[], java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute define(java.util.Map&lt;com.sun.java.util.jar.pack.Attribute.Layout,com.sun.java.util.jar.pack.Attribute&gt;, int, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute define(java.util.Map&lt;com.sun.java.util.jar.pack.Attribute.Layout,com.sun.java.util.jar.pack.Attribute&gt;, int, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute define(java.util.Map&lt;com.sun.java.util.jar.pack.Attribute.Layout,com.sun.java.util.jar.pack.Attribute&gt;, int, java.lang.String, java.lang.String) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute find(int, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute find(int, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute lookup(java.util.Map&lt;com.sun.java.util.jar.pack.Attribute.Layout,com.sun.java.util.jar.pack.Attribute&gt;, int, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute lookup(java.util.Map&lt;com.sun.java.util.jar.pack.Attribute.Layout,com.sun.java.util.jar.pack.Attribute&gt;, int, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute.Layout keyForLookup(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute.Layout keyForLookup(int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute.Layout layout()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute.Layout.Element matchCase(com.sun.java.util.jar.pack.Attribute.Layout.Element, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute.Layout.Element[] tokenizeLayout(com.sun.java.util.jar.pack.Attribute.Layout, int, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute.Layout.Element[] tokenizeLayout(com.sun.java.util.jar.pack.Attribute.Layout, int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int findCaseDash(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int parseInt(com.sun.java.util.jar.pack.Attribute.Layout.Element, byte[], int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int parseInt(com.sun.java.util.jar.pack.Attribute.Layout.Element, byte[], int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int parseIntAfter(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int parseUsing(com.sun.java.util.jar.pack.Attribute.Layout.Element[], com.sun.java.util.jar.pack.Attribute.Holder, byte[], int, int, com.sun.java.util.jar.pack.Attribute.ValueStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int size()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int skipBody(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int tokenizeSInt(com.sun.java.util.jar.pack.Attribute.Layout.Element, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int tokenizeUInt(com.sun.java.util.jar.pack.Attribute.Layout.Element, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String contextName(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String expandCaseDashNotation(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String expandCaseDashNotation(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String normalizeLayoutString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String normalizeLayoutString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String[] splitBodies(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String[] splitBodies(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute void tokenizeLayout(com.sun.java.util.jar.pack.Attribute.Layout, int, java.lang.String, java.util.List&lt;com.sun.java.util.jar.pack.Attribute.Layout.Element&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute void unparseInt(com.sun.java.util.jar.pack.Attribute.Layout.Element, int, java.io.ByteArrayOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute void unparseUsing(com.sun.java.util.jar.pack.Attribute.Layout.Element[], java.lang.Object[], com.sun.java.util.jar.pack.Attribute.ValueStream, java.io.ByteArrayOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.1 int encodeBCI(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.1 void putInt(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.FormatException FormatException(java.lang.String, int, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.FormatException FormatException(java.lang.String, int, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Holder Holder()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Holder com.sun.java.util.jar.pack.Attribute getAttribute(com.sun.java.util.jar.pack.Attribute.Layout) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Holder com.sun.java.util.jar.pack.Attribute getAttribute(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Holder com.sun.java.util.jar.pack.Attribute removeAttribute(com.sun.java.util.jar.pack.Attribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Holder java.util.List&lt;com.sun.java.util.jar.pack.Attribute&gt; getAttributes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Holder void setAttributes(java.util.List&lt;com.sun.java.util.jar.pack.Attribute&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout Layout()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout Layout(int, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout Layout(int, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean equals(com.sun.java.util.jar.pack.Attribute.Layout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean equals(com.sun.java.util.jar.pack.Attribute.Layout)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean hasCallables()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout com.sun.java.util.jar.pack.Attribute canonicalInstance()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout com.sun.java.util.jar.pack.Attribute.Layout makeKey(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout com.sun.java.util.jar.pack.Attribute.Layout makeKey(int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout com.sun.java.util.jar.pack.Attribute.Layout makeKey(int, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout com.sun.java.util.jar.pack.Attribute.Layout makeKey(int, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout com.sun.java.util.jar.pack.Attribute.Layout makeKey(int, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout int ctype()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout java.lang.String layout()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout java.lang.String stringForDebug()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout.Element Element(com.sun.java.util.jar.pack.Attribute.Layout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout.Element boolean flagTest(byte)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout.Element boolean hasBand()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout.Element java.lang.String stringForDebug()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream ValueStream()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream java.lang.RuntimeException undef()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream void noteBackCall(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream void putRef(int, com.sun.java.util.jar.pack.ConstantPool.Entry) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$000(com.sun.java.util.jar.pack.BandStructure) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$000(com.sun.java.util.jar.pack.BandStructure)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$100(com.sun.java.util.jar.pack.BandStructure, com.sun.java.util.jar.pack.BandStructure.Band, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$100(com.sun.java.util.jar.pack.BandStructure, com.sun.java.util.jar.pack.BandStructure.Band, java.io.OutputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$100(com.sun.java.util.jar.pack.BandStructure, com.sun.java.util.jar.pack.BandStructure.Band, java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_-&gt;true;_,_,!null-&gt;true;_,_,null-&gt;true;_,null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$200(com.sun.java.util.jar.pack.BandStructure, com.sun.java.util.jar.pack.BandStructure.Band, java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$200(com.sun.java.util.jar.pack.BandStructure, com.sun.java.util.jar.pack.BandStructure.Band, java.io.InputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$200(com.sun.java.util.jar.pack.BandStructure, com.sun.java.util.jar.pack.BandStructure.Band, java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$400(com.sun.java.util.jar.pack.BandStructure, com.sun.java.util.jar.pack.BandStructure.CPRefBand) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean access$400(com.sun.java.util.jar.pack.BandStructure, com.sun.java.util.jar.pack.BandStructure.CPRefBand) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertBandOKForElem(com.sun.java.util.jar.pack.BandStructure.Band[], com.sun.java.util.jar.pack.Attribute.Layout.Element) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertBandOKForElem(com.sun.java.util.jar.pack.BandStructure.Band[], com.sun.java.util.jar.pack.Attribute.Layout.Element)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertBandOKForElems(com.sun.java.util.jar.pack.BandStructure.Band[], com.sun.java.util.jar.pack.Attribute.Layout.Element[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertBandOKForElems(com.sun.java.util.jar.pack.BandStructure.Band[], com.sun.java.util.jar.pack.Attribute.Layout.Element[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertCanChangeLength(com.sun.java.util.jar.pack.BandStructure.Band) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertCanChangeLength(com.sun.java.util.jar.pack.BandStructure.Band)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertDoneDisbursing(com.sun.java.util.jar.pack.BandStructure.Band) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertDoneDisbursing(com.sun.java.util.jar.pack.BandStructure.Band)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertPhase(com.sun.java.util.jar.pack.BandStructure.Band, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertReadyToReadFrom(com.sun.java.util.jar.pack.BandStructure.Band, java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertReadyToReadFrom(com.sun.java.util.jar.pack.BandStructure.Band, java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertReadyToWriteTo(com.sun.java.util.jar.pack.BandStructure.Band, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertReadyToWriteTo(com.sun.java.util.jar.pack.BandStructure.Band, java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertValidCPRefs(com.sun.java.util.jar.pack.BandStructure.CPRefBand) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean notePrevForAssert(com.sun.java.util.jar.pack.BandStructure.Band, com.sun.java.util.jar.pack.BandStructure.Band)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean phaseIsRead(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean testBit(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean testBit(long, long)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure byte[] realloc(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure byte[] realloc(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.Attribute.Layout predefineAttribute(int, int, com.sun.java.util.jar.pack.BandStructure.Band[], java.lang.String, java.lang.String) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.Attribute.Layout predefineAttribute(int, int, com.sun.java.util.jar.pack.BandStructure.Band[], java.lang.String, java.lang.String) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.Attribute.Layout predefineAttribute(int, java.lang.String, com.sun.java.util.jar.pack.BandStructure.MultiBand, com.sun.java.util.jar.pack.Attribute) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.Attribute.Layout predefineAttribute(int, java.lang.String, com.sun.java.util.jar.pack.BandStructure.MultiBand, com.sun.java.util.jar.pack.Attribute) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.BandStructure.Band newElemBand(com.sun.java.util.jar.pack.Attribute.Layout.Element, java.lang.String, com.sun.java.util.jar.pack.BandStructure.MultiBand) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.BandStructure.Band newElemBand(com.sun.java.util.jar.pack.Attribute.Layout.Element, java.lang.String, com.sun.java.util.jar.pack.BandStructure.MultiBand) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.BandStructure.Band[] makeNewAttributeBands(java.lang.String, com.sun.java.util.jar.pack.Attribute.Layout, com.sun.java.util.jar.pack.BandStructure.MultiBand) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.BandStructure.Band[] makeNewAttributeBands(java.lang.String, com.sun.java.util.jar.pack.Attribute.Layout, com.sun.java.util.jar.pack.BandStructure.MultiBand) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.BandStructure.IntBand getAttrBand(com.sun.java.util.jar.pack.BandStructure.MultiBand, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.Coding codingForIndex(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.CodingMethod chooseCoding(int[], int, int, com.sun.java.util.jar.pack.Coding, java.lang.String, int[]) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.ConstantPool.Entry decodeRef(int, com.sun.java.util.jar.pack.ConstantPool.Index) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int decodeEscapeValue(int, com.sun.java.util.jar.pack.Coding) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int encodeEscapeValue(int, com.sun.java.util.jar.pack.Coding) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int encodeRef(com.sun.java.util.jar.pack.ConstantPool.Entry, com.sun.java.util.jar.pack.ConstantPool.Index) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int encodeRef(com.sun.java.util.jar.pack.ConstantPool.Entry, com.sun.java.util.jar.pack.ConstantPool.Index) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int getIntTotal(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int getIntTotal(int[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int getLabel(com.sun.java.util.jar.pack.BandStructure.IntBand, com.sun.java.util.jar.pack.Code, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int getLabel(com.sun.java.util.jar.pack.BandStructure.IntBand, com.sun.java.util.jar.pack.Code, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int parseMetaCoding(byte[], int, com.sun.java.util.jar.pack.Coding, com.sun.java.util.jar.pack.CodingMethod[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int setAttributeLayoutIndex(com.sun.java.util.jar.pack.Attribute.Layout, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int setBit(int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int shortCodeHeader(com.sun.java.util.jar.pack.Code) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int[] realloc(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int[] realloc(int[], int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(com.sun.java.util.jar.pack.BandStructure.Band, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(com.sun.java.util.jar.pack.BandStructure.Band, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(com.sun.java.util.jar.pack.BandStructure.Band, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(com.sun.java.util.jar.pack.ConstantPool.Index, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(com.sun.java.util.jar.pack.ConstantPool.Index, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(com.sun.java.util.jar.pack.ConstantPool.Index, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(java.lang.String, int, java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(java.lang.String, int, java.lang.String, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(java.lang.String, int, java.lang.String, java.lang.Object) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.io.OutputStream getDumpStream(java.lang.String, int, java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.lang.Object[] realloc(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure java.lang.Object[] realloc(java.lang.Object[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure long setBit(long, long, boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure short[] parseClassFileVersionAttr(com.sun.java.util.jar.pack.Attribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure short[] parseClassFileVersionAttr(com.sun.java.util.jar.pack.Attribute)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure void makeNewAttributeBands(java.lang.String, com.sun.java.util.jar.pack.Attribute.Layout.Element[], com.sun.java.util.jar.pack.BandStructure.MultiBand) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure void printArrayTo(java.io.PrintStream, int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure void printCDecl(com.sun.java.util.jar.pack.BandStructure.Band) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure void putLabel(com.sun.java.util.jar.pack.BandStructure.IntBand, com.sun.java.util.jar.pack.Code, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure void putLabel(com.sun.java.util.jar.pack.BandStructure.IntBand, com.sun.java.util.jar.pack.Code, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure void setConstantValueIndex(com.sun.java.util.jar.pack.Package.Class.Field) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band Band(com.sun.java.util.jar.pack.BandStructure, java.lang.String, com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band boolean isReader()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band com.sun.java.util.jar.pack.BandStructure.Band init()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band int access$600(com.sun.java.util.jar.pack.BandStructure.Band) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band int access$600(com.sun.java.util.jar.pack.BandStructure.Band)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band int phase()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band int valuesExpected()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band java.lang.String access$500(com.sun.java.util.jar.pack.BandStructure.Band) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band java.lang.String access$500(com.sun.java.util.jar.pack.BandStructure.Band)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteBand ByteBand(com.sun.java.util.jar.pack.BandStructure, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteBand int capacity()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteBand java.io.ByteArrayOutputStream access$300(com.sun.java.util.jar.pack.BandStructure.ByteBand) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteBand java.io.ByteArrayOutputStream access$300(com.sun.java.util.jar.pack.BandStructure.ByteBand)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteBand java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteCounter java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteCounter long getCount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.CPRefBand CPRefBand(com.sun.java.util.jar.pack.BandStructure, java.lang.String, com.sun.java.util.jar.pack.Coding, byte) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.CPRefBand CPRefBand(com.sun.java.util.jar.pack.BandStructure, java.lang.String, com.sun.java.util.jar.pack.Coding, byte, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.CPRefBand CPRefBand(com.sun.java.util.jar.pack.BandStructure, java.lang.String, com.sun.java.util.jar.pack.Coding, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.CPRefBand CPRefBand(com.sun.java.util.jar.pack.BandStructure, java.lang.String, com.sun.java.util.jar.pack.Coding, java.lang.Object) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.CPRefBand int encodeRefOrNull(com.sun.java.util.jar.pack.ConstantPool.Entry, com.sun.java.util.jar.pack.ConstantPool.Index) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.CPRefBand void putRef(com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.CPRefBand void putRef(com.sun.java.util.jar.pack.ConstantPool.Entry, com.sun.java.util.jar.pack.ConstantPool.Index) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.IntBand IntBand(com.sun.java.util.jar.pack.BandStructure, java.lang.String, com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand MultiBand(com.sun.java.util.jar.pack.BandStructure, java.lang.String, com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.Band init()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.ByteBand newByteBand(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.CPRefBand newCPRefBand(java.lang.String, byte)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.CPRefBand newCPRefBand(java.lang.String, com.sun.java.util.jar.pack.Coding, byte)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.CPRefBand newCPRefBand(java.lang.String, com.sun.java.util.jar.pack.Coding, byte, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.IntBand newIntBand(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.IntBand newIntBand(java.lang.String, com.sun.java.util.jar.pack.Coding)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.MultiBand newMultiBand(java.lang.String, com.sun.java.util.jar.pack.Coding)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int bandCount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int capacity()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int length()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int size()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int valuesRemainingForDebug()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand ValueBand(com.sun.java.util.jar.pack.BandStructure, java.lang.String, com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand int capacity()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand int length()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand int valueAtForDebug(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand int valuesRemainingForDebug()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand void initializeValues(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader ClassReader(com.sun.java.util.jar.pack.Package.Class, java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader java.lang.String checkVersion(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader void readCode(com.sun.java.util.jar.pack.Code) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader void readInnerClasses(com.sun.java.util.jar.pack.Package.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader void skip(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassWriter ClassWriter(com.sun.java.util.jar.pack.Package.Class, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassWriter void writeAttributes(int, com.sun.java.util.jar.pack.Attribute.Holder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassWriter void writeCode(com.sun.java.util.jar.pack.Code) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassWriter void writeInnerClasses(com.sun.java.util.jar.pack.Package.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassWriter void writeMember(com.sun.java.util.jar.pack.Package.Class.Member, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassWriter void writeRef(com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code boolean flagsRequireCode(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code com.sun.java.util.jar.pack.Package.Class.Method getMethod()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getByte(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getInt(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getLength()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getMaxStack()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getShort(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int[] expandInstructionMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code void addFixups(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code void setInstructionMap(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code void visitRefs(int, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean canRepresent(int[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean canRepresentSigned(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean canRepresentUnsigned(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isDelta()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isFullRange()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isSigned()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isSubrange()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding byte[] getMetaCoding(com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding byte[] getMetaCoding(com.sun.java.util.jar.pack.Coding)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int B()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int H()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int L()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int S()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int bitWidth(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int byteMax(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int byteMin(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int del()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int distanceFrom(com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int getHL()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int hashCode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int max()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int min()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int parseMetaCoding(byte[], int, com.sun.java.util.jar.pack.Coding, com.sun.java.util.jar.pack.CodingMethod[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int parseMetaCoding(byte[], int, com.sun.java.util.jar.pack.Coding, com.sun.java.util.jar.pack.CodingMethod[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int readFrom(byte[], int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int readInt(byte[], int[], int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int saturate32(long)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int umax()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int umin()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding java.lang.String keyString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding java.lang.String stringForDebug()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding long toUnsigned32(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding void writeInt(byte[], int[], int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding void writeInt(byte[], int[], int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding void writeTo(byte[], int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding void writeTo(byte[], int[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding void writeTo(java.io.OutputStream, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser CodingChooser(int, com.sun.java.util.jar.pack.Coding[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser com.sun.java.util.jar.pack.CodingChooser.Choice findChoiceNear(com.sun.java.util.jar.pack.CodingChooser.Choice, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser com.sun.java.util.jar.pack.CodingChooser.Choice makeExtraChoice(com.sun.java.util.jar.pack.Coding)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser com.sun.java.util.jar.pack.CodingMethod choose(int[], com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser com.sun.java.util.jar.pack.CodingMethod choose(int[], com.sun.java.util.jar.pack.Coding, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser com.sun.java.util.jar.pack.CodingMethod choose(int[], int, int, com.sun.java.util.jar.pack.Coding, int[]) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser com.sun.java.util.jar.pack.CodingMethod stressAdaptiveCoding(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser com.sun.java.util.jar.pack.CodingMethod stressPopCoding(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser int countBytesToSizer(com.sun.java.util.jar.pack.CodingMethod, int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser int updateDistances(com.sun.java.util.jar.pack.CodingChooser.Choice) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser int[] computePopSizePrivate(com.sun.java.util.jar.pack.PopulationCoding, com.sun.java.util.jar.pack.Coding, com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser int[] computeSize(com.sun.java.util.jar.pack.CodingMethod, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser int[] computeSize(com.sun.java.util.jar.pack.CodingMethod, int[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser int[] computeSizePrivate(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser java.lang.String pct(double, double)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser void computeSize(com.sun.java.util.jar.pack.CodingMethod, int[], int, int, int[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser void computeSize(com.sun.java.util.jar.pack.CodingMethod, int[], int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser void evaluate(com.sun.java.util.jar.pack.CodingChooser.Choice) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser void tryAdaptiveCoding(com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser void tryPopulationCoding(com.sun.java.util.jar.pack.Coding) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Choice boolean isExtra()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Choice java.lang.String stringForDebug()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Choice java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Sizer int getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Sizer java.lang.String stringForDebug()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool ConstantPool()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool boolean isMemberTag(byte)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool byte numberTagOf(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry getDescriptorEntry(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry, com.sun.java.util.jar.pack.ConstantPool.SignatureEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry getDescriptorEntry(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry, com.sun.java.util.jar.pack.ConstantPool.SignatureEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry getDescriptorEntry(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry, com.sun.java.util.jar.pack.ConstantPool.Utf8Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry getDescriptorEntry(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry, com.sun.java.util.jar.pack.ConstantPool.Utf8Entry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.Index makeIndex(java.lang.String, com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.Index makeIndex(java.lang.String, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.Index makeIndex(java.lang.String, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.Index[] partition(com.sun.java.util.jar.pack.ConstantPool.Index, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.Index[] partition(com.sun.java.util.jar.pack.ConstantPool.Index, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.Index[] partitionByTag(com.sun.java.util.jar.pack.ConstantPool.Index) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.MemberEntry getMemberEntry(byte, com.sun.java.util.jar.pack.ConstantPool.ClassEntry, com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.MemberEntry getMemberEntry(byte, com.sun.java.util.jar.pack.ConstantPool.ClassEntry, com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.SignatureEntry getSignatureEntry(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry, com.sun.java.util.jar.pack.ConstantPool.ClassEntry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.SignatureEntry getSignatureEntry(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry, com.sun.java.util.jar.pack.ConstantPool.ClassEntry[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool double percent(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool int compareSignatures(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool int compareSignatures(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool int compareSignatures(java.lang.String, java.lang.String, java.lang.String[], java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool int compareSignatures(java.lang.String, java.lang.String, java.lang.String[], java.lang.String[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool int countClassParts(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool int skipClassNameChars(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool java.lang.String flattenSignature(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool java.lang.String tagName(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool java.lang.String[] structureSignature(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool void completeReferencesIn(java.util.Set&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool void sort(com.sun.java.util.jar.pack.ConstantPool.Index) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.ClassEntry boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.ClassEntry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.ClassEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry java.lang.String prettyString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry java.lang.String stringValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry java.lang.String stringValueOf(com.sun.java.util.jar.pack.ConstantPool.Entry, com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry java.lang.String stringValueOf(com.sun.java.util.jar.pack.ConstantPool.Entry, com.sun.java.util.jar.pack.ConstantPool.Entry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry java.lang.String stringValueOf(com.sun.java.util.jar.pack.ConstantPool.Entry, com.sun.java.util.jar.pack.ConstantPool.Entry)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry boolean isDoubleWord()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry boolean tagMatches(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry byte getTag()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry int superCompareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry int superCompareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index Index(java.lang.String, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index boolean contains(com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index com.sun.java.util.jar.pack.ConstantPool.Entry getEntry(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index com.sun.java.util.jar.pack.ConstantPool.Entry[] getMap()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int access$000(com.sun.java.util.jar.pack.ConstantPool.Index, com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int access$000(com.sun.java.util.jar.pack.ConstantPool.Index, com.sun.java.util.jar.pack.ConstantPool.Entry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int findIndexLocation(com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int findIndexOf(com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int indexOf(com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int indexOf(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int lastIndexOf(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int size()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index java.lang.Object get(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index java.lang.Object[] toArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index java.lang.String dumpString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index void setMap(java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.IndexGroup com.sun.java.util.jar.pack.ConstantPool.Index getMemberIndex(byte, com.sun.java.util.jar.pack.ConstantPool.ClassEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.IndexGroup int getOverloadingIndex(com.sun.java.util.jar.pack.ConstantPool.MemberEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.IndexGroup int untypedIndexOf(com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.IndexGroup void initIndexByTag(byte, com.sun.java.util.jar.pack.ConstantPool.Index) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.MemberEntry boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.MemberEntry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.MemberEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.MemberEntry java.lang.String stringValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.MemberEntry java.lang.String stringValueOf(byte, com.sun.java.util.jar.pack.ConstantPool.ClassEntry, com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.MemberEntry java.lang.String stringValueOf(byte, com.sun.java.util.jar.pack.ConstantPool.ClassEntry, com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.MemberEntry java.lang.String stringValueOf(byte, com.sun.java.util.jar.pack.ConstantPool.ClassEntry, com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.NumberEntry NumberEntry(java.lang.Number) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.NumberEntry boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.NumberEntry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.NumberEntry java.lang.Comparable literalValue()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.NumberEntry java.lang.Number numberValue()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry SignatureEntry(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry java.lang.String stringValueOf(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry, com.sun.java.util.jar.pack.ConstantPool.ClassEntry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry java.lang.String stringValueOf(com.sun.java.util.jar.pack.ConstantPool.Utf8Entry, com.sun.java.util.jar.pack.ConstantPool.ClassEntry[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.StringEntry boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.StringEntry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.StringEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry Utf8Entry(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry java.lang.String stringValue()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Constants Constants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Driver Driver()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Driver java.io.File createTempFile(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Driver java.lang.String getZipComment(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Driver java.lang.String getZipComment(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Driver java.lang.String parseCommandOptions(java.util.List&lt;java.lang.String&gt;, java.lang.String, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Driver java.lang.String parseCommandOptions(java.util.List&lt;java.lang.String&gt;, java.lang.String, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Driver void main(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.DriverResource java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean add(E) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean addAll(int, java.util.Collection&lt;? extends E&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean addAll(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean removeAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean retainAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList void add(int, E) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups Fixups(byte[], java.util.Collection) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups Fixups(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups boolean add(com.sun.java.util.jar.pack.Fixups.Fixup) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups boolean add(com.sun.java.util.jar.pack.Fixups.Fixup)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups boolean add(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups boolean add(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups boolean addAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups byte[] getBytes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int descEnd(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int descFmt(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int descLoc(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int fmtLen(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int size()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups java.lang.Object add(java.lang.Object, byte[], int, int, com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups java.lang.Object add(java.lang.Object, byte[], int, int, com.sun.java.util.jar.pack.ConstantPool.Entry)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups java.lang.Object trimToSize(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups void finishRefs(java.lang.Object, byte[], com.sun.java.util.jar.pack.ConstantPool.Index) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups void setBytes(java.lang.Object, byte[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups void visitRefs(java.lang.Object, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup com.sun.java.util.jar.pack.ConstantPool.Entry entry()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup int compareTo(com.sun.java.util.jar.pack.Fixups.Fixup) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup int format()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup int location()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Itr Itr(com.sun.java.util.jar.pack.Fixups, com.sun.java.util.jar.pack.Fixups.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Itr java.lang.Object next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram Histogram(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram Histogram(int[][]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram boolean assertWellFormed(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram boolean assertWellFormed(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram boolean isSorted(int[], int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram boolean isSorted(int[], int, boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram com.sun.java.util.jar.pack.Histogram makeByteHistogram(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram com.sun.java.util.jar.pack.Histogram makeByteHistogram(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram com.sun.java.util.jar.pack.Histogram.BitMetric getBitMetric()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowCount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowFrequency(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowLength(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowValue(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowWeight(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getTotalLength()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getTotalWeight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[] getAllFrequencies()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[] getAllValues()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[] maybeSort(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[] maybeSort(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[] sortedSlice(int[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null;null,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[][] getMatrix()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[][] makeMatrix(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[][] makeTable(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[][] normalizeMatrix(int[][]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[][] regroupHistogram(int[][], int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[][] regroupHistogram(int[][], int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram java.lang.String[] getRowTitles(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram long[] computeHistogram2Col(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram void print(java.io.PrintStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram void print(java.lang.String, java.io.PrintStream) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram void print(java.lang.String, java.io.PrintStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram void print(java.lang.String, java.lang.String[], java.io.PrintStream) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram void print(java.lang.String, java.lang.String[], java.io.PrintStream) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram void print(java.lang.String, java.lang.String[], java.io.PrintStream) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean equals(com.sun.java.util.jar.pack.Instruction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean equals(com.sun.java.util.jar.pack.Instruction)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isBranchOp(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isCPRefOp(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isFieldOp(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isInvokeInitOp(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isLocalSlotOp(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isNonstandard()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isNonstandard(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isSelfLinkerOp(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isWide()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction byte getCPRefOpTag(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction byte getCPTag()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction byte[] getBytes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction com.sun.java.util.jar.pack.ConstantPool.Entry getCPRef(com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction com.sun.java.util.jar.pack.Instruction at(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction com.sun.java.util.jar.pack.Instruction at(byte[], int, com.sun.java.util.jar.pack.Instruction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction com.sun.java.util.jar.pack.Instruction at(byte[], int, com.sun.java.util.jar.pack.Instruction) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction com.sun.java.util.jar.pack.Instruction at(byte[], int, com.sun.java.util.jar.pack.Instruction)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null;_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction com.sun.java.util.jar.pack.Instruction forceNextPC(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getBC()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getByte(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getByte(byte[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getByteAt(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getInt(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getInt(byte[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getIntAt(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getLength()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getLocalSlot()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getNextPC()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getPC()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getShort(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getShort(byte[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getShortAt(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int hashCode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction java.lang.String labstr(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction java.lang.String toString(com.sun.java.util.jar.pack.ConstantPool.Entry[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction java.lang.String toString(com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction void def(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction void def(java.lang.String, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction void opcodeChecker(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction void setByte(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction void setInt(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction void setShort(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.LookupSwitch int getLength(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch boolean equals(com.sun.java.util.jar.pack.Instruction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch boolean equals(com.sun.java.util.jar.pack.Instruction)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch boolean isNonstandard()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch boolean isWide()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch byte getCPTag()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch byte[] getBytes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch com.sun.java.util.jar.pack.ConstantPool.Entry getCPRef(com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch com.sun.java.util.jar.pack.Instruction forceNextPC(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int alignPC(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getAlignedPC()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getBC()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getByteAt(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getIntAt(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getLength()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getLocalSlot()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getNextPC()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getPC()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getShortAt(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int hashCode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch java.lang.String toString(com.sun.java.util.jar.pack.ConstantPool.Entry[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch java.lang.String toString(com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.TableSwitch int getLength(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.NativeUnpack NativeUnpack(com.sun.java.util.jar.pack.UnpackerImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.NativeUnpack long getUnpackerPtr()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.NativeUnpack void run(java.io.File, java.util.jar.JarOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.NativeUnpack void writeEntry(java.util.jar.JarOutputStream, java.lang.String, long, long, boolean, java.nio.ByteBuffer, java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.NativeUnpack void writeEntry(java.util.jar.JarOutputStream, java.lang.String, long, long, boolean, java.nio.ByteBuffer, java.nio.ByteBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package com.sun.java.util.jar.pack.Package.File newStub(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package com.sun.java.util.jar.pack.Package.File newStub(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package int getDefaultClassVersion()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package int getPackageVersion()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String access$100(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String access$100(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String fixupFileName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String fixupFileName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String getObviousSourceFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String getObviousSourceFile(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String versionStringOf(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String versionStringOf(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.lang.String[] parseInnerClassName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.util.List&lt;com.sun.java.util.jar.pack.Package.Class&gt; getClasses()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.util.List&lt;com.sun.java.util.jar.pack.Package.File&gt; getFiles()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.util.List&lt;com.sun.java.util.jar.pack.Package.InnerClass&gt; getAllInnerClasses()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package void access$000(java.util.Collection, int, java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package void addClass(com.sun.java.util.jar.pack.Package.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package void buildGlobalConstantPool(java.util.Set&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package void stripAttributeKind(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package void visitInnerClassRefs(java.util.Collection&lt;com.sun.java.util.jar.pack.Package.InnerClass&gt;, int, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.1 int compare(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.1 int compare(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class Class(com.sun.java.util.jar.pack.Package, int, com.sun.java.util.jar.pack.ConstantPool.ClassEntry, com.sun.java.util.jar.pack.ConstantPool.ClassEntry, com.sun.java.util.jar.pack.ConstantPool.ClassEntry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class Class(com.sun.java.util.jar.pack.Package, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class boolean hasInnerClasses()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class com.sun.java.util.jar.pack.ConstantPool.Entry[] getCPMap()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class com.sun.java.util.jar.pack.Package getPackage()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class int getVersion()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.io.File getFileName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.io.File getFileName(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.io.File getFileName(java.io.File)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.lang.String getObviousSourceFile()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.lang.String getVersionString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.util.List&lt;com.sun.java.util.jar.pack.Package.Class.Field&gt; getFields()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.util.List&lt;com.sun.java.util.jar.pack.Package.Class.Method&gt; getMethods()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.util.List&lt;com.sun.java.util.jar.pack.Package.InnerClass&gt; getInnerClasses()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class void setInnerClasses(java.util.Collection&lt;com.sun.java.util.jar.pack.Package.InnerClass&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class void visitRefs(int, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Field Field(com.sun.java.util.jar.pack.Package.Class, int, com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Field int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Field int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry getDescriptor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member com.sun.java.util.jar.pack.ConstantPool.Entry[] getCPMap()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member com.sun.java.util.jar.pack.Package.Class thisClass()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member void visitRefs(int, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Method Method(com.sun.java.util.jar.pack.Package.Class, int, com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Method int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Method void visitRefs(int, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File File(com.sun.java.util.jar.pack.Package, com.sun.java.util.jar.pack.ConstantPool.Utf8Entry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File File(com.sun.java.util.jar.pack.Package, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File boolean isClassStub()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File boolean isDirectory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File java.io.File getFileName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File java.io.File getFileName(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File java.io.File getFileName(java.io.File)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File java.io.InputStream getInputStream()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File void addBytes(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File void readFrom(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File void visitRefs(int, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.InnerClass boolean eq(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.InnerClass boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.InnerClass boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.InnerClass int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.InnerClass void visitRefs(int, java.util.Collection&lt;com.sun.java.util.jar.pack.ConstantPool.Entry&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader com.sun.java.util.jar.pack.Code[] buildCodeAttrs(java.util.List&lt;com.sun.java.util.jar.pack.Package.Class.Method&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader com.sun.java.util.jar.pack.Code[] buildCodeAttrs(java.util.List&lt;com.sun.java.util.jar.pack.Package.Class.Method&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader com.sun.java.util.jar.pack.ConstantPool.Entry[] reconstructLocalCPMap(com.sun.java.util.jar.pack.Package.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader com.sun.java.util.jar.pack.ConstantPool.Index initCPIndex(byte, com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader int access$000(com.sun.java.util.jar.pack.PackageReader, com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void countAttrs(int, java.util.Collection) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readAttrBands(com.sun.java.util.jar.pack.Attribute.Layout.Element[], int, int[], com.sun.java.util.jar.pack.BandStructure.Band[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readAttrs(int, java.util.Collection) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readLocalInnerClasses(com.sun.java.util.jar.pack.Package.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readMemberRefs(byte, com.sun.java.util.jar.pack.ConstantPool.Entry[], com.sun.java.util.jar.pack.BandStructure.CPRefBand, com.sun.java.util.jar.pack.BandStructure.CPRefBand) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readMemberRefs(byte, com.sun.java.util.jar.pack.ConstantPool.Entry[], com.sun.java.util.jar.pack.BandStructure.CPRefBand, com.sun.java.util.jar.pack.BandStructure.CPRefBand) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readMemberRefs(byte, com.sun.java.util.jar.pack.ConstantPool.Entry[], com.sun.java.util.jar.pack.BandStructure.CPRefBand, com.sun.java.util.jar.pack.BandStructure.CPRefBand) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readMembers(com.sun.java.util.jar.pack.Package.Class[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readSignatureBands(com.sun.java.util.jar.pack.ConstantPool.Entry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void readUtf8Bands(com.sun.java.util.jar.pack.ConstantPool.Entry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader void reconstructClass(com.sun.java.util.jar.pack.Package.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader.LimitedBuffer int read(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader.LimitedBuffer long getBytesServed()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter PackageWriter(com.sun.java.util.jar.pack.Package, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter boolean tryAlternateEncoding(int, int, char[], int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter int initOpVariant(com.sun.java.util.jar.pack.Instruction, com.sun.java.util.jar.pack.ConstantPool.Entry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter int initOpVariant(com.sun.java.util.jar.pack.Instruction, com.sun.java.util.jar.pack.ConstantPool.Entry) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter int selfOpVariant(com.sun.java.util.jar.pack.Instruction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void beginCode(com.sun.java.util.jar.pack.Code) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void visitAttributeLayoutsIn(int, com.sun.java.util.jar.pack.Attribute.Holder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeAttrs(int, com.sun.java.util.jar.pack.Attribute.Holder, com.sun.java.util.jar.pack.Package.Class) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeByteCodes(com.sun.java.util.jar.pack.Code) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeCodeHandlers(com.sun.java.util.jar.pack.Code) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeCodeHeader(com.sun.java.util.jar.pack.Code) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeLocalInnerClasses(com.sun.java.util.jar.pack.Package.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeMemberRefs(byte, com.sun.java.util.jar.pack.ConstantPool.Entry[], com.sun.java.util.jar.pack.BandStructure.CPRefBand, com.sun.java.util.jar.pack.BandStructure.CPRefBand) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeMembers(com.sun.java.util.jar.pack.Package.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeSignatureBands(com.sun.java.util.jar.pack.ConstantPool.Entry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void writeUtf8Bands(com.sun.java.util.jar.pack.ConstantPool.Entry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter.1 int compare(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter.1 int compare(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter.2 int compare(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter.2 int compare(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl java.util.SortedMap properties()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl void pack(java.util.jar.JarFile, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl void pack(java.util.jar.JarInputStream, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack DoPack(com.sun.java.util.jar.pack.PackerImpl, com.sun.java.util.jar.pack.PackerImpl.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack boolean isClassFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack boolean isMetaInfFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack boolean isMetaInfFile(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack com.sun.java.util.jar.pack.Package.File readFile(java.lang.String, java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack com.sun.java.util.jar.pack.Package.File readFile(java.lang.String, java.io.InputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack com.sun.java.util.jar.pack.Package.File readFile(java.lang.String, java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack java.util.List&lt;com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile&gt; scanJar(java.util.jar.JarFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack void flushAll(java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack void flushPackage(java.io.OutputStream, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack void run(java.util.jar.JarInputStream, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile InFile(com.sun.java.util.jar.pack.PackerImpl.DoPack, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile InFile(com.sun.java.util.jar.pack.PackerImpl.DoPack, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile InFile(com.sun.java.util.jar.pack.PackerImpl.DoPack, java.util.jar.JarEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile InFile(com.sun.java.util.jar.pack.PackerImpl.DoPack, java.util.jar.JarEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile InFile(com.sun.java.util.jar.pack.PackerImpl.DoPack, java.util.jar.JarFile, java.util.jar.JarEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile InFile(com.sun.java.util.jar.pack.PackerImpl.DoPack, java.util.jar.JarFile, java.util.jar.JarEntry) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile void copyTo(com.sun.java.util.jar.pack.Package.File) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding com.sun.java.util.jar.pack.Coding getTailCoding(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding int moreCentralSlow(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding int parseMetaCoding(byte[], int, com.sun.java.util.jar.pack.Coding, com.sun.java.util.jar.pack.CodingMethod[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding int[][] encodeValues(int[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding java.lang.String keyString(com.sun.java.util.jar.pack.CodingMethod) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding java.lang.String keyString(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding void setFavoredValues(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding void writeSequencesTo(java.io.OutputStream, int[], int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding void writeSequencesTo(java.io.OutputStream, int[], int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PropMap boolean toBoolean(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PropMap int toInteger(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PropMap java.util.List getProperties(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PropMap java.util.SortedMap&lt;java.lang.Object,java.lang.Object&gt; prefixMap(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PropMap void list(java.io.PrintStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PropMap void list(java.io.PrintWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.Object,com.sun.java.util.jar.pack.ConstantPool.LiteralEntry&gt; getLiteralEntries()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.ClassEntry&gt; getClassEntries()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry&gt; getDescriptorEntries()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.MemberEntry&gt; getMemberEntries()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.SignatureEntry&gt; getSignatureEntries()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.Utf8Entry&gt; getUtf8Entries()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.SortedMap&lt;java.lang.Object,java.lang.Object&gt; getPropMap()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl java.util.SortedMap properties()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl void unpack(java.io.File, java.util.jar.JarOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl void unpack(java.io.File, java.util.jar.JarOutputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl void unpack(java.io.InputStream, java.util.jar.JarOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl void unpack(java.io.InputStream, java.util.jar.JarOutputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl.DoUnpack DoUnpack(com.sun.java.util.jar.pack.UnpackerImpl, com.sun.java.util.jar.pack.UnpackerImpl.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl.DoUnpack void run(java.io.BufferedInputStream, java.util.jar.JarOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils Utils()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isGZIPMagic(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isGZIPMagic(byte[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isJarMagic(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isJarMagic(byte[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isPackMagic(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isPackMagic(byte[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils byte[] readMagic(java.io.BufferedInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils java.lang.String getJarEntryName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils java.lang.String getJarEntryName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils java.lang.String getVersionString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils java.lang.String zeString(java.util.zip.ZipEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils java.lang.String zeString(java.util.zip.ZipEntry)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils void copyJarFile(java.util.jar.JarFile, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils void copyJarFile(java.util.jar.JarFile, java.util.jar.JarOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils void copyJarFile(java.util.jar.JarFile, java.util.jar.JarOutputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils void copyJarFile(java.util.jar.JarInputStream, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils void copyJarFile(java.util.jar.JarInputStream, java.util.jar.JarOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils void copyJarFile(java.util.jar.JarInputStream, java.util.jar.JarOutputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils void markJarFile(java.util.jar.JarOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
