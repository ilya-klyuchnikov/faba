<root>
  <item name="com.sun.beans.finder.AbstractFinder T find(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.AbstractFinder boolean isAssignable(java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.AbstractFinder boolean isValid(T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.BeanInfoFinder boolean isValid(java.lang.Class&lt;?&gt;, java.lang.reflect.Method) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.BeanInfoFinder boolean isValid(java.lang.Class&lt;?&gt;, java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.BeanInfoFinder java.beans.BeanInfo instantiate(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.BeanInfoFinder java.beans.BeanInfo instantiate(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.BeanInfoFinder java.lang.Object instantiate(java.lang.Class, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.BeanInfoFinder java.lang.Object instantiate(java.lang.Class, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.BeanInfoFinder void setPackages(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.ClassFinder ClassFinder()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.beans.finder.ClassFinder java.lang.Class&lt;?&gt; findClass(java.lang.String, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.ClassFinder java.lang.Class&lt;?&gt; resolveClass(java.lang.String, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder boolean isVarArgs(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder boolean isVarArgs(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder boolean isVarArgs(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder boolean isVarArgs(java.lang.reflect.Member)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.Class&lt;?&gt;[] getParameters(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.Class[] getParameters(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.reflect.Constructor&lt;?&gt; findConstructor(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.reflect.Constructor&lt;?&gt; findConstructor(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder FieldFinder()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findField(java.lang.Class&lt;?&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findField(java.lang.Class&lt;?&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findInstanceField(java.lang.Class&lt;?&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findInstanceField(java.lang.Class&lt;?&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findStaticField(java.lang.Class&lt;?&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findStaticField(java.lang.Class&lt;?&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder InstanceFinder(java.lang.Class&lt;? extends T&gt;, boolean, java.lang.String, java.lang.String...) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder T find(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder T find(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder T instantiate(java.lang.Class&lt;?&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder T instantiate(java.lang.Class&lt;?&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder T instantiate(java.lang.Class&lt;?&gt;, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder T instantiate(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder T instantiate(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder void setPackages(java.lang.String...) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isValid(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isValid(java.lang.reflect.Member)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isValid(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isValid(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isVarArgs(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isVarArgs(java.lang.reflect.Member)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isVarArgs(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isVarArgs(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.Class&lt;?&gt;[] getParameters(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.Class[] getParameters(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method, java.lang.reflect.Type) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method, java.lang.reflect.Type) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findInstanceMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findInstanceMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findStaticMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findStaticMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.PersistenceDelegateFinder void setPackages(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.PrimitiveTypeMap PrimitiveTypeMap()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.beans.finder.PrimitiveWrapperMap PrimitiveWrapperMap()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.beans.finder.PrimitiveWrapperMap void replacePrimitivesWithWrappers(java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.PropertyEditorFinder java.beans.PropertyEditor instantiate(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.PropertyEditorFinder java.beans.PropertyEditor instantiate(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.PropertyEditorFinder java.lang.Object instantiate(java.lang.Class, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.PropertyEditorFinder java.lang.Object instantiate(java.lang.Class, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.PropertyEditorFinder void register(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.PropertyEditorFinder void setPackages(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.Signature boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.Signature boolean isEqual(java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.Signature boolean isEqual(java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.Signature boolean isEqual(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.beans.finder.Signature int addHashCode(int, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
</root>
