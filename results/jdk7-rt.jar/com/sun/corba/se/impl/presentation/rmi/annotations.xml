<root>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicAccessPermission DynamicAccessPermission(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicAccessPermission DynamicAccessPermission(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicAccessPermission DynamicAccessPermission(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl DynamicMethodMarshallerImpl(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl boolean allMethodsThrowRemoteException(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl boolean isAbstractInterface(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl boolean isAnyClass(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl boolean isDeclaredException(java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl boolean throwsRemote(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.ReaderWriter makeReaderWriter(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl java.lang.reflect.Method getMethod()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.1 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.1 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.1 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.1 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.11 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.12 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.13 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.13 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.14 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.14 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.2 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.2 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.2 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.2 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.3 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.3 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.3 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.3 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.4 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.4 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.4 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.4 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.5 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.5 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.5 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.5 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.6 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.6 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.6 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.6 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.7 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.7 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.7 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.7 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.8 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.8 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.8 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.8 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.9 java.lang.Object read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.9 void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.ReaderWriterBase java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicStubImpl com.sun.corba.se.spi.presentation.rmi.DynamicStub getSelf()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicStubImpl java.lang.String[] _ids()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl ExceptionHandlerImpl(java.lang.Class[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl com.sun.corba.se.impl.logging.ORBUtilSystemException access$000(com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl com.sun.corba.se.impl.logging.ORBUtilSystemException access$000(com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRW getRMIExceptionRW(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRW getRMIExceptionRW(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl java.lang.Exception readException(org.omg.CORBA.portable.ApplicationException) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl void writeException(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Exception) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWBase java.lang.Class getExceptionClass()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWBase java.lang.String getId()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWIDLImpl ExceptionRWIDLImpl(com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl, java.lang.Class) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWRMIImpl ExceptionRWRMIImpl(com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl, java.lang.Class) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWRMIImpl java.lang.Exception read(org.omg.CORBA_2_3.portable.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWRMIImpl void write(org.omg.CORBA_2_3.portable.OutputStream, java.lang.Exception) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl IDLNameTranslatorImpl(java.lang.Class[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean hasLeadingUnderscore(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean hasLeadingUnderscore(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean identifierClashesWithContainer(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean identifierClashesWithContainer(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isIDLAlphabeticChar(char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isIDLDecimalDigit(char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isIDLIdentifier(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isIDLIdentifierChar(char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isIDLKeyword(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isUnderscore(char)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl com.sun.corba.se.impl.presentation.rmi.IDLType classToIDLType(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl com.sun.corba.se.spi.presentation.rmi.IDLNameTranslator get(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl com.sun.corba.se.spi.presentation.rmi.IDLNameTranslator get(java.lang.Class[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl com.sun.corba.se.spi.presentation.rmi.IDLNameTranslator get(java.lang.Class[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.Class[] getInterfaces()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String charToUnicodeRepresentation(char)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String getExceptionId(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String getMappedContainerName(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String getPackageName(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String getUnmappedContainerName(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleCaseSensitiveCollision(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleCaseSensitiveCollision(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleContainerClash(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleContainerClash(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleIDLKeywordClash(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleIDLKeywordClash(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleIdentifier(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleIdentifier(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleIdentifier(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleIdentifier(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleLeadingUnderscore(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleLeadingUnderscore(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleOverloadedMethod(java.lang.String, java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleOverloadedMethod(java.lang.String, java.lang.reflect.Method) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleUnicodeChars(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String mangleUnicodeChars(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.reflect.Method[] getMethods()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl.IDLMethodInfo IDLMethodInfo()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl.IDLMethodInfo IDLMethodInfo(com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl.IDLMethodInfo IDLMethodInfo(com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl.1)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType boolean hasModule()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType java.lang.Class getJavaClass()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType java.lang.String getExceptionName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType java.lang.String getMemberName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType java.lang.String makeConcatenatedName(char, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType java.lang.String[] getModules()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil IDLTypesUtil()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean hasCorrespondingReadProperty(java.lang.reflect.Method, java.lang.Class, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean hasCorrespondingReadProperty(java.lang.reflect.Method, java.lang.Class, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isArray(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isCheckedException(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isEntity(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isException(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isHasCorrespondingReadProperty(java.lang.reflect.Method, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isHasCorrespondingReadProperty(java.lang.reflect.Method, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isObjectReference(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isPrimitive(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isPropertyAccessorMethod(java.lang.reflect.Method, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isRemoteException(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isRemoteExceptionOrSuperClass(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isRemoteExceptionOrSuperClass(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isValue(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean readHasCorrespondingIsProperty(java.lang.reflect.Method, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean readHasCorrespondingIsProperty(java.lang.reflect.Method, java.lang.Class) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean readHasCorrespondingIsProperty(java.lang.reflect.Method, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;false;_,!null-&gt;false;_,null-&gt;false;null,_-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean validPropertyExceptions(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil com.sun.corba.se.impl.presentation.rmi.IDLType getPrimitiveIDLTypeMapping(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil com.sun.corba.se.impl.presentation.rmi.IDLType getSpecialCaseIDLTypeMapping(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil java.lang.String getAttributeNameForProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil void validateDirectInterfaces(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil void validateExceptions(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil void validateRemoteInterface(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.InvocationHandlerFactoryImpl InvocationHandlerFactoryImpl(com.sun.corba.se.spi.presentation.rmi.PresentationManager, com.sun.corba.se.spi.presentation.rmi.PresentationManager.ClassData) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.InvocationHandlerFactoryImpl java.lang.Class[] getProxyInterfaces()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.InvocationHandlerFactoryImpl java.lang.reflect.InvocationHandler getInvocationHandler(com.sun.corba.se.spi.presentation.rmi.DynamicStub)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.InvocationHandlerFactoryImpl.CustomCompositeInvocationHandlerImpl java.lang.Object writeReplace()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl boolean useDynamicStubs()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl com.sun.corba.se.spi.presentation.rmi.DynamicMethodMarshaller getDynamicMethodMarshaller(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl com.sun.corba.se.spi.presentation.rmi.DynamicMethodMarshaller getDynamicMethodMarshaller(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactoryFactory getStubFactoryFactory(boolean)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.lang.Class[] access$100(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, java.util.Set) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.lang.Class[] access$100(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, java.util.Set) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.lang.Class[] getInterfaces(java.util.Set) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.lang.String[] access$200(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph, java.util.Set) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.lang.String[] access$200(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph, java.util.Set) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.lang.String[] access$200(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph, java.util.Set) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.lang.String[] makeTypeIds(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph, java.util.Set) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.lang.String[] makeTypeIds(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph, java.util.Set) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.util.Set access$000(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, java.lang.Class, com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.util.Set access$000(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, java.lang.Class, com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.util.Set access$000(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, java.lang.Class, com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.util.Set getRootSet(java.lang.Class, com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl java.util.Set getRootSet(java.lang.Class, com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl, com.sun.corba.se.impl.orbutil.graph.Graph) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl void addNodes(java.util.List, java.util.Set) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl ClassDataImpl(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl ClassDataImpl(com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl, java.lang.Class) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl com.sun.corba.se.spi.orbutil.proxy.InvocationHandlerFactory getInvocationHandlerFactory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl com.sun.corba.se.spi.presentation.rmi.IDLNameTranslator getIDLNameTranslator()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl java.lang.Class getMyClass()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl java.lang.String[] getTypeIds()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl java.util.Map getDictionary()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl java.lang.Class getInterface()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl java.lang.String getTypeId()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ReflectiveTie java.lang.String[] _all_interfaces(org.omg.PortableServer.POA, byte[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ReflectiveTie java.lang.String[] _all_interfaces(org.omg.PortableServer.POA, byte[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ReflectiveTie java.rmi.Remote getTarget()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ReflectiveTie org.omg.CORBA.portable.OutputStream _invoke(java.lang.String, org.omg.CORBA.portable.InputStream, org.omg.CORBA.portable.ResponseHandler) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ReflectiveTie void orb(org.omg.CORBA.ORB) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubConnectImpl StubConnectImpl()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubConnectImpl com.sun.corba.se.impl.ior.StubIORImpl connect(com.sun.corba.se.impl.ior.StubIORImpl, org.omg.CORBA.Object, org.omg.CORBA.portable.ObjectImpl, org.omg.CORBA.ORB) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubConnectImpl com.sun.corba.se.impl.ior.StubIORImpl connect(com.sun.corba.se.impl.ior.StubIORImpl, org.omg.CORBA.Object, org.omg.CORBA.portable.ObjectImpl, org.omg.CORBA.ORB)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryDynamicBase StubFactoryDynamicBase(com.sun.corba.se.spi.presentation.rmi.PresentationManager.ClassData, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryBase StubFactoryFactoryBase()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryBase java.lang.String getStubName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryBase java.lang.String getStubName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryDynamicBase boolean createsDynamicStubs()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryDynamicBase javax.rmi.CORBA.Tie getTie(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryDynamicBase javax.rmi.CORBA.Tie getTie(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryProxyImpl com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactory makeDynamicStubFactory(com.sun.corba.se.spi.presentation.rmi.PresentationManager, com.sun.corba.se.spi.presentation.rmi.PresentationManager.ClassData, java.lang.ClassLoader) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryProxyImpl com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactory makeDynamicStubFactory(com.sun.corba.se.spi.presentation.rmi.PresentationManager, com.sun.corba.se.spi.presentation.rmi.PresentationManager.ClassData, java.lang.ClassLoader) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryProxyImpl com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactory makeDynamicStubFactory(com.sun.corba.se.spi.presentation.rmi.PresentationManager, com.sun.corba.se.spi.presentation.rmi.PresentationManager.ClassData, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryStaticImpl boolean createsDynamicStubs()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryStaticImpl com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactory createStubFactory(java.lang.String, boolean, java.lang.String, java.lang.Class, java.lang.ClassLoader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryStaticImpl com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactory createStubFactory(java.lang.String, boolean, java.lang.String, java.lang.Class, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryStaticImpl javax.rmi.CORBA.Tie getTie(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryProxyImpl StubFactoryProxyImpl(com.sun.corba.se.spi.presentation.rmi.PresentationManager.ClassData, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubInvocationHandlerImpl java.lang.reflect.Proxy getProxy()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
</root>
