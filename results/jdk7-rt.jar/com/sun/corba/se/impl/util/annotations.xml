<root>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable java.lang.Object get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable java.lang.Object put(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable java.lang.Object put(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable java.lang.Object remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable java.util.Enumeration elements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtable java.util.Enumeration keys()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtableEntry IdentityHashtableEntry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.IdentityHashtableEnumerator IdentityHashtableEnumerator(com.sun.corba.se.impl.util.IdentityHashtableEntry[], boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKBridge JDKBridge()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKBridge boolean useCodebaseOnly()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKBridge java.lang.Class loadClass(java.lang.String, java.lang.String, java.lang.ClassLoader) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKBridge java.lang.String getLocalCodebase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKBridge void main(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKBridge void setLocalCodebase(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKClassLoader JDKClassLoader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKClassLoader java.lang.Class loadClass(java.lang.Class, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKClassLoader.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKClassLoader.JDKClassLoaderCache JDKClassLoaderCache(com.sun.corba.se.impl.util.JDKClassLoader.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKClassLoader.JDKClassLoaderCache java.lang.Object createKey(java.lang.String, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKClassLoader.JDKClassLoaderCache.CacheKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.JDKClassLoader.JDKClassLoaderCache.CacheKey boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.ORBProperties ORBProperties()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.ORBProperties void main(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker PackagePrefixChecker()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker boolean hasBeenPrefixed(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker boolean hasBeenPrefixed(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker boolean hasOffendingPrefix(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker boolean hasOffendingPrefix(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker boolean isOffendingPackage(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker boolean isOffendingPackage(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker java.lang.String correctPackageName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker java.lang.String packagePrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker java.lang.String withoutPackagePrefix(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.PackagePrefixChecker java.lang.String withoutPackagePrefix(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isAbstractBase(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isAnyRequired(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isAnyRequired(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isChunkedEncoding(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isCodeBasePresent(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isIDLType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isRMIValueType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isSequence()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId boolean isSupportedFormat()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId com.sun.corba.se.impl.util.RepositoryId init(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId com.sun.corba.se.impl.util.RepositoryId init(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId int computeValueTag(boolean, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId int getTypeInfo(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.Class getAnyClassFromType()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.Class getClassFromType()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.Class getClassFromType(java.lang.Class, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.Class getClassFromType(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String convertFromISOLatin1(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String convertFromISOLatin1(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String convertToISOLatin1(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String convertToISOLatin1(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createForAnyType(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createForIDLType(java.lang.Class, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createForJavaType(java.io.Serializable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createForJavaType(java.io.Serializable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createForJavaType(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createForJavaType(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createForSpecialCase(java.io.Serializable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createForSpecialCase(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createHashString(java.io.Serializable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createHashString(java.io.Serializable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createHashString(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createHashString(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createSequenceRepID(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createSequenceRepID(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String createSequenceRepID(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String delete(java.lang.String, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String delete(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String getActualSerialVersionUID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String getClassName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String getIdFromHelper(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String getRepositoryId()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String getSerialVersionUID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String getServerURL()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String getTypeString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String getVersionString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String replace(java.lang.String, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String replace(java.lang.String, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String replace(java.lang.String, java.lang.String, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId long fromHex(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId long getActualSerialVersionUIDAsLong()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId long getSerialVersionUIDAsLong()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryId void setByteArray(java.lang.String, byte[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryIdCache com.sun.corba.se.impl.util.RepositoryId getId(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.RepositoryIdCache com.sun.corba.se.impl.util.RepositoryId getId(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility Utility()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility com.sun.corba.se.impl.util.StubEntry loadStubAndUpdateCache(javax.rmi.CORBA.Tie, com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactory, java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Class loadClassForClass(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Class, java.lang.ClassLoader) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Class loadClassForClass(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Class, java.lang.ClassLoader) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Class loadClassForClass(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Class, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Class loadClassOfType(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Class, java.lang.ClassLoader) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Class loadClassOfType(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Class, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Class loadStubClass(java.lang.String, java.lang.String, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Class loadStubClass(java.lang.String, java.lang.String, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Object autoConnect(java.lang.Object, org.omg.CORBA.ORB, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Object readAbstractAndNarrow(org.omg.CORBA_2_3.portable.InputStream, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Object readAbstractAndNarrow(org.omg.CORBA_2_3.portable.InputStream, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Object readObjectAndNarrow(org.omg.CORBA.portable.InputStream, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.Object readObjectAndNarrow(org.omg.CORBA.portable.InputStream, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String dynamicStubName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String dynamicStubName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String idlStubName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String idlStubName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubName(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubName(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubNameForCompiler(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubNameForCompiler(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubNameForCompiler(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubNameForCompiler(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubNameFromRepID(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String stubNameFromRepID(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String tieName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String tieName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String tieNameForCompiler(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.lang.String tieNameForCompiler(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.rmi.Remote loadStub(javax.rmi.CORBA.Tie, com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactory, java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility java.rmi.Remote loadStub(org.omg.CORBA.Object, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility javax.rmi.CORBA.Tie loadTie(java.rmi.Remote) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Utility void purgeTieAndServant(javax.rmi.CORBA.Tie) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Version Version()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.util.Version java.lang.String asString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.corba.se.impl.util.Version void main(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
</root>
