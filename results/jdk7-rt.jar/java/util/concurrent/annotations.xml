<root>
  <item name="java.util.concurrent.AbstractExecutorService AbstractExecutorService()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService T doInvokeAny(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService T invokeAny(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService T invokeAny(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService T invokeAny(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.List&lt;java.util.concurrent.Future&lt;T&gt;&gt; invokeAll(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.List&lt;java.util.concurrent.Future&lt;T&gt;&gt; invokeAll(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.List&lt;java.util.concurrent.Future&lt;T&gt;&gt; invokeAll(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.List&lt;java.util.concurrent.Future&lt;T&gt;&gt; invokeAll(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.List&lt;java.util.concurrent.Future&lt;T&gt;&gt; invokeAll(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;, long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.Future&lt;?&gt; submit(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.Future&lt;T&gt; submit(java.lang.Runnable, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.Future&lt;T&gt; submit(java.util.concurrent.Callable&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.RunnableFuture&lt;T&gt; newTaskFor(java.lang.Runnable, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.RunnableFuture&lt;T&gt; newTaskFor(java.lang.Runnable, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.RunnableFuture&lt;T&gt; newTaskFor(java.util.concurrent.Callable&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.RunnableFuture&lt;T&gt; newTaskFor(java.util.concurrent.Callable&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue ArrayBlockingQueue(int, boolean, java.util.Collection&lt;? extends E&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E cast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E itemAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean add(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean offer(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue int dec(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue int drainTo(java.util.Collection&lt;? super E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue int drainTo(java.util.Collection&lt;? super E&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue int inc(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue void checkNotNull(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue void put(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue.Itr Itr(java.util.concurrent.ArrayBlockingQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap ConcurrentHashMap(java.util.Map&lt;? extends K,? extends V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V get(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V put(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V put(K, V) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V put(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V putIfAbsent(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V putIfAbsent(K, V) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V putIfAbsent(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V replace(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V replace(K, V) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V replace(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean containsKey(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean containsValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean remove(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean remove(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean remove(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean replace(K, V, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean replace(K, V, V) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean replace(K, V, V) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap int hash(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.Enumeration&lt;K&gt; keys()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.Enumeration&lt;V&gt; elements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt; entryAt(java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt;[], int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt; entryAt(java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt;[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt; entryForHash(java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt; entryForHash(java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt;, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt; segmentAt(java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt;[], int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt; segmentAt(java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt;[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntryIterator EntryIterator(java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntryIterator java.lang.Object next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntryIterator java.util.Map.Entry&lt;K,V&gt; next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntrySet boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntrySet boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntrySet boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntrySet boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.HashIterator HashIterator(java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.HashIterator boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.HashIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.HashIterator java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt; nextEntry()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Holder Holder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.KeyIterator KeyIterator(java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.KeySet java.util.Iterator&lt;K&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment V put(K, int, V, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment V remove(java.lang.Object, int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment V replace(K, int, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment void rehash(java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.ValueIterator ValueIterator(java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Values java.util.Iterator&lt;V&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.WriteThroughEntry V setValue(V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque ConcurrentLinkedDeque(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E getFirst()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E getLast()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E peekFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E peekLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E pollFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E pollLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E removeFirst()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E removeLast()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E screenNullResult(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E screenNullResult(E)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean addAll(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean offerFirst(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean offerFirst(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean offerLast(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean offerLast(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean removeFirstOccurrence(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean removeFirstOccurrence(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean removeLastOccurrence(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean removeLastOccurrence(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.ArrayList&lt;E&gt; toArrayList()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.Iterator&lt;E&gt; descendingIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt; nextTerminator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt; pred(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt; prevTerminator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt; succ(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void addFirst(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void addLast(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void checkNotNull(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void linkFirst(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void linkLast(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void skipDeletedPredecessors(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void skipDeletedSuccessors(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void unlink(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void unlinkFirst(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;, java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void unlinkLast(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;, java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.AbstractItr E next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.AbstractItr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.DescendingItr DescendingItr(java.util.concurrent.ConcurrentLinkedDeque, java.util.concurrent.ConcurrentLinkedDeque.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.DescendingItr java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt; nextNode(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.Itr Itr(java.util.concurrent.ConcurrentLinkedDeque, java.util.concurrent.ConcurrentLinkedDeque.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.Itr java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt; nextNode(java.util.concurrent.ConcurrentLinkedDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.Node Node()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue ConcurrentLinkedQueue(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean addAll(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean offer(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean offer(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue java.util.concurrent.ConcurrentLinkedQueue.Node&lt;E&gt; first()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue java.util.concurrent.ConcurrentLinkedQueue.Node&lt;E&gt; succ(java.util.concurrent.ConcurrentLinkedQueue.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue java.util.concurrent.ConcurrentLinkedQueue.Node&lt;E&gt; succ(java.util.concurrent.ConcurrentLinkedQueue.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue void checkNotNull(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap ConcurrentSkipListMap(java.util.SortedMap&lt;K,? extends V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap K ceilingKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap K floorKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap K higherKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap K lowerKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doGet(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doGet(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doPut(K, V, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doPut(K, V, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doRemove(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doRemove(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doRemove(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V get(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V put(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V put(K, V) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V put(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V putIfAbsent(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V putIfAbsent(K, V) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V putIfAbsent(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V replace(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V replace(K, V) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V replace(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean containsKey(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean containsValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean inHalfOpenRange(K, K, K) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean inHalfOpenRange(K, K, K) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean inHalfOpenRange(K, K, K) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean inOpenRange(K, K, K) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean inOpenRange(K, K, K) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean inOpenRange(K, K, K) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean remove(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean remove(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean remove(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean replace(K, V, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean replace(K, V, V) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean replace(K, V, V) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Comparable&lt;? super K&gt; comparable(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Comparable&lt;? super K&gt; comparable(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.AbstractMap.SimpleImmutableEntry&lt;K,V&gt; getNear(K, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Comparator&lt;? super K&gt; comparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Iterator&lt;K&gt; keyIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Iterator&lt;V&gt; valueIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entryIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.List&lt;E&gt; toList(java.util.Collection&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.List&lt;E&gt; toList(java.util.Collection&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; ceilingEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; doRemoveFirstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; doRemoveLastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; firstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; floorEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; higherEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; lastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; lowerEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; pollFirstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; pollLastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.NavigableSet&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.NavigableSet&lt;K&gt; navigableKeySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap&lt;K,V&gt; descendingMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap&lt;K,V&gt; headMap(K, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap&lt;K,V&gt; headMap(K, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap&lt;K,V&gt; subMap(K, boolean, K, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap&lt;K,V&gt; subMap(K, boolean, K, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap&lt;K,V&gt; subMap(K, boolean, K, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap&lt;K,V&gt; tailMap(K, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap&lt;K,V&gt; tailMap(K, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findNear(K, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findNear(K, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findNode(java.lang.Comparable&lt;? super K&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findNode(java.lang.Comparable&lt;? super K&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findPredecessor(java.lang.Comparable&lt;? super K&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void addIndex(java.util.concurrent.ConcurrentSkipListMap.Index&lt;K,V&gt;, java.util.concurrent.ConcurrentSkipListMap.HeadIndex&lt;K,V&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void addIndex(java.util.concurrent.ConcurrentSkipListMap.Index&lt;K,V&gt;, java.util.concurrent.ConcurrentSkipListMap.HeadIndex&lt;K,V&gt;, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void buildFromSorted(java.util.SortedMap&lt;K,? extends V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntryIterator EntryIterator(java.util.concurrent.ConcurrentSkipListMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntryIterator java.lang.Object next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntryIterator java.util.Map.Entry&lt;K,V&gt; next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntrySet boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntrySet boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntrySet boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntrySet boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntrySet boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Index boolean indexesDeletedNode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Index boolean link(java.util.concurrent.ConcurrentSkipListMap.Index&lt;K,V&gt;, java.util.concurrent.ConcurrentSkipListMap.Index&lt;K,V&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Index boolean unlink(java.util.concurrent.ConcurrentSkipListMap.Index&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Iter Iter(java.util.concurrent.ConcurrentSkipListMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Iter boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeyIterator KeyIterator(java.util.concurrent.ConcurrentSkipListMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet E pollFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet E pollLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet&lt;E&gt; descendingSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet&lt;E&gt; headSet(E)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet&lt;E&gt; headSet(E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet&lt;E&gt; subSet(E, E)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet&lt;E&gt; subSet(E, boolean, E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet&lt;E&gt; tailSet(E)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet&lt;E&gt; tailSet(E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.SortedSet headSet(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.SortedSet subSet(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.SortedSet tailSet(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Node V getValidValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Node boolean isBaseHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Node boolean isMarker()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Node java.util.AbstractMap.SimpleImmutableEntry&lt;K,V&gt; createSnapshot()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K ceilingKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K floorKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K getNearKey(K, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K higherKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K lowerKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap V get(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap V get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap V put(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap V putIfAbsent(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap V remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap V replace(K, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$100(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$100(java.util.concurrent.ConcurrentSkipListMap.SubMap)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$400(java.util.concurrent.ConcurrentSkipListMap.SubMap, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$500(java.util.concurrent.ConcurrentSkipListMap.SubMap, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$700(java.util.concurrent.ConcurrentSkipListMap.SubMap, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean containsKey(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean containsValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean replace(K, V, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Iterator&lt;K&gt; keyIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Iterator&lt;V&gt; valueIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entryIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; ceilingEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; firstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; floorEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; getNearEntry(K, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; higherEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; highestEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; lastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; lowerEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; lowestEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; pollFirstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; pollLastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; removeHighest()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; removeLowest()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap descendingMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap headMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap headMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap tailMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap tailMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableSet&lt;K&gt; descendingKeySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableSet&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableSet&lt;K&gt; navigableKeySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Set keySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap headMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap headMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap tailMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap tailMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap descendingMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap access$600(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap access$600(java.util.concurrent.ConcurrentSkipListMap.SubMap)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.Node access$200(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.Node access$300(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; descendingMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; headMap(K) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; headMap(K)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; headMap(K, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; headMap(K, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; newSubMap(K, boolean, K, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; subMap(K, K) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; subMap(K, K) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; subMap(K, K)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; subMap(K, boolean, K, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; subMap(K, boolean, K, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; subMap(K, boolean, K, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; tailMap(K) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; tailMap(K)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; tailMap(K, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap&lt;K,V&gt; tailMap(K, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap void checkKeyBounds(K) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapEntryIterator SubMapEntryIterator(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapEntryIterator java.lang.Object next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapEntryIterator java.util.Map.Entry&lt;K,V&gt; next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapIter SubMapIter(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapIter boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapKeyIterator SubMapKeyIterator(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapValueIterator SubMapValueIterator(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.ValueIterator ValueIterator(java.util.concurrent.ConcurrentSkipListMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet ConcurrentSkipListSet(java.util.SortedSet&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet E pollFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet E pollLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet boolean removeAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet java.util.NavigableSet&lt;E&gt; descendingSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet java.util.NavigableSet&lt;E&gt; headSet(E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet java.util.NavigableSet&lt;E&gt; subSet(E, boolean, E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet java.util.NavigableSet&lt;E&gt; tailSet(E, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList CopyOnWriteArrayList(E[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList CopyOnWriteArrayList(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList E get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList E get(java.lang.Object[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList E get(java.lang.Object[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean add(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean addAll(int, java.util.Collection&lt;? extends E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean addAll(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean containsAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean eq(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int addAllAbsent(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int indexOf(E, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int indexOf(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int indexOf(java.lang.Object, java.lang.Object[], int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int lastIndexOf(E, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int lastIndexOf(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int lastIndexOf(java.lang.Object, java.lang.Object[], int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.lang.Object[] getArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.util.List&lt;E&gt; subList(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.util.ListIterator&lt;E&gt; listIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.util.ListIterator&lt;E&gt; listIterator(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList void access$100(java.util.concurrent.CopyOnWriteArrayList, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWIterator COWIterator(java.lang.Object[], int, java.util.concurrent.CopyOnWriteArrayList.1) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWIterator boolean hasPrevious()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWIterator int nextIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWIterator int previousIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWIterator void add(E) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWIterator void set(E) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubList java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubList java.util.List&lt;E&gt; subList(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubList java.util.ListIterator&lt;E&gt; listIterator(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubListIterator COWSubListIterator(java.util.List&lt;E&gt;, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubListIterator void add(E) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubListIterator void set(E) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArraySet boolean eq(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArraySet boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.CountDownLatch boolean await(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CountDownLatch java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CyclicBarrier int await(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CyclicBarrier int getParties()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CyclicBarrier.Generation Generation(java.util.concurrent.CyclicBarrier.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue E poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue boolean offer(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.DelayQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue int drainTo(java.util.Collection&lt;? super E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue int drainTo(java.util.Collection&lt;? super E&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue int remainingCapacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.DelayQueue java.lang.Object poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.PriorityQueue access$100(java.util.concurrent.DelayQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.PriorityQueue access$100(java.util.concurrent.DelayQueue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.concurrent.locks.ReentrantLock access$000(java.util.concurrent.DelayQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.concurrent.locks.ReentrantLock access$000(java.util.concurrent.DelayQueue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.DelayQueue.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Exchanger V exchange(V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Exchanger V exchange(V, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger V exchange(V, long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Exchanger boolean tryCancel(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger boolean tryCancel(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Exchanger java.lang.Object await(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger java.lang.Object awaitNanos(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger java.lang.Object spinWait(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger.Slot Slot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Exchanger.Slot Slot(java.util.concurrent.Exchanger.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Exchanger.Slot Slot(java.util.concurrent.Exchanger.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService ExecutorCompletionService(java.util.concurrent.Executor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService ExecutorCompletionService(java.util.concurrent.Executor, java.util.concurrent.BlockingQueue&lt;java.util.concurrent.Future&lt;V&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService ExecutorCompletionService(java.util.concurrent.Executor, java.util.concurrent.BlockingQueue&lt;java.util.concurrent.Future&lt;V&gt;&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService java.util.concurrent.BlockingQueue access$000(java.util.concurrent.ExecutorCompletionService) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService java.util.concurrent.BlockingQueue access$000(java.util.concurrent.ExecutorCompletionService)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService java.util.concurrent.Future&lt;V&gt; submit(java.lang.Runnable, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService java.util.concurrent.Future&lt;V&gt; submit(java.util.concurrent.Callable&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService.QueueingFuture QueueingFuture(java.util.concurrent.RunnableFuture&lt;V&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors Executors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;T&gt; callable(java.lang.Runnable, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;T&gt; callable(java.lang.Runnable, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;T&gt; privilegedCallable(java.util.concurrent.Callable&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;T&gt; privilegedCallable(java.util.concurrent.Callable&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;T&gt; privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;T&gt; privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;java.lang.Object&gt; callable(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;java.lang.Object&gt; callable(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;java.lang.Object&gt; callable(java.security.PrivilegedAction&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;java.lang.Object&gt; callable(java.security.PrivilegedAction&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;java.lang.Object&gt; callable(java.security.PrivilegedExceptionAction&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable&lt;java.lang.Object&gt; callable(java.security.PrivilegedExceptionAction&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newCachedThreadPool()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newFixedThreadPool(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newFixedThreadPool(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newFixedThreadPool(int, java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newSingleThreadExecutor()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int, java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ThreadFactory defaultThreadFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ThreadFactory privilegedThreadFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.DefaultThreadFactory java.lang.Thread newThread(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallable java.util.concurrent.Callable access$000(java.util.concurrent.Executors.PrivilegedCallable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallable java.util.concurrent.Callable access$000(java.util.concurrent.Executors.PrivilegedCallable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader java.lang.ClassLoader access$100(java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader java.lang.ClassLoader access$100(java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader java.util.concurrent.Callable access$200(java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader java.util.concurrent.Callable access$200(java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory java.lang.ClassLoader access$300(java.util.concurrent.Executors.PrivilegedThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory java.lang.ClassLoader access$300(java.util.concurrent.Executors.PrivilegedThreadFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory java.lang.Thread newThread(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory java.security.AccessControlContext access$400(java.util.concurrent.Executors.PrivilegedThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory java.security.AccessControlContext access$400(java.util.concurrent.Executors.PrivilegedThreadFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory.1.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory.1.1 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool ForkJoinPool(int, java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory, java.lang.Thread.UncaughtExceptionHandler, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool T invoke(java.util.concurrent.ForkJoinTask&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean awaitTermination(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean getAsyncMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean hasQueuedSubmissions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean isAtLeastTerminating()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean isQuiescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean isShutdown()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean isTerminated()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean isTerminating()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean scan(java.util.concurrent.ForkJoinWorkerThread, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean tryAwaitWork(java.util.concurrent.ForkJoinWorkerThread, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool int getActiveThreadCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool int getParallelism()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool int getPoolSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool int getQueuedSubmissionCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool int getRunningThreadCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool int idlePerActive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.lang.String nextWorkerName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.List&lt;java.util.concurrent.Future&lt;T&gt;&gt; invokeAll(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.List&lt;java.util.concurrent.Future&lt;T&gt;&gt; invokeAll(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory getFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;?&gt; pollSubmission()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;?&gt; submit(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;?&gt; submit(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;T&gt; submit(java.lang.Runnable, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;T&gt; submit(java.lang.Runnable, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;T&gt; submit(java.util.concurrent.Callable&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;T&gt; submit(java.util.concurrent.Callable&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;T&gt; submit(java.util.concurrent.ForkJoinTask&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;T&gt; submit(java.util.concurrent.ForkJoinTask&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.RunnableFuture&lt;T&gt; newTaskFor(java.lang.Runnable, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.RunnableFuture&lt;T&gt; newTaskFor(java.util.concurrent.Callable&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool long getQueuedTaskCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool long getStealCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void awaitBlocker(java.util.concurrent.ForkJoinPool.ManagedBlocker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread, java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread, java.lang.Throwable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void execute(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void execute(java.util.concurrent.ForkJoinTask&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void idleAwaitWork(java.util.concurrent.ForkJoinWorkerThread, long, long, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void timedAwaitJoin(java.util.concurrent.ForkJoinTask&lt;?&gt;, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void tryAwaitJoin(java.util.concurrent.ForkJoinTask&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void work(java.util.concurrent.ForkJoinWorkerThread) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory DefaultForkJoinWorkerThreadFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask ForkJoinTask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask V get(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask boolean isCancelled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask boolean isCompletedAbnormally()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask boolean isCompletedNormally()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask boolean isDone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.lang.Throwable getException()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.lang.Throwable getThrowableException()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.lang.ref.ReferenceQueue access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.Collection&lt;T&gt; invokeAll(java.util.Collection&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.Collection&lt;T&gt; invokeAll(java.util.Collection&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinPool getPool()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;?&gt; adapt(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;?&gt; adapt(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;?&gt; peekNextLocalTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;?&gt; pollNextLocalTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;?&gt; pollTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;T&gt; adapt(java.lang.Runnable, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;T&gt; adapt(java.lang.Runnable, T)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;T&gt; adapt(java.util.concurrent.Callable&lt;? extends T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;T&gt; adapt(java.util.concurrent.Callable&lt;? extends T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;V&gt; fork()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void invokeAll(java.util.concurrent.ForkJoinTask&lt;?&gt;, java.util.concurrent.ForkJoinTask&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void invokeAll(java.util.concurrent.ForkJoinTask&lt;?&gt;, java.util.concurrent.ForkJoinTask&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void invokeAll(java.util.concurrent.ForkJoinTask&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask.AdaptedCallable AdaptedCallable(java.util.concurrent.Callable&lt;? extends T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask.AdaptedCallable T getRawResult()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask.AdaptedRunnable AdaptedRunnable(java.lang.Runnable, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask.AdaptedRunnable T getRawResult()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread ForkJoinWorkerThread(java.util.concurrent.ForkJoinPool) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread boolean helpJoinTask(java.util.concurrent.ForkJoinTask&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread boolean localHelpJoinTask(java.util.concurrent.ForkJoinTask&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread int getEstimatedSurplusTaskCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread int getPoolIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread int getQueueSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread int joinTask(java.util.concurrent.ForkJoinTask&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread int tryDeqAndExec(java.util.concurrent.ForkJoinTask&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinPool getPool()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; deqTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; locallyDeqTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; peekTask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; pollLocalTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; pollTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; popTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.FutureTask FutureTask(java.lang.Runnable, V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.FutureTask FutureTask(java.util.concurrent.Callable&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.FutureTask V get(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.FutureTask boolean isCancelled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.FutureTask boolean isDone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.FutureTask void done()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.FutureTask void removeWaiter(java.util.concurrent.FutureTask.WaitNode) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E getFirst()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E getLast()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E peekFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E peekLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollFirst(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollFirst(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollLast(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollLast(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E removeFirst()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E removeLast()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E unlinkFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E unlinkLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque LinkedBlockingDeque(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean add(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean linkFirst(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean linkLast(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerFirst(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerFirst(E, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerFirst(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerLast(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerLast(E, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerLast(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean removeFirstOccurrence(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean removeFirstOccurrence(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean removeLastOccurrence(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean removeLastOccurrence(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque int drainTo(java.util.Collection&lt;? super E&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.util.Iterator&lt;E&gt; descendingIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void putFirst(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void putLast(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void unlink(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.AbstractItr AbstractItr(java.util.concurrent.LinkedBlockingDeque) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.AbstractItr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.AbstractItr java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt; succ(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr DescendingItr(java.util.concurrent.LinkedBlockingDeque) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr DescendingItr(java.util.concurrent.LinkedBlockingDeque, java.util.concurrent.LinkedBlockingDeque.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr DescendingItr(java.util.concurrent.LinkedBlockingDeque, java.util.concurrent.LinkedBlockingDeque.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt; firstNode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt; nextNode(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt; nextNode(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr Itr(java.util.concurrent.LinkedBlockingDeque) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr Itr(java.util.concurrent.LinkedBlockingDeque, java.util.concurrent.LinkedBlockingDeque.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr Itr(java.util.concurrent.LinkedBlockingDeque, java.util.concurrent.LinkedBlockingDeque.1) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt; firstNode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt; nextNode(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt; nextNode(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue E poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue LinkedBlockingQueue(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean offer(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue int drainTo(java.util.Collection&lt;? super E&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue int remainingCapacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.util.concurrent.LinkedBlockingQueue.Node access$000(java.util.concurrent.LinkedBlockingQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.util.concurrent.LinkedBlockingQueue.Node access$000(java.util.concurrent.LinkedBlockingQueue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void put(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void unlink(java.util.concurrent.LinkedBlockingQueue.Node&lt;E&gt;, java.util.concurrent.LinkedBlockingQueue.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void unlink(java.util.concurrent.LinkedBlockingQueue.Node&lt;E&gt;, java.util.concurrent.LinkedBlockingQueue.Node&lt;E&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue.Itr Itr(java.util.concurrent.LinkedBlockingQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue.Itr java.util.concurrent.LinkedBlockingQueue.Node&lt;E&gt; nextNode(java.util.concurrent.LinkedBlockingQueue.Node&lt;E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue.Itr java.util.concurrent.LinkedBlockingQueue.Node&lt;E&gt; nextNode(java.util.concurrent.LinkedBlockingQueue.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E awaitMatch(java.util.concurrent.LinkedTransferQueue.Node, java.util.concurrent.LinkedTransferQueue.Node, E, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E awaitMatch(java.util.concurrent.LinkedTransferQueue.Node, java.util.concurrent.LinkedTransferQueue.Node, E, boolean, long) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E cast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;!null;null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E firstDataItem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E peek()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E take()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue LinkedTransferQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean add(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean findAndRemove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean findAndRemove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean hasWaitingConsumer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean offer(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean offer(E, long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;true;_,_,!null-&gt;true;_,_,null-&gt;true;null,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean tryTransfer(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int countOfMode(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int drainTo(java.util.Collection&lt;? super E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int drainTo(java.util.Collection&lt;? super E&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int getWaitingConsumerCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int remainingCapacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int spinsFor(java.util.concurrent.LinkedTransferQueue.Node, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int spinsFor(java.util.concurrent.LinkedTransferQueue.Node, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.concurrent.LinkedTransferQueue.Node firstOfMode(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.concurrent.LinkedTransferQueue.Node succ(java.util.concurrent.LinkedTransferQueue.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.concurrent.LinkedTransferQueue.Node succ(java.util.concurrent.LinkedTransferQueue.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.concurrent.LinkedTransferQueue.Node tryAppend(java.util.concurrent.LinkedTransferQueue.Node, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue void unsplice(java.util.concurrent.LinkedTransferQueue.Node, java.util.concurrent.LinkedTransferQueue.Node) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue void unsplice(java.util.concurrent.LinkedTransferQueue.Node, java.util.concurrent.LinkedTransferQueue.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue.Node boolean cannotPrecede(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue.Node boolean isMatched()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue.Node boolean isUnmatchedRequest()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser boolean isTerminated()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser boolean onAdvance(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser int arrivedOf(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser int awaitAdvanceInterruptibly(int, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser int getPhase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser int getRegisteredParties()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser int internalAwaitAdvance(int, java.util.concurrent.Phaser.QNode) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Phaser int partiesOf(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser int phaseOf(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser int unarrivedOf(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser java.lang.String badArrive(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser java.lang.String badRegister(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser java.lang.String stateToString(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser java.util.concurrent.Phaser getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser java.util.concurrent.Phaser getRoot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Phaser java.util.concurrent.atomic.AtomicReference&lt;java.util.concurrent.Phaser.QNode&gt; queueFor(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E dequeue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue PriorityBlockingQueue(java.util.Collection&lt;? extends E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue boolean offer(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue boolean offer(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue int drainTo(java.util.Collection&lt;? super E&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue int indexOf(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue int remainingCapacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue java.util.Comparator&lt;? super E&gt; comparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void removeEQ(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void siftUpComparable(int, T, java.lang.Object[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void siftUpUsingComparator(int, T, java.lang.Object[], java.util.Comparator&lt;? super T&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.RecursiveAction RecursiveAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.RecursiveAction java.lang.Object getRawResult()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.RecursiveAction java.lang.Void getRawResult()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.RecursiveAction void setRawResult(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.RecursiveAction void setRawResult(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.RecursiveAction void setRawResult(java.lang.Void) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.RecursiveAction void setRawResult(java.lang.Void)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.RecursiveTask RecursiveTask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.RecursiveTask V getRawResult()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor(int, java.util.concurrent.RejectedExecutionHandler) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor boolean access$100(java.util.concurrent.ScheduledThreadPoolExecutor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor boolean access$100(java.util.concurrent.ScheduledThreadPoolExecutor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor boolean getRemoveOnCancelPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.List&lt;java.lang.Runnable&gt; shutdownNow()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt; getQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.Future&lt;T&gt; submit(java.lang.Runnable, T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.RunnableScheduledFuture&lt;V&gt; decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.RunnableScheduledFuture&lt;V&gt; decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,!null-&gt;!null;_,null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.RunnableScheduledFuture&lt;V&gt; decorateTask(java.util.concurrent.Callable&lt;V&gt;, java.util.concurrent.RunnableScheduledFuture&lt;V&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.RunnableScheduledFuture&lt;V&gt; decorateTask(java.util.concurrent.Callable&lt;V&gt;, java.util.concurrent.RunnableScheduledFuture&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,!null-&gt;!null;_,null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture&lt;?&gt; schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture&lt;?&gt; schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture&lt;?&gt; scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture&lt;?&gt; scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture&lt;V&gt; schedule(java.util.concurrent.Callable&lt;V&gt;, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture&lt;V&gt; schedule(java.util.concurrent.Callable&lt;V&gt;, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.atomic.AtomicLong access$000()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor long triggerTime(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue boolean offer(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue boolean offer(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue boolean offer(java.lang.Runnable, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue int drainTo(java.util.Collection&lt;? super java.lang.Runnable&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue int drainTo(java.util.Collection&lt;? super java.lang.Runnable&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue int indexOf(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue int remainingCapacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.lang.Object poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.Iterator&lt;java.lang.Runnable&gt; iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture pollExpired()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue void setIndex(java.util.concurrent.RunnableScheduledFuture, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask ScheduledFutureTask(java.lang.Runnable, V, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask ScheduledFutureTask(java.lang.Runnable, V, long, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask ScheduledFutureTask(java.util.concurrent.Callable&lt;V&gt;, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask boolean access$301(java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask boolean isPeriodic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask long getDelay(java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask void access$201(java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Semaphore boolean isFair()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Semaphore boolean tryAcquire(int, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Semaphore boolean tryAcquire(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Semaphore java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue E peek()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue E poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue E take()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue T[] toArray(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue T[] toArray(T[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean contains(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean containsAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean offer(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean offer(E, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean removeAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean removeAll(java.util.Collection&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean retainAll(java.util.Collection&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean retainAll(java.util.Collection&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;false;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue int drainTo(java.util.Collection&lt;? super E&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue int drainTo(java.util.Collection&lt;? super E&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue int remainingCapacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue long objectFieldOffset(sun.misc.Unsafe, java.lang.String, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue long objectFieldOffset(sun.misc.Unsafe, java.lang.String, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue long objectFieldOffset(sun.misc.Unsafe, java.lang.String, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue void clear()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue void put(E) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.FifoWaitQueue FifoWaitQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.LifoWaitQueue LifoWaitQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue.TransferQueue.QNode, java.lang.Object, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue java.lang.Object transfer(java.lang.Object, boolean, long)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue void clean(java.util.concurrent.SynchronousQueue.TransferQueue.QNode, java.util.concurrent.SynchronousQueue.TransferQueue.QNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue void clean(java.util.concurrent.SynchronousQueue.TransferQueue.QNode, java.util.concurrent.SynchronousQueue.TransferQueue.QNode) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue.QNode boolean isCancelled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue.QNode boolean isOffList()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack TransferStack()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack boolean isFulfilling(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack boolean shouldSpin(java.util.concurrent.SynchronousQueue.TransferStack.SNode) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack boolean shouldSpin(java.util.concurrent.SynchronousQueue.TransferStack.SNode)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack java.lang.Object transfer(java.lang.Object, boolean, long)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack java.util.concurrent.SynchronousQueue.TransferStack.SNode awaitFulfill(java.util.concurrent.SynchronousQueue.TransferStack.SNode, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack java.util.concurrent.SynchronousQueue.TransferStack.SNode snode(java.util.concurrent.SynchronousQueue.TransferStack.SNode, java.lang.Object, java.util.concurrent.SynchronousQueue.TransferStack.SNode, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack java.util.concurrent.SynchronousQueue.TransferStack.SNode snode(java.util.concurrent.SynchronousQueue.TransferStack.SNode, java.lang.Object, java.util.concurrent.SynchronousQueue.TransferStack.SNode, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack void clean(java.util.concurrent.SynchronousQueue.TransferStack.SNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack.SNode boolean isCancelled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.Transferer Transferer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.WaitQueue WaitQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadLocalRandom.1 java.lang.Object initialValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadLocalRandom.1 java.util.concurrent.ThreadLocalRandom initialValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.RejectedExecutionHandler) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.RejectedExecutionHandler) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.RejectedExecutionHandler) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt;, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean allowsCoreThreadTimeOut()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean awaitTermination(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean isRunning(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean isRunningOrShutdown(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean isShutdown()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean isTerminated()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean isTerminating()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean runStateAtLeast(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean runStateLessThan(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor int ctlOf(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor int getCorePoolSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor int getMaximumPoolSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor int runStateOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor int workerCountOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.lang.Runnable getTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.util.List&lt;java.lang.Runnable&gt; drainQueue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.util.List&lt;java.lang.Runnable&gt; shutdownNow()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.util.concurrent.BlockingQueue&lt;java.lang.Runnable&gt; getQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.util.concurrent.ThreadFactory getThreadFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor long getKeepAliveTime(java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void afterExecute(java.lang.Runnable, java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void afterExecute(java.lang.Runnable, java.lang.Throwable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void afterExecute(java.lang.Runnable, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void beforeExecute(java.lang.Thread, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void beforeExecute(java.lang.Thread, java.lang.Runnable) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void beforeExecute(java.lang.Thread, java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void execute(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void onShutdown()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void processWorkerExit(java.util.concurrent.ThreadPoolExecutor.Worker, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void runWorker(java.util.concurrent.ThreadPoolExecutor.Worker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void setKeepAliveTime(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void setThreadFactory(java.util.concurrent.ThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void terminated()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.AbortPolicy AbortPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.AbortPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.AbortPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy CallerRunsPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy DiscardOldestPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.DiscardPolicy DiscardPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.DiscardPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.DiscardPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.DiscardPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.Worker Worker(java.util.concurrent.ThreadPoolExecutor, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit TimeUnit(java.lang.String, int, java.util.concurrent.TimeUnit.1) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.TimeUnit long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.TimeUnit long x(long, long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 int excessNanos(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long toDays(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long toHours(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long toMicros(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long toMillis(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long toMinutes(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long toNanos(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long toSeconds(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 int excessNanos(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 long toDays(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 long toHours(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 long toMicros(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 long toMillis(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 long toMinutes(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 long toSeconds(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.3 int excessNanos(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.3 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.3 long toDays(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.3 long toHours(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.3 long toMillis(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.3 long toMinutes(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.3 long toSeconds(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.4 int excessNanos(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.4 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.4 long toDays(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.4 long toHours(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.4 long toMinutes(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.4 long toSeconds(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.5 int excessNanos(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.5 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.5 long toDays(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.5 long toHours(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.5 long toMinutes(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.6 int excessNanos(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.6 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.6 long toDays(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.6 long toHours(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.7 int excessNanos(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.TimeUnit.7 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.7 long toDays(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
</root>
