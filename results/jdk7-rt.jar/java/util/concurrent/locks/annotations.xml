<root>
  <item name="java.util.concurrent.locks.AbstractOwnableSynchronizer AbstractOwnableSynchronizer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractOwnableSynchronizer java.lang.Thread getExclusiveOwnerThread()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer AbstractQueuedLongSynchronizer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean apparentlyFirstQueuedIsExclusive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean findNodeFromTail(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean findNodeFromTail(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean hasContended()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean hasQueuedThreads()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean isQueued(java.lang.Thread) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer int getQueueLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.lang.Thread fullGetFirstQueuedThread()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.lang.Thread getFirstQueuedThread()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getExclusiveQueuedThreads()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getQueuedThreads()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getSharedQueuedThreads()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node addWaiter(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node enq(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer long getState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer void setHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer void setHeadAndPropagate(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject boolean await(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject boolean awaitUntil(java.util.Date) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject boolean isOwnedBy(java.util.concurrent.locks.AbstractQueuedLongSynchronizer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject boolean isOwnedBy(java.util.concurrent.locks.AbstractQueuedLongSynchronizer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject java.util.Collection&lt;java.lang.Thread&gt; getWaitingThreads()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node addConditionWaiter()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject void doSignal(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject void doSignalAll(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node Node()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node boolean isShared()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node predecessor()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer AbstractQueuedSynchronizer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean apparentlyFirstQueuedIsExclusive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean findNodeFromTail(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean findNodeFromTail(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean hasContended()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean hasQueuedThreads()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean isQueued(java.lang.Thread) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node, java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer int getQueueLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer int getState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.lang.Thread fullGetFirstQueuedThread()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.lang.Thread getFirstQueuedThread()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getExclusiveQueuedThreads()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getQueuedThreads()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getSharedQueuedThreads()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.util.Collection&lt;java.lang.Thread&gt; getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.util.concurrent.locks.AbstractQueuedSynchronizer.Node addWaiter(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer java.util.concurrent.locks.AbstractQueuedSynchronizer.Node enq(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer void cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer void setHead(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer void setHeadAndPropagate(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject boolean await(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject boolean awaitUntil(java.util.Date) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject boolean isOwnedBy(java.util.concurrent.locks.AbstractQueuedSynchronizer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject boolean isOwnedBy(java.util.concurrent.locks.AbstractQueuedSynchronizer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject java.util.Collection&lt;java.lang.Thread&gt; getWaitingThreads()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject java.util.concurrent.locks.AbstractQueuedSynchronizer.Node addConditionWaiter()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.Node Node()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.Node boolean isShared()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.AbstractQueuedSynchronizer.Node java.util.concurrent.locks.AbstractQueuedSynchronizer.Node predecessor()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.LockSupport LockSupport()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.LockSupport java.lang.Object getBlocker(java.lang.Thread) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.LockSupport void unpark(java.lang.Thread) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock boolean hasWaiters(java.util.concurrent.locks.Condition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock boolean isFair()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock boolean tryLock(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock int getWaitQueueLength(java.util.concurrent.locks.Condition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock java.lang.Thread getOwner()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock java.util.Collection&lt;java.lang.Thread&gt; getWaitingThreads(java.util.concurrent.locks.Condition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock java.util.concurrent.locks.Condition newCondition()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock.FairSync FairSync()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock.NonfairSync NonfairSync()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock.Sync Sync()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock.Sync java.lang.Thread getOwner()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock.Sync java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject newCondition()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantLock.Sync void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock boolean hasWaiters(java.util.concurrent.locks.Condition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock boolean isFair()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock int getWaitQueueLength(java.util.concurrent.locks.Condition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock java.lang.Thread getOwner()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock java.util.Collection&lt;java.lang.Thread&gt; getWaitingThreads(java.util.concurrent.locks.Condition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock readLock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock writeLock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync boolean writerShouldBlock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock ReadLock(java.util.concurrent.locks.ReentrantReadWriteLock) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock boolean tryLock(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.Sync int exclusiveCount(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.Sync int sharedCount(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.Sync java.lang.IllegalMonitorStateException unmatchedUnlockException()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.Sync java.lang.Thread getOwner()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.Sync java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject newCondition()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.Sync void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter java.lang.Object initialValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter initialValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock WriteLock(java.util.concurrent.locks.ReentrantReadWriteLock) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock boolean tryLock(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock java.util.concurrent.locks.Condition newCondition()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
