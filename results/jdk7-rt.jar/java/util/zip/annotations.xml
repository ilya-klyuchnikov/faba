<root>
  <item name="java.util.zip.Adler32 long getValue()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Adler32 void access$000(java.util.zip.Adler32, java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Adler32 void access$000(java.util.zip.Adler32, java.nio.ByteBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Adler32 void update(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Adler32 void update(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Adler32 void update(java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Adler32.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Adler32.1 void update(java.util.zip.Adler32, java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Adler32.1 void update(java.util.zip.Adler32, java.nio.ByteBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.CRC32 CRC32()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.CRC32 long getValue()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.CRC32 void update(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.CRC32 void update(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.CheckedInputStream java.util.zip.Checksum getChecksum()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.CheckedOutputStream java.util.zip.Checksum getChecksum()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Deflater boolean finished()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Deflater boolean needsInput()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Deflater int deflate(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Deflater int deflate(byte[], int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Deflater void setDictionary(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Deflater void setDictionary(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Deflater void setInput(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Deflater void setInput(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterInputStream DeflaterInputStream(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterInputStream DeflaterInputStream(java.io.InputStream, java.util.zip.Deflater) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterInputStream DeflaterInputStream(java.io.InputStream, java.util.zip.Deflater) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterInputStream DeflaterInputStream(java.io.InputStream, java.util.zip.Deflater, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterInputStream DeflaterInputStream(java.io.InputStream, java.util.zip.Deflater, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterInputStream boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.DeflaterInputStream int read(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterInputStream void mark(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.DeflaterOutputStream void write(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPInputStream GZIPInputStream(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPInputStream GZIPInputStream(java.io.InputStream, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPInputStream int readUByte(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPInputStream int readUShort(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPInputStream long readUInt(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPOutputStream GZIPOutputStream(java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPOutputStream GZIPOutputStream(java.io.OutputStream, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPOutputStream GZIPOutputStream(java.io.OutputStream, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPOutputStream GZIPOutputStream(java.io.OutputStream, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPOutputStream void write(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPOutputStream void writeInt(int, byte[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPOutputStream void writeShort(int, byte[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.GZIPOutputStream void writeTrailer(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Inflater boolean finished()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Inflater boolean needsDictionary()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Inflater boolean needsInput()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Inflater int getRemaining()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.Inflater int inflate(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Inflater int inflate(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Inflater void setDictionary(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Inflater void setDictionary(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Inflater void setInput(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.Inflater void setInput(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterInputStream InflaterInputStream(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterInputStream InflaterInputStream(java.io.InputStream, java.util.zip.Inflater) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterInputStream InflaterInputStream(java.io.InputStream, java.util.zip.Inflater) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterInputStream InflaterInputStream(java.io.InputStream, java.util.zip.Inflater, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterInputStream InflaterInputStream(java.io.InputStream, java.util.zip.Inflater, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterInputStream boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.InflaterInputStream int read(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterInputStream void mark(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.InflaterOutputStream InflaterOutputStream(java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterOutputStream InflaterOutputStream(java.io.OutputStream, java.util.zip.Inflater) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterOutputStream InflaterOutputStream(java.io.OutputStream, java.util.zip.Inflater) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterOutputStream InflaterOutputStream(java.io.OutputStream, java.util.zip.Inflater, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterOutputStream InflaterOutputStream(java.io.OutputStream, java.util.zip.Inflater, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.InflaterOutputStream void write(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZStreamRef long address()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipCoder ZipCoder(java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder boolean isUTF8()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipCoder byte[] getBytes(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder byte[] getBytes(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder byte[] getBytesUTF8(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder byte[] getBytesUTF8(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder java.lang.String toString(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder java.lang.String toString(byte[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder java.lang.String toString(byte[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder java.lang.String toStringUTF8(byte[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder java.util.zip.ZipCoder get(java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipCoder java.util.zip.ZipCoder get(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipConstants64 ZipConstants64()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipEntry ZipEntry(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipEntry ZipEntry(java.util.zip.ZipEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipEntry boolean isDirectory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipEntry byte[] getExtra()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipEntry int getMethod()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipEntry java.lang.String getComment()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipEntry java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipEntry long getCompressedSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipEntry long getCrc()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipEntry long getSize()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.io.File, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.io.File, int, java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.io.File, int, java.nio.charset.Charset) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.io.File, java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.io.File, java.nio.charset.Charset) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.lang.String, java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile ZipFile(java.lang.String, java.nio.charset.Charset) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile boolean access$1500(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile boolean access$1500(java.util.zip.ZipFile)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile boolean access$600(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile boolean access$600(java.util.zip.ZipFile)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile boolean startsWithLocHeader()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile int access$300(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile int access$300(java.util.zip.ZipFile)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile java.io.InputStream getInputStream(java.util.zip.ZipEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile java.lang.String access$800(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile java.lang.String access$800(java.util.zip.ZipFile)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.Enumeration&lt;? extends java.util.zip.ZipEntry&gt; entries()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.Map access$000(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.Map access$000(java.util.zip.ZipFile)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.zip.ZipEntry access$900(java.util.zip.ZipFile, java.lang.String, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.zip.ZipEntry access$900(java.util.zip.ZipFile, java.lang.String, long) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.zip.ZipEntry access$900(java.util.zip.ZipFile, java.lang.String, long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.zip.ZipEntry getEntry(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.zip.ZipEntry getZipEntry(java.lang.String, long) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.zip.ZipFile java.util.zip.ZipEntry getZipEntry(java.lang.String, long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile long access$400(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile long access$400(java.util.zip.ZipFile)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile void access$100(java.util.zip.ZipFile, java.util.zip.Inflater) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile void access$100(java.util.zip.ZipFile, java.util.zip.Inflater) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile void access$1300(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile void access$200(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile void releaseInflater(java.util.zip.Inflater) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile.1 java.util.zip.ZipEntry nextElement()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile.2 2()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile.2 boolean startsWithLocHeader(java.util.zip.ZipFile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile.2 boolean startsWithLocHeader(java.util.zip.ZipFile)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile.ZipFileInflaterInputStream ZipFileInflaterInputStream(java.util.zip.ZipFile, java.util.zip.ZipFile.ZipFileInputStream, java.util.zip.Inflater, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile.ZipFileInflaterInputStream ZipFileInflaterInputStream(java.util.zip.ZipFile, java.util.zip.ZipFile.ZipFileInputStream, java.util.zip.Inflater, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipFile.ZipFileInputStream int available()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipFile.ZipFileInputStream long size()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipInputStream ZipInputStream(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream ZipInputStream(java.io.InputStream, java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream ZipInputStream(java.io.InputStream, java.nio.charset.Charset) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream int get16(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream int get16(byte[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipInputStream int read(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream java.util.zip.ZipEntry createZipEntry(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream java.util.zip.ZipEntry createZipEntry(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream long get32(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream long get32(byte[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipInputStream long get64(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipInputStream long get64(byte[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.util.zip.ZipInputStream void readEnd(java.util.zip.ZipEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream ZipOutputStream(java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream ZipOutputStream(java.io.OutputStream, java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream ZipOutputStream(java.io.OutputStream, java.nio.charset.Charset) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream int version(java.util.zip.ZipEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream void putNextEntry(java.util.zip.ZipEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream void setComment(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.zip.ZipOutputStream void write(byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream void writeCEN(java.util.zip.ZipOutputStream.XEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream void writeEXT(java.util.zip.ZipEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.zip.ZipOutputStream void writeLOC(java.util.zip.ZipOutputStream.XEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
