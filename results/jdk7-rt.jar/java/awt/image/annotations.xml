<root>
  <item name="java.awt.image.AffineTransformOp AffineTransformOp(java.awt.geom.AffineTransform, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp AffineTransformOp(java.awt.geom.AffineTransform, java.awt.RenderingHints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp int getInterpolationType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.Raster)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.image.WritableRaster createCompatibleDestRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.AffineTransformOp void validateTransform(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandCombineOp BandCombineOp(float[][], java.awt.RenderingHints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandCombineOp float[][] getMatrix()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.image.WritableRaster createCompatibleDestRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.BandedSampleModel BandedSampleModel(int, int, int, int, int[], int[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel BandedSampleModel(int, int, int, int, int[], int[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel double getSampleDouble(int, int, int, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel float getSampleFloat(int, int, int, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int getSample(int, int, int, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] createIndicesArray(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] createOffsetArray(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] getPixels(int, int, int, int, int[], java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] getPixels(int, int, int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel java.awt.image.DataBuffer createDataBuffer()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel java.lang.Object getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.BandedSampleModel void setSample(int, int, int, double, java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel void setSample(int, int, int, float, java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BandedSampleModel void setSample(int, int, int, int, java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferStrategy BufferStrategy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferStrategy void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage BufferedImage(int, int, int, java.awt.image.IndexColorModel) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage BufferedImage(java.awt.image.ColorModel, java.awt.image.WritableRaster, boolean, java.util.Hashtable&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage BufferedImage(java.awt.image.ColorModel, java.awt.image.WritableRaster, boolean, java.util.Hashtable&lt;?,?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage boolean hasTileWriters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage boolean isAlphaPremultiplied()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage boolean isStandard(java.awt.image.ColorModel, java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage boolean isStandard(java.awt.image.ColorModel, java.awt.image.WritableRaster) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage int getHeight(java.awt.image.ImageObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage int getMinTileX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getMinTileY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getNumXTiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getNumYTiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getWidth(java.awt.image.ImageObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage int[] getRGB(int, int, int, int, int[], int, int) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage int[] getRGB(int, int, int, int, int[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.Point[] getWritableTileIndices()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.BufferedImage getSubimage(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.Raster getData()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.Raster getData(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.Raster getData(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.WritableRaster getRaster()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.WritableRaster getWritableTile(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.lang.Object getProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage java.lang.Object getProperty(java.lang.String, java.awt.image.ImageObserver) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImage java.lang.String[] getPropertyNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage java.util.Vector&lt;java.awt.image.RenderedImage&gt; getSources()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage void addTileObserver(java.awt.image.TileObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage void addTileObserver(java.awt.image.TileObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage void releaseWritableTile(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage void removeTileObserver(java.awt.image.TileObserver) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.BufferedImage void removeTileObserver(java.awt.image.TileObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage void setData(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImageFilter BufferedImageFilter(java.awt.image.BufferedImageOp) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.BufferedImageFilter java.awt.image.BufferedImageOp getBufferedImageOp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImageFilter java.awt.image.WritableRaster createDCMraster()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ByteLookupTable ByteLookupTable(int, byte[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ByteLookupTable ByteLookupTable(int, byte[][]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ByteLookupTable byte[] lookupPixel(byte[], byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ByteLookupTable byte[] lookupPixel(byte[], byte[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ByteLookupTable byte[][] getTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ByteLookupTable int[] lookupPixel(int[], int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ByteLookupTable int[] lookupPixel(int[], int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp ColorConvertOp(java.awt.color.ColorSpace, java.awt.RenderingHints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp ColorConvertOp(java.awt.color.ColorSpace, java.awt.color.ColorSpace, java.awt.RenderingHints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp ColorConvertOp(java.awt.color.ColorSpace, java.awt.color.ColorSpace, java.awt.RenderingHints) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp ColorConvertOp(java.awt.color.ICC_Profile[], java.awt.RenderingHints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp int getRenderingIntent(java.awt.color.ICC_Profile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.color.ICC_Profile[] getICC_Profiles()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage ICCBIFilter(java.awt.image.BufferedImage, java.awt.color.ColorSpace, java.awt.image.BufferedImage, java.awt.color.ColorSpace) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage ICCBIFilter(java.awt.image.BufferedImage, java.awt.color.ColorSpace, java.awt.image.BufferedImage, java.awt.color.ColorSpace)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel, java.awt.color.ColorSpace) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel, java.awt.color.ColorSpace) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel, java.awt.color.ColorSpace)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage nonICCBIFilter(java.awt.image.BufferedImage, java.awt.color.ColorSpace, java.awt.image.BufferedImage, java.awt.color.ColorSpace) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage nonICCBIFilter(java.awt.image.BufferedImage, java.awt.color.ColorSpace, java.awt.image.BufferedImage, java.awt.color.ColorSpace) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.BufferedImage nonICCBIFilter(java.awt.image.BufferedImage, java.awt.color.ColorSpace, java.awt.image.BufferedImage, java.awt.color.ColorSpace)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.WritableRaster createCompatibleDestRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.WritableRaster createCompatibleDestRaster(java.awt.image.Raster)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.WritableRaster nonICCRasterFilter(java.awt.image.Raster, java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.WritableRaster nonICCRasterFilter(java.awt.image.Raster, java.awt.image.WritableRaster) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.image.WritableRaster nonICCRasterFilter(java.awt.image.Raster, java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp void getMinMaxValsFromColorSpaces(java.awt.color.ColorSpace, java.awt.color.ColorSpace) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp void getMinMaxValsFromColorSpaces(java.awt.color.ColorSpace, java.awt.color.ColorSpace) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp void getMinMaxValsFromProfiles(java.awt.color.ICC_Profile, java.awt.color.ICC_Profile) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorConvertOp void getMinMaxValsFromProfiles(java.awt.color.ICC_Profile, java.awt.color.ICC_Profile) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel ColorModel(int, int[], java.awt.color.ColorSpace, boolean, boolean, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel ColorModel(int, int[], java.awt.color.ColorSpace, boolean, boolean, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean hasAlpha()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean isAlphaPremultiplied()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean isCompatibleRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel boolean isCompatibleSampleModel(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel boolean isLinearGRAYspace(java.awt.color.ColorSpace) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel boolean isLinearGRAYspace(java.awt.color.ColorSpace)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean isLinearRGBspace(java.awt.color.ColorSpace) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel boolean isLinearRGBspace(java.awt.color.ColorSpace)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel byte[] getLinearGray16ToOtherGray8LUT(java.awt.color.ICC_ColorSpace)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel float[] getNormalizedComponents(int[], int, float[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel float[] getNormalizedComponents(int[], int, float[], int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel float[] getNormalizedComponents(int[], int, float[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel int getAlpha(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel int getBlue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel int getDataElement(int[], int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel int getDefaultTransferType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getGreen(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel int getNumColorComponents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getNumComponents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getPixelSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getRed(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel int getTransferType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int[] getComponentSize()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel int[] getComponents(int, int[], int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel int[] getComponents(java.lang.Object, int[], int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel int[] getComponents(java.lang.Object, int[], int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel int[] getUnnormalizedComponents(float[], int, int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel int[] getUnnormalizedComponents(float[], int, int[], int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel int[] getUnnormalizedComponents(float[], int, int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel java.awt.color.ColorSpace getColorSpace()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel java.awt.image.WritableRaster getAlphaRaster(java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel java.awt.image.WritableRaster getAlphaRaster(java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;!null-&gt;null;null-&gt;null&quot;,pure=true"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel java.lang.Object getDataElements(int, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel java.lang.Object getDataElements(int[], int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel java.lang.Object getDataElements(int[], int, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ColorModel java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ColorModel short[] getLinearGray16ToOtherGray16LUT(java.awt.color.ICC_ColorSpace)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel void finalize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentColorModel ComponentColorModel(java.awt.color.ColorSpace, boolean, boolean, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel ComponentColorModel(java.awt.color.ColorSpace, int[], boolean, boolean, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel ComponentColorModel(java.awt.color.ColorSpace, int[], boolean, boolean, int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel boolean isCompatibleRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel boolean isCompatibleSampleModel(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel boolean isCompatibleSampleModel(java.awt.image.SampleModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentColorModel float[] getNormalizedComponents(int[], int, float[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel float[] getNormalizedComponents(int[], int, float[], int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel float[] getNormalizedComponents(int[], int, float[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel float[] getNormalizedComponents(java.lang.Object, float[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int bitsHelper(int, java.awt.color.ColorSpace, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int extractComponent(java.lang.Object, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int getDataElement(int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] bitsArrayHelper(int[], int, java.awt.color.ColorSpace, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] bitsArrayHelper(int[], int, java.awt.color.ColorSpace, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] getComponents(int, int[], int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] getComponents(int, int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] getComponents(java.lang.Object, int[], int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] getComponents(java.lang.Object, int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] getUnnormalizedComponents(float[], int, int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] getUnnormalizedComponents(float[], int, int[], int) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel int[] getUnnormalizedComponents(float[], int, int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel java.awt.image.WritableRaster createCompatibleWritableRaster(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel java.awt.image.WritableRaster getAlphaRaster(java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel java.lang.Object getDataElements(float[], int, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel java.lang.Object getDataElements(float[], int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null;_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentColorModel java.lang.Object getDataElements(int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentColorModel java.lang.Object getDataElements(int[], int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentColorModel java.lang.Object getDataElements(int[], int, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentColorModel java.lang.Object getDataElements(int[], int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null;_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel ComponentSampleModel(int, int, int, int, int, int[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel ComponentSampleModel(int, int, int, int, int, int[], int[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel ComponentSampleModel(int, int, int, int, int, int[], int[]) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel double getSampleDouble(int, int, int, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel float getSampleFloat(int, int, int, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getOffset(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getOffset(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getSample(int, int, int, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] getPixels(int, int, int, int, int[], java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] getPixels(int, int, int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] getSampleSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] orderBands(int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] orderBands(int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel java.awt.image.DataBuffer createDataBuffer()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel java.lang.Object getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel long getBufferSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel void setSample(int, int, int, double, java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel void setSample(int, int, int, float, java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ComponentSampleModel void setSample(int, int, int, int, java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp int getEdgeCondition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.image.WritableRaster createCompatibleDestRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.CropImageFilter int addWithoutOverflow(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.CropImageFilter void setProperties(java.util.Hashtable&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer DataBuffer(int, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer DataBuffer(sun.java2d.StateTrackable.State, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer DataBuffer(sun.java2d.StateTrackable.State, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer DataBuffer(sun.java2d.StateTrackable.State, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer DataBuffer(sun.java2d.StateTrackable.State, int, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer DataBuffer(sun.java2d.StateTrackable.State, int, int, int, int[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer int getDataType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int getNumBanks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int[] toIntArray(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.DataBuffer int[] toIntArray(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.DataBuffer.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer.1 byte[] getData(java.awt.image.DataBufferByte, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer.1 byte[] getData(java.awt.image.DataBufferByte, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer.1 int[] getData(java.awt.image.DataBufferInt, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer.1 int[] getData(java.awt.image.DataBufferInt, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer.1 short[] getData(java.awt.image.DataBufferUShort, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer.1 short[] getData(java.awt.image.DataBufferUShort, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer.1 sun.java2d.StateTrackableDelegate getTrackable(java.awt.image.DataBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBuffer.1 sun.java2d.StateTrackableDelegate getTrackable(java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer.1 void setTrackable(java.awt.image.DataBuffer, sun.java2d.StateTrackableDelegate) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferByte DataBufferByte(byte[][], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferByte DataBufferByte(byte[][], int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferByte DataBufferByte(byte[][], int, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferByte int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferByte int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble DataBufferDouble(double[][], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferDouble DataBufferDouble(double[][], int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferDouble DataBufferDouble(double[][], int, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferDouble double getElemDouble(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble double getElemDouble(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble float getElemFloat(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble float getElemFloat(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat DataBufferFloat(float[][], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferFloat DataBufferFloat(float[][], int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferFloat DataBufferFloat(float[][], int, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferFloat double getElemDouble(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat double getElemDouble(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat float getElemFloat(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat float getElemFloat(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferInt DataBufferInt(int[][], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferInt DataBufferInt(int[][], int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferInt DataBufferInt(int[][], int, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferInt int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferInt int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferShort DataBufferShort(short[][], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferShort DataBufferShort(short[][], int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferShort DataBufferShort(short[][], int, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferShort int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferShort int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferUShort DataBufferUShort(short[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferUShort DataBufferUShort(short[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferUShort DataBufferUShort(short[][], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferUShort DataBufferUShort(short[][], int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferUShort DataBufferUShort(short[][], int, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DataBufferUShort int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferUShort int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel DirectColorModel(java.awt.color.ColorSpace, int, int, int, int, int, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel boolean isCompatibleRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel int getAlpha(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getAlpha(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel int getAlphaMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getBlue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel int getBlueMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getDataElement(int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getGreen(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel int getGreenMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getRGB(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel int getRed(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel int getRedMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getsRGBComponentFromLinearRGB(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getsRGBComponentFromsRGB(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int[] getComponents(int, int[], int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.DirectColorModel int[] getComponents(int, int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel int[] getComponents(java.lang.Object, int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel int[] getComponents(java.lang.Object, int[], int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.DirectColorModel int[] getComponents(java.lang.Object, int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel java.awt.image.WritableRaster createCompatibleWritableRaster(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.DirectColorModel java.lang.Object getDataElements(int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel java.lang.Object getDataElements(int[], int, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.DirectColorModel java.lang.Object getDataElements(int[], int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null;_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ImageFilter ImageFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ImageFilter java.awt.image.ImageFilter getFilterInstance(java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ImageFilter void resendTopDownLeftRight(java.awt.image.ImageProducer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ImageFilter void setProperties(java.util.Hashtable&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel IndexColorModel(int, int, byte[], byte[], byte[], byte[]) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.IndexColorModel IndexColorModel(int, int, int[], int, int, java.math.BigInteger) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.IndexColorModel boolean isCompatibleRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel boolean isCompatibleSampleModel(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.IndexColorModel boolean isCompatibleSampleModel(java.awt.image.SampleModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int calcRealMapSize(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getAlpha(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getBlue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getDataElement(int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel int getGreen(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getMapSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getRGB(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getRed(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getTransparentPixel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int[] getComponents(int, int[], int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.IndexColorModel int[] getComponents(int, int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel int[] getComponents(java.lang.Object, int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.awt.image.BufferedImage convertToIntDiscrete(java.awt.image.Raster, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.awt.image.BufferedImage convertToIntDiscrete(java.awt.image.Raster, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.awt.image.WritableRaster createCompatibleWritableRaster(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.lang.Object getDataElements(int, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.lang.Object getDataElements(int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.lang.Object getDataElements(int[], int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.lang.Object installpixel(java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.lang.Object installpixel(java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel java.math.BigInteger getAllValid()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.IndexColorModel void finalize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel void setRGBs(int, byte[], byte[], byte[], byte[]) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.Kernel Kernel(int, int, float[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Kernel float[] getKernelData(float[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.Kernel float[] getKernelData(float[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Kernel int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Kernel int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Kernel int getXOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Kernel int getYOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.LookupOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.LookupOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.LookupTable getTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.WritableRaster createCompatibleDestRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp void byteFilter(java.awt.image.ByteLookupTable, java.awt.image.Raster, java.awt.image.WritableRaster, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupOp void shortFilter(java.awt.image.ShortLookupTable, java.awt.image.Raster, java.awt.image.WritableRaster, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.LookupTable int getNumComponents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.LookupTable int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MemoryImageSource MemoryImageSource(int, int, int[], int, int, java.util.Hashtable&lt;?,?&gt;) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MemoryImageSource MemoryImageSource(int, int, java.awt.image.ColorModel, byte[], int, int, java.util.Hashtable&lt;?,?&gt;) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MemoryImageSource MemoryImageSource(int, int, java.awt.image.ColorModel, int[], int, int, java.util.Hashtable&lt;?,?&gt;) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MemoryImageSource void initialize(int, int, java.awt.image.ColorModel, java.lang.Object, int, int, java.util.Hashtable) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MemoryImageSource void requestTopDownLeftRightResend(java.awt.image.ImageConsumer) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MemoryImageSource void requestTopDownLeftRightResend(java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getBitOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getDataBitOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getNumDataElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getOffset(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getPixelBitStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getSample(int, int, int, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getSampleSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getTransferType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int[] getSampleSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel java.awt.image.DataBuffer createDataBuffer()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel java.lang.Object getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel void setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel void setPixel(int, int, int[], java.awt.image.DataBuffer) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel void setPixel(int, int, int[], java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel void setSample(int, int, int, int, java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PackedColorModel PackedColorModel(java.awt.color.ColorSpace, int, int, int, int, int, boolean, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PackedColorModel PackedColorModel(java.awt.color.ColorSpace, int, int[], int, boolean, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PackedColorModel PackedColorModel(java.awt.color.ColorSpace, int, int[], int, boolean, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PackedColorModel boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.PackedColorModel boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.PackedColorModel boolean isCompatibleSampleModel(java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.PackedColorModel boolean isCompatibleSampleModel(java.awt.image.SampleModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.PackedColorModel int countBits(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PackedColorModel int getMask(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PackedColorModel int[] createBitsArray(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PackedColorModel int[] createBitsArray(int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PackedColorModel int[] createBitsArray(int[], int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PackedColorModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PackedColorModel java.awt.image.WritableRaster getAlphaRaster(java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.PackedColorModel void DecomposeMask(int, int, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.PixelGrabber PixelGrabber(java.awt.Image, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PixelGrabber PixelGrabber(java.awt.Image, int, int, int, int, int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PixelGrabber int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber int getStatus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber int status()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber java.lang.Object getPixels()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber void setColorModel(java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.PixelGrabber void setColorModel(java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber void setHints(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber void setProperties(java.util.Hashtable&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.PixelGrabber void setProperties(java.util.Hashtable&lt;?,?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelInterleavedSampleModel PixelInterleavedSampleModel(int, int, int, int, int, int[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PixelInterleavedSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelInterleavedSampleModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PixelInterleavedSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.PixelInterleavedSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RGBImageFilter RGBImageFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.RGBImageFilter java.awt.image.IndexColorModel filterIndexColorModel(java.awt.image.IndexColorModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RGBImageFilter java.awt.image.IndexColorModel filterIndexColorModel(java.awt.image.IndexColorModel)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RGBImageFilter void setColorModel(java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Rectangle, java.awt.Point, java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Rectangle, java.awt.Point, java.awt.image.Raster) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Rectangle, java.awt.Point, java.awt.image.Raster) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster Raster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Rectangle, java.awt.Point, java.awt.image.Raster) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getMinX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getMinY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getNumBands()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getSampleModelTranslateX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getSampleModelTranslateY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.DataBuffer getDataBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster java.awt.image.Raster createChild(int, int, int, int, int, int, int[]) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.Raster createChild(int, int, int, int, int, int, int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.Raster createRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.Raster createRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.Raster createRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.Raster createRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.Raster getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster java.awt.image.SampleModel getSampleModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createBandedRaster(int, int, int, int, int[], int[], java.awt.Point) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createBandedRaster(int, int, int, int, int[], int[], java.awt.Point) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createBandedRaster(int, int, int, int, int[], int[], java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createBandedRaster(int, int, int, int, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createBandedRaster(java.awt.image.DataBuffer, int, int, int, int[], int[], java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createBandedRaster(java.awt.image.DataBuffer, int, int, int, int[], int[], java.awt.Point) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createBandedRaster(java.awt.image.DataBuffer, int, int, int, int[], int[], java.awt.Point) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createBandedRaster(java.awt.image.DataBuffer, int, int, int, int[], int[], java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createCompatibleWritableRaster()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createCompatibleWritableRaster(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createCompatibleWritableRaster(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createInterleavedRaster(int, int, int, int, int, int[], java.awt.Point) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createInterleavedRaster(int, int, int, int, int, int[], java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createInterleavedRaster(int, int, int, int, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createInterleavedRaster(java.awt.image.DataBuffer, int, int, int, int, int[], java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createInterleavedRaster(java.awt.image.DataBuffer, int, int, int, int, int[], java.awt.Point) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createInterleavedRaster(java.awt.image.DataBuffer, int, int, int, int, int[], java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createPackedRaster(int, int, int, int, int, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createPackedRaster(int, int, int, int[], java.awt.Point) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createPackedRaster(int, int, int, int[], java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createPackedRaster(java.awt.image.DataBuffer, int, int, int, int[], java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createPackedRaster(java.awt.image.DataBuffer, int, int, int, int[], java.awt.Point) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createPackedRaster(java.awt.image.DataBuffer, int, int, int, int[], java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createPackedRaster(java.awt.image.DataBuffer, int, int, int, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createPackedRaster(java.awt.image.DataBuffer, int, int, int, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.Raster java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ReplicateScaleFilter void setProperties(java.util.Hashtable&lt;?,?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp RescaleOp(float[], float[], java.awt.RenderingHints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp RescaleOp(float[], float[], java.awt.RenderingHints) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp boolean canUseLookup(java.awt.image.Raster, java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp float[] getOffsets(float[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.RescaleOp float[] getOffsets(float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.RescaleOp float[] getScaleFactors(float[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.RescaleOp float[] getScaleFactors(float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.RescaleOp int getNumFactors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.geom.Rectangle2D getBounds2D(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.ByteLookupTable createByteLut(float[], float[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.ByteLookupTable createByteLut(float[], float[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.ShortLookupTable createShortLut(float[], float[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.ShortLookupTable createShortLut(float[], float[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.WritableRaster createCompatibleDestRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.image.WritableRaster filter(java.awt.image.Raster, java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel double[] getPixel(int, int, double[], java.awt.image.DataBuffer) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel double[] getPixel(int, int, double[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel double[] getPixels(int, int, int, int, double[], java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel double[] getPixels(int, int, int, int, double[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel double[] getSamples(int, int, int, int, int, double[], java.awt.image.DataBuffer) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel double[] getSamples(int, int, int, int, int, double[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel float[] getPixel(int, int, float[], java.awt.image.DataBuffer) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel float[] getPixel(int, int, float[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel float[] getPixels(int, int, int, int, float[], java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel float[] getPixels(int, int, int, int, float[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel float[] getSamples(int, int, int, int, int, float[], java.awt.image.DataBuffer) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel float[] getSamples(int, int, int, int, int, float[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel int getDataType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getNumBands()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getTransferType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel int[] getPixels(int, int, int, int, int[], java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel int[] getPixels(int, int, int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel int[] getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SampleModel int[] getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SampleModel java.lang.Object getDataElements(int, int, int, int, java.lang.Object, java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,_,!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.ShortLookupTable ShortLookupTable(int, short[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ShortLookupTable ShortLookupTable(int, short[][]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ShortLookupTable int[] lookupPixel(int[], int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ShortLookupTable int[] lookupPixel(int[], int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ShortLookupTable short[] lookupPixel(short[], short[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ShortLookupTable short[] lookupPixel(short[], short[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.ShortLookupTable short[][] getTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel SinglePixelPackedSampleModel(int, int, int, int, int[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel SinglePixelPackedSampleModel(int, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getNumDataElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getOffset(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getSample(int, int, int, java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getSampleSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int[] getPixel(int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int[] getPixels(int, int, int, int, int[], java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int[] getPixels(int, int, int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int[] getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int[] getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel java.awt.image.DataBuffer createDataBuffer()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel java.awt.image.SampleModel createSubsetSampleModel(int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel java.lang.Object getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel long getBufferSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel void setPixel(int, int, int[], java.awt.image.DataBuffer) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel void setSample(int, int, int, int, java.awt.image.DataBuffer) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.VolatileImage int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Rectangle, java.awt.Point, java.awt.image.WritableRaster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Rectangle, java.awt.Point, java.awt.image.WritableRaster) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Rectangle, java.awt.Point, java.awt.image.WritableRaster) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster WritableRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Rectangle, java.awt.Point, java.awt.image.WritableRaster) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster java.awt.image.WritableRaster createWritableChild(int, int, int, int, int, int, int[]) 6">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.image.WritableRaster java.awt.image.WritableRaster createWritableChild(int, int, int, int, int, int, int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster java.awt.image.WritableRaster getWritableParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.awt.image.WritableRaster void setDataElements(int, int, java.awt.image.Raster) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.image.WritableRaster void setRect(int, int, java.awt.image.Raster) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
