<root>
  <item name="java.awt.font.CharArrayIterator char current()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.CharArrayIterator char next()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.CharArrayIterator char previous()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.CharArrayIterator int getBeginIndex()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.CharArrayIterator int getEndIndex()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.CharArrayIterator int getIndex()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.CharArrayIterator java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.CharArrayIterator void reset(char[], int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.FontRenderContext FontRenderContext()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.FontRenderContext FontRenderContext(java.awt.geom.AffineTransform, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.FontRenderContext boolean equals(java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.FontRenderContext boolean isAntiAliased()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.FontRenderContext boolean usesFractionalMetrics()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.FontRenderContext java.awt.geom.AffineTransform getTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.GlyphJustificationInfo boolean priorityIsValid(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics boolean isCombining()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics boolean isComponent()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics boolean isLigature()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics boolean isStandard()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics boolean isWhitespace()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics float getAdvance()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics float getAdvanceX()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics float getAdvanceY()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics float getLSB()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics float getRSB()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics int getType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphMetrics java.awt.geom.Rectangle2D getBounds2D()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.GlyphVector GlyphVector()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphVector int getGlyphCharIndex(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphVector int getLayoutFlags()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GlyphVector int[] getGlyphCharIndices(int, int, int[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.GlyphVector int[] getGlyphCharIndices(int, int, int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.GlyphVector java.awt.Rectangle getGlyphPixelBounds(int, java.awt.font.FontRenderContext, float, float) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.GlyphVector java.awt.Rectangle getGlyphPixelBounds(int, java.awt.font.FontRenderContext, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.GlyphVector java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext, float, float) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.GlyphVector java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext, float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.GraphicAttribute int getAlignment()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.GraphicAttribute java.awt.Shape getOutline(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.GraphicAttribute java.awt.font.GlyphJustificationInfo getJustificationInfo()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.GraphicAttribute java.awt.geom.Rectangle2D getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.ImageGraphicAttribute ImageGraphicAttribute(java.awt.Image, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.ImageGraphicAttribute ImageGraphicAttribute(java.awt.Image, int, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.ImageGraphicAttribute boolean equals(java.awt.font.ImageGraphicAttribute) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.ImageGraphicAttribute boolean equals(java.awt.font.ImageGraphicAttribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.ImageGraphicAttribute boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.ImageGraphicAttribute boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.ImageGraphicAttribute java.awt.geom.Rectangle2D getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.ImageGraphicAttribute void draw(java.awt.Graphics2D, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.LayoutPath LayoutPath()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.LineBreakMeasurer LineBreakMeasurer(java.text.AttributedCharacterIterator, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.LineBreakMeasurer LineBreakMeasurer(java.text.AttributedCharacterIterator, java.text.BreakIterator, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.LineBreakMeasurer int getPosition()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.LineBreakMeasurer void deleteChar(java.text.AttributedCharacterIterator, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.LineBreakMeasurer void insertChar(java.text.AttributedCharacterIterator, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.LineMetrics LineMetrics()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper NumericShaper(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.NumericShaper NumericShaper(java.awt.font.NumericShaper.Range, java.util.Set&lt;java.awt.font.NumericShaper.Range&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.NumericShaper boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.NumericShaper boolean isContextual()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper boolean isStrongDirectional(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.NumericShaper int getHighBit(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper int getRanges()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper int search(int, int[], int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper int search(int, int[], int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getContextualShaper(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getContextualShaper(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getContextualShaper(java.util.Set&lt;java.awt.font.NumericShaper.Range&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getContextualShaper(java.util.Set&lt;java.awt.font.NumericShaper.Range&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getContextualShaper(java.util.Set&lt;java.awt.font.NumericShaper.Range&gt;, java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getContextualShaper(java.util.Set&lt;java.awt.font.NumericShaper.Range&gt;, java.awt.font.NumericShaper.Range) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getContextualShaper(java.util.Set&lt;java.awt.font.NumericShaper.Range&gt;, java.awt.font.NumericShaper.Range)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getShaper(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getShaper(java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper getShaper(java.awt.font.NumericShaper.Range)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper java.awt.font.NumericShaper.Range rangeForCodePoint(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.NumericShaper java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper void checkParams(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper void shape(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper void shape(char[], int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper void shape(char[], int, int, java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper void shape(char[], int, int, java.awt.font.NumericShaper.Range) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper void shapeContextually(char[], int, int, java.awt.font.NumericShaper.Range) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.NumericShaper void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.1 1(java.awt.font.NumericShaper)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.NumericShaper.1 int compare(java.awt.font.NumericShaper.Range, java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.1 int compare(java.awt.font.NumericShaper.Range, java.awt.font.NumericShaper.Range) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.1 int compare(java.awt.font.NumericShaper.Range, java.awt.font.NumericShaper.Range)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range Range(java.lang.String, int, int, int, int, java.awt.font.NumericShaper.1) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range boolean access$100(java.awt.font.NumericShaper.Range, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range boolean access$100(java.awt.font.NumericShaper.Range, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range boolean inRange(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range char getNumericBase()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$200(java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$200(java.awt.font.NumericShaper.Range)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$300(java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$300(java.awt.font.NumericShaper.Range)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$400(java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$400(java.awt.font.NumericShaper.Range)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$500(java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$700(java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$700(java.awt.font.NumericShaper.Range)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int access$900(java.util.Set) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int getDigitBase()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int toRangeIndex(java.awt.font.NumericShaper.Range) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range int toRangeMask(java.util.Set&lt;java.awt.font.NumericShaper.Range&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.NumericShaper.Range.1 char getNumericBase()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.ShapeGraphicAttribute boolean equals(java.awt.font.ShapeGraphicAttribute) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.ShapeGraphicAttribute boolean equals(java.awt.font.ShapeGraphicAttribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.ShapeGraphicAttribute boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.ShapeGraphicAttribute boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.ShapeGraphicAttribute java.awt.Shape getOutline(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.ShapeGraphicAttribute java.awt.geom.Rectangle2D getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.ShapeGraphicAttribute void draw(java.awt.Graphics2D, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph StyledParagraph(java.text.AttributedCharacterIterator, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph int findRunContaining(int, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph int findRunContaining(int, int[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.StyledParagraph int[] addToVector(java.lang.Object, int, java.util.Vector, int[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph int[] addToVector(java.lang.Object, int, java.util.Vector, int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,!null-&gt;!null;_,_,_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.StyledParagraph java.awt.font.StyledParagraph deleteChar(java.text.AttributedCharacterIterator, char[], int, java.awt.font.StyledParagraph) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph java.awt.font.StyledParagraph deleteChar(java.text.AttributedCharacterIterator, char[], int, java.awt.font.StyledParagraph) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph java.awt.font.StyledParagraph deleteChar(java.text.AttributedCharacterIterator, char[], int, java.awt.font.StyledParagraph)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.StyledParagraph java.awt.font.StyledParagraph insertChar(java.text.AttributedCharacterIterator, char[], int, java.awt.font.StyledParagraph) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph java.awt.font.StyledParagraph insertChar(java.text.AttributedCharacterIterator, char[], int, java.awt.font.StyledParagraph) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph java.awt.font.StyledParagraph insertChar(java.text.AttributedCharacterIterator, char[], int, java.awt.font.StyledParagraph)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.StyledParagraph java.lang.Object getGraphicOrFont(java.util.Map) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph java.util.Map addInputMethodAttrs(java.util.Map) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph java.util.Map addInputMethodAttrs(java.util.Map)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.StyledParagraph void addFonts(char[], java.util.Map, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph void deleteFrom(int, int[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.StyledParagraph void insertInto(int, int[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextHitInfo TextHitInfo(int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.TextHitInfo boolean equals(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextHitInfo boolean equals(java.awt.font.TextHitInfo)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextHitInfo boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextHitInfo boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextHitInfo boolean isLeadingEdge()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextHitInfo int getCharIndex()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextHitInfo int getInsertionIndex()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextHitInfo int hashCode()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextHitInfo java.awt.font.TextHitInfo afterOffset(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextHitInfo java.awt.font.TextHitInfo beforeOffset(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextHitInfo java.awt.font.TextHitInfo getOffsetHit(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextHitInfo java.awt.font.TextHitInfo getOtherHit()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextHitInfo java.awt.font.TextHitInfo leading(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextHitInfo java.awt.font.TextHitInfo trailing(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextHitInfo java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout TextLayout(java.awt.font.TextLine, byte, float[], float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout TextLayout(java.awt.font.TextLine, byte, float[], float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.TextLayout TextLayout(java.lang.String, java.awt.Font, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout TextLayout(java.lang.String, java.awt.Font, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout TextLayout(java.lang.String, java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout TextLayout(java.lang.String, java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout TextLayout(java.text.AttributedCharacterIterator, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout boolean equals(java.awt.font.TextLayout) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout boolean equals(java.awt.font.TextLayout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.TextLayout boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.TextLayout boolean isLeftToRight()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout boolean isVertical()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout byte getBaseline()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout byte getBaselineFromGraphic(java.awt.font.GraphicAttribute) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout byte getBaselineFromGraphic(java.awt.font.GraphicAttribute)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout double[] getCaretPath(int, java.awt.geom.Rectangle2D, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout double[] getCaretPath(int, java.awt.geom.Rectangle2D, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout double[] getCaretPath(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout double[] getCaretPath(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout double[] getCaretPath(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float caretToPointDistance(float[], float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float caretToPointDistance(float[], float, float)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getBaselineOffsets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfo(int, java.awt.geom.Rectangle2D, float[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfo(int, java.awt.geom.Rectangle2D, float[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfo(int, java.awt.geom.Rectangle2D, float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null;_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfo(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfo(java.awt.font.TextHitInfo)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfo(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfo(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfo(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfoTestInternal(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfoTestInternal(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout float[] getCaretInfoTestInternal(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout int getCharacterCount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout int hitToCaret(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout int hitToCaret(java.awt.font.TextHitInfo)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout int sameBaselineUpTo(java.awt.Font, char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout int sameBaselineUpTo(java.awt.Font, char[], int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout int sameBaselineUpTo(java.awt.Font, char[], int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout int[] getLogicalRangesForVisualSelection(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout int[] getLogicalRangesForVisualSelection(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Font singleFont(char[], int, int, java.util.Map) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getCaretShape(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getCaretShape(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getCaretShape(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getLogicalHighlightShape(int, int, java.awt.geom.Rectangle2D) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getOutline(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getVisualHighlightShape(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getVisualHighlightShape(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getVisualHighlightShape(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getVisualHighlightShape(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape getVisualHighlightShape(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape[] getCaretShapes(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape[] getCaretShapes(int, java.awt.geom.Rectangle2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape[] getCaretShapes(int, java.awt.geom.Rectangle2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape[] getCaretShapes(int, java.awt.geom.Rectangle2D, java.awt.font.TextLayout.CaretPolicy) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape[] getCaretShapes(int, java.awt.geom.Rectangle2D, java.awt.font.TextLayout.CaretPolicy) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.Shape[] getCaretShapes(int, java.awt.geom.Rectangle2D, java.awt.font.TextLayout.CaretPolicy)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.LayoutPath getLayoutPath()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo access$000(java.awt.font.TextLayout, java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo access$000(java.awt.font.TextLayout, java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo access$000(java.awt.font.TextLayout, java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo caretToHit(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo getNextLeftHit(int, java.awt.font.TextLayout.CaretPolicy) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo getNextLeftHit(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo getNextRightHit(int, java.awt.font.TextLayout.CaretPolicy) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo getNextRightHit(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo getStrongHit(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo getStrongHit(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo getVisualOtherHit(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo getVisualOtherHit(java.awt.font.TextHitInfo)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo hitTestChar(float, float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo hitTestChar(float, float, java.awt.geom.Rectangle2D) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextHitInfo hitTestChar(float, float, java.awt.geom.Rectangle2D)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextLayout getJustifiedLayout(float)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.font.TextLine getTextLineForTesting()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.geom.GeneralPath boundingShape(double[], double[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.geom.GeneralPath boundingShape(double[], double[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.geom.GeneralPath caretBoundingShape(int, int, java.awt.geom.Rectangle2D) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.geom.GeneralPath leftShape(java.awt.geom.Rectangle2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.geom.GeneralPath pathToShape(double[], boolean, sun.font.LayoutPathImpl) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.geom.GeneralPath pathToShape(double[], boolean, sun.font.LayoutPathImpl) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.geom.GeneralPath rightShape(java.awt.geom.Rectangle2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.awt.geom.Rectangle2D getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void checkTextHit(java.awt.font.TextHitInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void draw(java.awt.Graphics2D, float, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void fastInit(char[], java.awt.Font, java.util.Map, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void fastInit(char[], java.awt.Font, java.util.Map, java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void fastInit(char[], java.awt.Font, java.util.Map, java.awt.font.FontRenderContext) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout void handleJustify(float)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout void hitToPoint(java.awt.font.TextHitInfo, java.awt.geom.Point2D) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void hitToPoint(java.awt.font.TextHitInfo, java.awt.geom.Point2D) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void paragraphInit(byte, sun.font.CoreMetrics, java.util.Map, char[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void paragraphInit(byte, sun.font.CoreMetrics, java.util.Map, char[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLayout void standardInit(java.text.AttributedCharacterIterator, char[], java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout void standardInit(java.text.AttributedCharacterIterator, char[], java.awt.font.FontRenderContext) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout.CaretPolicy CaretPolicy()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLayout.CaretPolicy java.awt.font.TextHitInfo getStrongCaret(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo, java.awt.font.TextLayout) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout.CaretPolicy java.awt.font.TextHitInfo getStrongCaret(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo, java.awt.font.TextLayout) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLayout.CaretPolicy java.awt.font.TextHitInfo getStrongCaret(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo, java.awt.font.TextLayout) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine boolean advanceToFirstFont(java.text.AttributedCharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine boolean isCharLTR(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine boolean isDirectionLTR()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine byte getCharLevel(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine float access$400(java.awt.font.TextLine, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine float applyFunctionAtIndex(int, java.awt.font.TextLine.Function) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine float getAdvanceBetween(sun.font.TextLineComponent[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine float[] access$300(java.awt.font.TextLine) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine float[] access$300(java.awt.font.TextLine)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine float[] getNormalizedOffsets(float[], byte) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine float[] getNormalizedOffsets(float[], byte)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine int access$200(java.awt.font.TextLine, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine int characterCount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine int firstVisualChunk(int[], byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine int firstVisualChunk(int[], byte[], int, int) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine int firstVisualChunk(int[], byte[], int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine int getComponentLogicalIndex(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine int logicalToVisual(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine int visualToLogical(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.TextLine int[] computeComponentOrder(sun.font.TextLineComponent[], int[]) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine int[] computeComponentOrder(sun.font.TextLineComponent[], int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.TextLine java.awt.Font getFontAtCurrentPos(java.text.AttributedCharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.Rectangle computePixelBounds(java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.Rectangle computePixelBounds(java.awt.image.BufferedImage)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.Shape getOutline(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine createLineFromText(char[], java.awt.font.StyledParagraph, sun.font.TextLabelFactory, boolean, float[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine createLineFromText(char[], java.awt.font.StyledParagraph, sun.font.TextLabelFactory, boolean, float[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine createLineFromText(char[], java.awt.font.StyledParagraph, sun.font.TextLabelFactory, boolean, float[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine createLineFromText(char[], java.awt.font.StyledParagraph, sun.font.TextLabelFactory, boolean, float[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine fastCreateTextLine(java.awt.font.FontRenderContext, char[], java.awt.Font, sun.font.CoreMetrics, java.util.Map) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine fastCreateTextLine(java.awt.font.FontRenderContext, char[], java.awt.Font, sun.font.CoreMetrics, java.util.Map) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine fastCreateTextLine(java.awt.font.FontRenderContext, char[], java.awt.Font, sun.font.CoreMetrics, java.util.Map) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine fastCreateTextLine(java.awt.font.FontRenderContext, char[], java.awt.Font, sun.font.CoreMetrics, java.util.Map)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine getJustifiedLine(float, float, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine standardCreateTextLine(java.awt.font.FontRenderContext, java.text.AttributedCharacterIterator, char[], float[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine standardCreateTextLine(java.awt.font.FontRenderContext, java.text.AttributedCharacterIterator, char[], float[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine standardCreateTextLine(java.awt.font.FontRenderContext, java.text.AttributedCharacterIterator, char[], float[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.font.TextLine.TextLineMetrics getMetrics()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine java.awt.geom.Rectangle2D getItalicBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.LayoutPathImpl getLayoutPath()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] access$100(java.awt.font.TextLine) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] access$100(java.awt.font.TextLine)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] createComponentsOnRun(int, int, char[], int[], byte[], sun.font.TextLabelFactory, java.awt.Font, sun.font.CoreMetrics, java.awt.font.FontRenderContext, sun.font.Decoration, sun.font.TextLineComponent[], int) 10">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] createComponentsOnRun(int, int, char[], int[], byte[], sun.font.TextLabelFactory, java.awt.Font, sun.font.CoreMetrics, java.awt.font.FontRenderContext, sun.font.Decoration, sun.font.TextLineComponent[], int) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] createComponentsOnRun(int, int, char[], int[], byte[], sun.font.TextLabelFactory, java.awt.Font, sun.font.CoreMetrics, java.awt.font.FontRenderContext, sun.font.Decoration, sun.font.TextLineComponent[], int) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] createComponentsOnRun(int, int, char[], int[], byte[], sun.font.TextLabelFactory, java.awt.Font, sun.font.CoreMetrics, java.awt.font.FontRenderContext, sun.font.Decoration, sun.font.TextLineComponent[], int) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] createComponentsOnRun(int, int, char[], int[], byte[], sun.font.TextLabelFactory, java.awt.Font, sun.font.CoreMetrics, java.awt.font.FontRenderContext, sun.font.Decoration, sun.font.TextLineComponent[], int) 7">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] expandArray(sun.font.TextLineComponent[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] expandArray(sun.font.TextLineComponent[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] getComponents(java.awt.font.StyledParagraph, char[], int, int, int[], byte[], sun.font.TextLabelFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine sun.font.TextLineComponent[] getComponents(java.awt.font.StyledParagraph, char[], int, int, int[], byte[], sun.font.TextLabelFactory) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine.1 float computeFunction(java.awt.font.TextLine, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine.2 2()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine.2 float computeFunction(java.awt.font.TextLine, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine.3 3()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine.3 float computeFunction(java.awt.font.TextLine, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine.4 4()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine.4 float computeFunction(java.awt.font.TextLine, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextLine.Function Function()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine.Function Function(java.awt.font.TextLine.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TextLine.Function Function(java.awt.font.TextLine.1)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextLine.TextLineMetrics TextLineMetrics(float, float, float, float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.TextMeasurer TextMeasurer(java.text.AttributedCharacterIterator, java.awt.font.FontRenderContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextMeasurer char[] getChars()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TextMeasurer java.awt.font.TextLayout getLayout(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextMeasurer java.awt.font.TextLine makeTextLineOnRange(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextMeasurer void deleteChar(java.text.AttributedCharacterIterator, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextMeasurer void initAll(java.text.AttributedCharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextMeasurer void insertChar(java.text.AttributedCharacterIterator, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TextMeasurer void invalidateComponents()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.font.TransformAttribute TransformAttribute(java.awt.geom.AffineTransform) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.awt.font.TransformAttribute boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.font.TransformAttribute boolean isIdentity()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.awt.font.TransformAttribute java.awt.geom.AffineTransform getTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.font.TransformAttribute void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
