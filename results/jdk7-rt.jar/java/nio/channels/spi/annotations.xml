<root>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel AbstractInterruptibleChannel()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel boolean access$100(java.nio.channels.spi.AbstractInterruptibleChannel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel boolean access$100(java.nio.channels.spi.AbstractInterruptibleChannel)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel boolean access$102(java.nio.channels.spi.AbstractInterruptibleChannel, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel boolean access$102(java.nio.channels.spi.AbstractInterruptibleChannel, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,false-&gt;false;_,true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel java.lang.Object access$000(java.nio.channels.spi.AbstractInterruptibleChannel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel java.lang.Object access$000(java.nio.channels.spi.AbstractInterruptibleChannel)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel java.lang.Thread access$202(java.nio.channels.spi.AbstractInterruptibleChannel, java.lang.Thread) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel java.lang.Thread access$202(java.nio.channels.spi.AbstractInterruptibleChannel, java.lang.Thread)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel.1 1(java.nio.channels.spi.AbstractInterruptibleChannel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel AbstractSelectableChannel(java.nio.channels.spi.SelectorProvider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel boolean isBlocking()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel boolean isRegistered()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel java.lang.Object blockingLock()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel java.nio.channels.SelectableChannel configureBlocking(boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel java.nio.channels.SelectionKey findKey(java.nio.channels.Selector) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel java.nio.channels.spi.SelectorProvider provider()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel void removeKey(java.nio.channels.SelectionKey) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectionKey AbstractSelectionKey()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectionKey boolean isValid()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectionKey void invalidate()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector java.nio.channels.spi.SelectorProvider provider()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector java.util.Set&lt;java.nio.channels.SelectionKey&gt; cancelledKeys()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector void deregister(java.nio.channels.spi.AbstractSelectionKey) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector.1 1(java.nio.channels.spi.AbstractSelector)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector.1 void interrupt(java.lang.Thread) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.nio.channels.spi.AsynchronousChannelProvider AsynchronousChannelProvider(java.lang.Void) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.nio.channels.spi.AsynchronousChannelProvider AsynchronousChannelProvider(java.lang.Void)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AsynchronousChannelProvider java.nio.channels.spi.AsynchronousChannelProvider provider()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AsynchronousChannelProvider.ProviderHolder ProviderHolder()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.AsynchronousChannelProvider.ProviderHolder.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.SelectorProvider java.nio.channels.Channel inheritedChannel()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.SelectorProvider java.nio.channels.spi.SelectorProvider access$100()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.nio.channels.spi.SelectorProvider java.nio.channels.spi.SelectorProvider access$102(java.nio.channels.spi.SelectorProvider)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.SelectorProvider.1 1()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
</root>
