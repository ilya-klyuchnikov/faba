<root>
  <item name="java.lang.invoke.BoundMethodHandle BoundMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle BoundMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle java.lang.Object internalProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle java.lang.Object internalValues()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandle bindSingle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandle bindSingle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandle bindSingle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodType, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodType, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandles.Lookup access$100()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory Factory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt; generateConcreteBMHClass(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt; generateConcreteBMHClass(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeFieldName(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeFieldName(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeSignature(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeSignature(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.String typeSig(char)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.BoundMethodHandle.SpeciesData speciesDataFromConcreteBMHClass(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle linkConstructor(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle linkConstructor(java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle makeCbmhCtor(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle makeGetter(java.lang.Class&lt;?&gt;, java.lang.String, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeCtors(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String, java.lang.invoke.MethodHandle[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeCtors(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String, java.lang.invoke.MethodHandle[]) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeCtors(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String, java.lang.invoke.MethodHandle[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null;_,_,null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeGetters(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodHandle[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Factory void emitPushFields(java.lang.String, java.lang.String, com.sun.xml.internal.ws.org.objectweb.asm.MethodVisitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.SpeciesData SpeciesData(java.lang.String, java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.SpeciesData boolean isPlaceholder()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.SpeciesData int fieldCount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData getForClass(java.lang.String, java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData updateCache(java.lang.String, java.lang.invoke.BoundMethodHandle.SpeciesData)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.LambdaForm.Name getterName(java.lang.invoke.LambdaForm.Name, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Species_L Species_L(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Species_L Species_L(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Species_L java.lang.invoke.BoundMethodHandle clone(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Species_L java.lang.invoke.BoundMethodHandle clone(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Species_L java.lang.invoke.BoundMethodHandle clone(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Species_L java.lang.invoke.BoundMethodHandle.SpeciesData speciesData()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.BoundMethodHandle.Species_L java.lang.invoke.MethodHandle reinvokerTarget()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.CallSite CallSite(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite CallSite(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite CallSite(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite CallSite(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite java.lang.Object maybeReBox(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.CallSite java.lang.invoke.CallSite makeSite(java.lang.invoke.MethodHandle, java.lang.String, java.lang.invoke.MethodType, java.lang.Object, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite java.lang.invoke.CallSite makeSite(java.lang.invoke.MethodHandle, java.lang.String, java.lang.invoke.MethodType, java.lang.Object, java.lang.Class&lt;?&gt;) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite java.lang.invoke.MethodHandle makeDynamicInvoker()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite java.lang.invoke.WrongMethodTypeException wrongTargetType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.CallSite java.lang.invoke.WrongMethodTypeException wrongTargetType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.CallSite java.lang.invoke.WrongMethodTypeException wrongTargetType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite void checkTargetChange(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite void checkTargetChange(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.CallSite void maybeReBoxElements(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.ConstantCallSite ConstantCallSite(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.ConstantCallSite ConstantCallSite(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.ConstantCallSite ConstantCallSite(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.ConstantCallSite void setTarget(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle DirectMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle DirectMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle DirectMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle DirectMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.DirectMethodHandle.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle DirectMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.DirectMethodHandle.1) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle DirectMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.DirectMethodHandle.1) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle DirectMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.DirectMethodHandle.1) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle boolean checkInitialized(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle boolean shouldBeInitialized(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle int afIndex(byte, boolean, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle int ftypeKind(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object allocateInstance(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object checkBase(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object checkBase(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object checkCast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object checkCast(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object constructorMethod(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object constructorMethod(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object internalMemberName(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object internalMemberName(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object internalMemberNameEnsureInit(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object nullCheck(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object nullCheck(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object staticBase(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.Object staticBase(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.String internalProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Field) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Field)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle maybeRebind(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle maybeRebind(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm makePreparedFieldLambdaForm(byte, boolean, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm preparedFieldLambdaForm(byte, boolean, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm preparedFieldLambdaForm(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MethodType, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.MemberName internalMemberName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle long fieldOffset(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle long fieldOffset(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle long staticOffset(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle long staticOffset(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle void ensureInitialized(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle void maybeCompile(java.lang.invoke.LambdaForm, java.lang.invoke.MemberName) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor Accessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor Accessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor Accessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor Accessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, int, java.lang.invoke.DirectMethodHandle.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor Accessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, int, java.lang.invoke.DirectMethodHandle.1) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor Accessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, int, java.lang.invoke.DirectMethodHandle.1) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor Accessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, int, java.lang.invoke.DirectMethodHandle.1) 4">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor java.lang.Object checkCast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Accessor java.lang.Object internalProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Constructor Constructor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Constructor Constructor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Constructor Constructor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Constructor Constructor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.MemberName, java.lang.Class, java.lang.invoke.DirectMethodHandle.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Constructor Constructor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.MemberName, java.lang.Class, java.lang.invoke.DirectMethodHandle.1) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Constructor Constructor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.MemberName, java.lang.Class, java.lang.invoke.DirectMethodHandle.1) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Constructor Constructor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.invoke.MemberName, java.lang.Class, java.lang.invoke.DirectMethodHandle.1) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.Constructor java.lang.Object internalProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor StaticAccessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.Object, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor StaticAccessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.Object, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor StaticAccessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.Object, long) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor StaticAccessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.Object, long, java.lang.invoke.DirectMethodHandle.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor StaticAccessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.Object, long, java.lang.invoke.DirectMethodHandle.1) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor StaticAccessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.Object, long, java.lang.invoke.DirectMethodHandle.1) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor StaticAccessor(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.invoke.MemberName, java.lang.Object, long, java.lang.invoke.DirectMethodHandle.1) 5">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor java.lang.Object access$400(java.lang.invoke.DirectMethodHandle.StaticAccessor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor java.lang.Object access$400(java.lang.invoke.DirectMethodHandle.StaticAccessor)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor java.lang.Object checkCast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor java.lang.Object internalProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor long access$500(java.lang.invoke.DirectMethodHandle.StaticAccessor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.DirectMethodHandle.StaticAccessor long access$500(java.lang.invoke.DirectMethodHandle.StaticAccessor)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric boolean returnConversionNeeded(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric boolean returnConversionNeeded(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle addReturnConversion(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle addReturnConversion(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatch(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatch(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatchWithConversion(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatchWithConversion(java.lang.invoke.MethodType, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatcher(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dropDispatchArguments(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle makeInitialInvoker()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandles.Lookup lookup()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator InvokerBytecodeGenerator(java.lang.String, java.lang.String, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator InvokerBytecodeGenerator(java.lang.String, java.lang.String, java.lang.invoke.MethodType) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator InvokerBytecodeGenerator(java.lang.String, java.lang.invoke.LambdaForm, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator InvokerBytecodeGenerator(java.lang.invoke.LambdaForm, int, java.lang.String, java.lang.String, java.lang.invoke.MethodType) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator boolean isSelectAlternative(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator boolean isSelectAlternative(java.lang.invoke.MemberName)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator boolean isStaticallyInvocable(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator boolean isStaticallyInvocable(java.lang.invoke.MemberName)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator boolean isStaticallyNameable(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator byte[] generateNamedFunctionInvokerImpl(java.lang.invoke.MethodTypeForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator int getConstantPoolSize(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator int getConstantPoolSize(byte[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.io.File access$000()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.Object[] cpPatches(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.String basicTypeCharSignature(java.lang.String, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.String basicTypeCharSignature(java.lang.String, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.String basicTypeCharSignature(java.lang.String, java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.String constantPlaceholder(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.String getInternalName(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.String getInternalName(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.String makeDumpableClassName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.invoke.MemberName generateCustomizedCode(java.lang.invoke.LambdaForm, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.invoke.MemberName generateLambdaFormInterpreterEntryPoint(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator java.lang.invoke.MemberName generateNamedFunctionInvoker(java.lang.invoke.MethodTypeForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitBoxing(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitConst(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitInvoke(java.lang.invoke.LambdaForm.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitPushArgument(java.lang.invoke.LambdaForm.Name, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitReturnInsn(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitSelectAlternative(java.lang.invoke.LambdaForm.Name, java.lang.invoke.LambdaForm.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitSelectAlternative(java.lang.invoke.LambdaForm.Name, java.lang.invoke.LambdaForm.Name) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitStaticInvoke(java.lang.invoke.MemberName, java.lang.invoke.LambdaForm.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitStaticInvoke(java.lang.invoke.MemberName, java.lang.invoke.LambdaForm.Name) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator void emitUnboxing(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.InvokerBytecodeGenerator.CpPatch java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers Invokers(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers boolean checkInvoker(java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.Object checkGenericType(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.Object checkGenericType(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.Object getCallSiteTarget(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.LambdaForm callSiteForm(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.LambdaForm invokeForm(java.lang.invoke.MethodType, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.MemberName exactInvokerMethod(java.lang.invoke.MethodType, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.MemberName genericInvokerMethod(java.lang.invoke.MethodType, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.MemberName invokeBasicMethod(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.MemberName linkToCallSiteMethod(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.MethodHandle makeBasicInvoker()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.MethodHandle prepareForGenericCall(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.Invokers java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType, java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers void checkExactType(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.Invokers void checkExactType(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm LambdaForm(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm LambdaForm(java.lang.String, int, java.lang.invoke.LambdaForm.Name[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm LambdaForm(java.lang.String, int, java.lang.invoke.LambdaForm.Name[], int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm LambdaForm(java.lang.String, java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm LambdaForm(java.lang.String, java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm LambdaForm(java.lang.String, java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean argumentTypesMatch(java.lang.String, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean argumentTypesMatch(java.lang.String, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean argumentTypesMatch(java.lang.String, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean arityCheck(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean checkInt(java.lang.Class&lt;?&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean checkRef(java.lang.Class&lt;?&gt;, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean checkRef(java.lang.Class&lt;?&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean contains(java.lang.invoke.LambdaForm.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean isValidSignature(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean namesOK(int, java.lang.invoke.LambdaForm.Name[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean namesOK(int, java.lang.invoke.LambdaForm.Name[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean permutedTypesMatch(int[], char[], java.lang.invoke.LambdaForm.Name[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean permutedTypesMatch(int[], char[], java.lang.invoke.LambdaForm.Name[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean permutedTypesMatch(int[], char[], java.lang.invoke.LambdaForm.Name[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;true;_,!null,_,_-&gt;true;_,_,!null,_-&gt;true;_,_,null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean returnTypesMatch(java.lang.String, java.lang.Object[], java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean returnTypesMatch(java.lang.String, java.lang.Object[], java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean returnTypesMatch(java.lang.String, java.lang.Object[], java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,!null-&gt;true;_,_,null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm boolean valueMatches(char, java.lang.Class&lt;?&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_-&gt;true;_,_,!null-&gt;true;_,_,null-&gt;true;_,null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm char basicType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm char returnType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm char signatureReturn(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm char[] basicTypes(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm double zeroD()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm float zeroF()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm int arity()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm int fixResult(int, java.lang.invoke.LambdaForm.Name[])">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm int signatureArity(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm int zeroI()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.Object interpretName(java.lang.invoke.LambdaForm.Name, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.Object interpretWithArgumentsTracing(java.lang.Object...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.Object interpret_L(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.Object interpret_L(java.lang.invoke.MethodHandle, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.Object interpret_L(java.lang.invoke.MethodHandle, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.Object zeroL()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.String basicTypeSignature()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.String basicTypeSignature(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.String basicTypeSignature(java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm addArguments(int, char...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm addArguments(int, char...)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm addArguments(int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm bind(int, java.lang.invoke.BoundMethodHandle.SpeciesData) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm bind(java.lang.invoke.LambdaForm.Name, java.lang.invoke.LambdaForm.Name, java.lang.invoke.BoundMethodHandle.SpeciesData, java.lang.invoke.BoundMethodHandle.SpeciesData) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm bindImmediate(int, char, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm getPreparedForm(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm permuteArguments(int, int[], char[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm permuteArguments(int, int[], char[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm permuteArguments(int, int[], char[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name constantZero(int, char)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name internArgument(java.lang.invoke.LambdaForm.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, char...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] buildEmptyNames(int, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] buildNames(java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] buildNames(java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] buildNames(java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm java.lang.invoke.MethodType signatureType(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm long zeroJ()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm void traceInterpreter(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm void traceInterpreter(java.lang.String, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm void traceInterpreter(java.lang.String, java.lang.Object, java.lang.Object...) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm void traceInterpreter(java.lang.String, java.lang.Object, java.lang.Object...) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm void traceInterpreter(java.lang.String, java.lang.Object, java.lang.Object...) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name Name(java.lang.invoke.LambdaForm.NamedFunction, java.lang.Object...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name Name(java.lang.invoke.LambdaForm.NamedFunction, java.lang.Object...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name Name(java.lang.invoke.MemberName, java.lang.Object...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name Name(java.lang.invoke.MethodHandle, java.lang.Object...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name Name(java.lang.invoke.MethodHandle, java.lang.Object...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name boolean isParam()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name boolean isSiblingBindingBefore(java.lang.invoke.LambdaForm.Name)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name char type()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name int index()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name java.lang.String debugString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name java.lang.String exprString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name cloneWithIndex(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name newIndex(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name replaceName(java.lang.invoke.LambdaForm.Name, java.lang.invoke.LambdaForm.Name) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name replaceName(java.lang.invoke.LambdaForm.Name, java.lang.invoke.LambdaForm.Name)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name replaceNames(java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name[], int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name short access$000(java.lang.invoke.LambdaForm.Name) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.Name short access$000(java.lang.invoke.LambdaForm.Name)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction NamedFunction(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction NamedFunction(java.lang.reflect.Field) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction NamedFunction(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction boolean checkArgumentTypes(java.lang.Object[], java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction boolean checkArgumentTypes(java.lang.Object[], java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction boolean checkArgumentTypes(java.lang.Object[], java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Class&lt;?&gt; memberDeclaringClassOrNull()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLLL_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLLL_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLLL_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLLL_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLLL_V(java.lang.invoke.MethodHandle, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLL_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLL_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLL_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLL_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLLL_V(java.lang.invoke.MethodHandle, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLL_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLL_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLL_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLL_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LLL_V(java.lang.invoke.MethodHandle, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LL_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LL_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LL_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LL_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_LL_V(java.lang.invoke.MethodHandle, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_L_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_L_L(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_L_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_L_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke_L_V(java.lang.invoke.MethodHandle, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke__L(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke__V(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.Object invoke__V(java.lang.invoke.MethodHandle, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.String basicTypeSignature()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.LambdaForm.NamedFunction java.lang.invoke.MethodHandle computeInvoker(java.lang.invoke.MethodTypeForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName MemberName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName MemberName(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName MemberName(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;, java.lang.Void) 3">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MemberName MemberName(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName MemberName(java.lang.reflect.Field) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName MemberName(java.lang.reflect.Field, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName MemberName(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName MemberName(java.lang.reflect.Method, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean access$100(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean access$300(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MemberName boolean equals(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isAbstract()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isBridge()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isCallerSensitive()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isConstructor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isField()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isFieldOrMethod()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isFinal()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isInvocable()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isMethod()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isMethodHandleInvoke()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isNative()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isPackage()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isPrivate()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isProtected()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isPublic()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isResolved()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isStatic()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isSynthetic()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isVarargs()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean isVolatile()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean testAllFlags(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean testAnyFlags(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName boolean testFlags(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName byte getReferenceKind()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName int getModifiers()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.Class&lt;?&gt; getDeclaringClass()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.IllegalAccessException makeAccessException(java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.IllegalAccessException makeAccessException(java.lang.String, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.IllegalAccessException makeAccessException(java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.Object access$002(java.lang.invoke.MemberName, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.Object access$002(java.lang.invoke.MemberName, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.ReflectiveOperationException makeAccessException()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.String getName(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.String getName(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.String message()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.invoke.MemberName asConstructor()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.invoke.MemberName asSetter()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.invoke.MemberName asSpecial()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.invoke.MemberName changeReferenceKind(byte, byte)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName java.lang.invoke.MemberName.Factory getFactory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName void access$200(java.lang.invoke.MemberName, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName.Factory Factory()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolve(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolveOrFail(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;, java.lang.Class&lt;NoSuchMemberException&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolveOrNull(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolveOrNull(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName[] newMemberBuffer(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getMembers(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, int, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandle MethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle MethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle boolean asCollectorChecks(java.lang.Class&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle boolean isVarargsCollector()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.Object internalProperties()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.Object internalValues()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.Object invokeWithArguments(java.util.List&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.String debugString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.String standardString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.LambdaForm internalForm()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.LambdaForm reinvokerForm(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MemberName internalMemberName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asCollector(java.lang.Class&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asCollector(java.lang.Class&lt;?&gt;, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asFixedArity()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asSpreader(java.lang.Class&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asSpreader(java.lang.Class&lt;?&gt;, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle rebind()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle setVarargs(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle setVarargs(java.lang.invoke.MemberName)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle viewAsType(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodType type()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandle void asSpreaderChecks(java.lang.Class&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandle void spreadArrayChecks(java.lang.Class&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl MethodHandleImpl()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle fakeMethodHandleInvoke(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeArrayElementAccessor(java.lang.Class&lt;?&gt;, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeReferenceIdentity(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeReferenceIdentity(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeSpreadArguments(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeSpreadArguments(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle selectAlternative(boolean, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle throwException(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl sun.invoke.empty.Empty throwException(T) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl sun.invoke.empty.Empty throwException(T)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor ArrayAccessor()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor boolean getElementZ(boolean[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor boolean getElementZ(boolean[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor boolean needCast(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor byte getElementB(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor byte getElementB(byte[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor char getElementC(char[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor char getElementC(char[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor double getElementD(double[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor double getElementD(double[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor float getElementF(float[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor float getElementF(float[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor int getElementI(int[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor int getElementI(int[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Class&lt;?&gt;, java.lang.Object[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Class&lt;?&gt;, java.lang.Object[], int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object, java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object, java.lang.Object, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.Object getElementL(java.lang.Object[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.String name(java.lang.Class&lt;?&gt;, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.String name(java.lang.Class&lt;?&gt;, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.invoke.MethodHandle getAccessor(java.lang.Class&lt;?&gt;, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.invoke.MethodType correctType(java.lang.Class&lt;?&gt;, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.invoke.MethodType type(java.lang.Class&lt;?&gt;, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor long getElementJ(long[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor long getElementJ(long[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor short getElementS(short[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor short getElementS(short[], int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementB(byte[], int, byte) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementC(char[], int, char) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementD(double[], int, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementF(float[], int, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementI(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementJ(long[], int, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Class&lt;?&gt;, java.lang.Object[], int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Class&lt;?&gt;, java.lang.Object[], int, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object, int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object, java.lang.Object, int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object, java.lang.Object, int, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementL(java.lang.Object[], int, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementS(short[], int, short) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.ArrayAccessor void setElementZ(boolean[], int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.AsVarargsCollector AsVarargsCollector(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.AsVarargsCollector AsVarargsCollector(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.AsVarargsCollector boolean isVarargsCollector()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle asFixedArity()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle reinvokerTarget()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle setVarargs(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle viewAsType(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller BindCaller()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller boolean checkCallerClass(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle access$000(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle makeInjectedInvoker(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle prepareForInvoker(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle restoreToType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle restoreToType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller.1 java.lang.Object computeValue(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller.1 java.lang.invoke.MethodHandle computeValue(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller.T T()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller.T java.lang.Object invoke_V(java.lang.invoke.MethodHandle, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleImpl.BindCaller.T void init()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleInfo MethodHandleInfo(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleInfo int getReferenceKind()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleInfo java.lang.Class&lt;?&gt; getDeclaringClass()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleInfo java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleInfo java.lang.invoke.MethodType getMethodType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives MethodHandleNatives()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives boolean canBeCalledVirtual(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives boolean canBeCalledVirtual(java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives boolean isCallerSensitive(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives boolean isCallerSensitiveMethod(java.lang.Class&lt;?&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives boolean isCallerSensitiveMethod(java.lang.Class&lt;?&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives boolean refKindIsValid(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkCallSite(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethod(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethod(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodImpl(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodImpl(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodTracing(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodTracing(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodTracing(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MemberName linkMethodTracing(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, java.lang.Object[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MethodHandle linkMethodHandleConstant(java.lang.Class&lt;?&gt;, int, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MethodType findMethodHandleType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MethodType findMethodHandleType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives java.lang.invoke.MethodType fixMethodType(java.lang.Class&lt;?&gt;, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleNatives.Constants Constants()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies MethodHandleProxies()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies T asInterfaceInstance(java.lang.Class&lt;T&gt;, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies boolean access$000(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies boolean isObjectMethod(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies boolean isWrapperInstance(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies boolean isWrapperInstance(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies java.lang.Class&lt;?&gt; wrapperInstanceType(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies java.lang.Object access$100(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies java.lang.Object callObjectMethod(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies java.lang.invoke.MethodHandle maybeBindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies java.lang.invoke.MethodHandle maybeBindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies java.lang.invoke.MethodHandle wrapperInstanceTarget(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies java.lang.reflect.Method[] getSingleNameMethods(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies sun.invoke.WrapperInstance asWrapperInstance(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies sun.invoke.WrapperInstance asWrapperInstance(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies.1 java.lang.Object getArg(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleProxies.1 java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics MethodHandleStatics()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.InternalError newInternalError(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.InternalError newInternalError(java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalStateException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalStateException(java.lang.String, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalStateException(java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String addTypeString(java.lang.Object, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String addTypeString(java.lang.Object, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String addTypeString(java.lang.Object, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandleStatics java.lang.String message(java.lang.String, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null;_,!null,_-&gt;!null;_,_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandles MethodHandles()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MemberName.Factory access$000()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle arrayElementGetter(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle arrayElementSetter(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle basicInvoker(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle constant(java.lang.Class&lt;?&gt;, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.lang.Class&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle exactInvoker(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArgument(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArgument(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArgument(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle, int, java.lang.Object...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle, int, java.lang.Object...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle invoker(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle throwException(java.lang.Class&lt;?&gt;, java.lang.Class&lt;? extends java.lang.Throwable&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandles.Lookup lookup()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandles.Lookup publicLookup()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandles void checkReorder(int[], java.lang.invoke.MethodType, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles void checkReorder(int[], java.lang.invoke.MethodType, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles void checkReorder(int[], java.lang.invoke.MethodType, java.lang.invoke.MethodType) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup Lookup(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup boolean isCheckMemberAccessOverridden(java.lang.SecurityManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup boolean isFullPowerLookup()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup boolean restrictProtectedReceiver(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup int fixmods(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup int lookupModes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.Class&lt;?&gt; findBoundCallerClass(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.Class&lt;?&gt; lookupClass()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.Class&lt;?&gt; lookupClassOrNull()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.String accessFailedMessage(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.String accessFailedMessage(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle fakeMethodHandleInvoke(java.lang.invoke.MemberName) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findConstructor(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStatic(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStatic(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findVirtualForMH(java.lang.String, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findVirtualForMH(java.lang.String, java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectConstructor(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectField(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectMethod(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectMethodCommon(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName, boolean, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectMethodNoRestrict(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle maybeBindCaller(java.lang.invoke.MemberName, java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle restrictReceiver(java.lang.invoke.MemberName, java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle restrictReceiver(java.lang.invoke.MemberName, java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflect(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectConstructor(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectField(java.lang.reflect.Field, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectGetter(java.lang.reflect.Field) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectSetter(java.lang.reflect.Field) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectSpecial(java.lang.reflect.Method, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectSpecial(java.lang.reflect.Method, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandles.Lookup in(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandles.Lookup in(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup void checkField(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup void checkMethod(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodHandles.Lookup void checkUnprivilegedlookupClass(java.lang.Class&lt;?&gt;, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType MethodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType MethodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType boolean canConvert(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodType boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodType boolean equals(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType boolean hasPrimitives()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType boolean isCastableTo(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType boolean isCastableTo(java.lang.invoke.MethodType)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType boolean isConvertibleTo(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType boolean isViewableAs(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType int checkPtype(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType int checkPtypes(java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType int parameterCount()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType int parameterSlotDepth(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.Class&lt;?&gt; lastParameterType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.Class&lt;?&gt; parameterType(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.Class&lt;?&gt; returnType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.Class&lt;?&gt; rtype()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.Class&lt;?&gt;[] listToArray(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.Class&lt;?&gt;[] ptypes()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.IndexOutOfBoundsException newIndexOutOfBoundsException(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.IndexOutOfBoundsException newIndexOutOfBoundsException(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.String toFieldDescriptorString(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.String toFieldDescriptorString(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.String toMethodDescriptorString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType appendParameterTypes(java.lang.Class&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType appendParameterTypes(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType basicType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType erase()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType insertParameterTypes(int, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType insertParameterTypes(int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType makeImpl(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[], boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType makeImpl(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[], boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType replaceParameterTypes(int, int, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType unwrapWithNoPrims(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType wrapWithPrims(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType java.lang.invoke.MethodTypeForm form()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType java.util.List&lt;java.lang.Class&lt;?&gt;&gt; parameterList()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType void MethodType_init(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType void MethodType_init(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType void checkRtype(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType.WeakInternSet boolean eq(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodType.WeakInternSet int hash(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType.WeakInternSet int indexFor(int, int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType.WeakInternSet java.lang.invoke.MethodType add(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType.WeakInternSet java.lang.invoke.MethodType get(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType.WeakInternSet java.lang.invoke.MethodType.WeakInternSet.Entry[] newTable(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodType.WeakInternSet void transfer(java.lang.invoke.MethodType.WeakInternSet.Entry[], java.lang.invoke.MethodType.WeakInternSet.Entry[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodType.WeakInternSet.Entry Entry(java.lang.invoke.MethodType, java.lang.ref.ReferenceQueue&lt;java.lang.Object&gt;, int, java.lang.invoke.MethodType.WeakInternSet.Entry) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm MethodTypeForm(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm boolean hasPrimitives()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm int argSlotToParameter(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm int parameterToArgSlot(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.Class&lt;?&gt; canonicalize(java.lang.Class&lt;?&gt;, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.Class&lt;?&gt;[] canonicalizes(java.lang.Class&lt;?&gt;[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.invoke.LambdaForm cachedLambdaForm(int)">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.invoke.LambdaForm setCachedLambdaForm(int, java.lang.invoke.LambdaForm)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.invoke.MethodType basicType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.invoke.MethodType canonicalize(java.lang.invoke.MethodType, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.invoke.MethodType erasedType()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MethodTypeForm java.lang.invoke.MethodTypeForm findForm(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MutableCallSite MutableCallSite(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MutableCallSite MutableCallSite(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.MutableCallSite java.lang.invoke.MethodHandle getTarget()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.MutableCallSite void syncAll(java.lang.invoke.MutableCallSite[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle SimpleMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle SimpleMethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodType, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodType, int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodType, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodType, int[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.SimpleMethodHandle make(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.SimpleMethodHandle make(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SimpleMethodHandle java.lang.invoke.SimpleMethodHandle make(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.SwitchPoint boolean hasBeenInvalidated()">
    <annotation name="org.jetbrains.annotations.Pure"/>
  </item>
  <item name="java.lang.invoke.SwitchPoint java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.invoke.SwitchPoint void invalidateAll(java.lang.invoke.SwitchPoint[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.VolatileCallSite VolatileCallSite(java.lang.invoke.MethodHandle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.invoke.VolatileCallSite VolatileCallSite(java.lang.invoke.MethodType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
